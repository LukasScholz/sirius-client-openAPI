=begin
#Sirius Nightsky Middleware API

#Sirius Nightsky Middleware API

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'date'

module SwaggerClient
  class CompoundMsData
    attr_accessor :id

    attr_accessor :index

    attr_accessor :ion_mass

    attr_accessor :ion_type

    attr_accessor :merged_ms1

    attr_accessor :merged_ms2

    attr_accessor :ms1_spectra

    attr_accessor :ms2_spectra

    attr_accessor :name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'index' => :'index',
        :'ion_mass' => :'ionMass',
        :'ion_type' => :'ionType',
        :'merged_ms1' => :'mergedMs1',
        :'merged_ms2' => :'mergedMs2',
        :'ms1_spectra' => :'ms1Spectra',
        :'ms2_spectra' => :'ms2Spectra',
        :'name' => :'name'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'index' => :'Integer',
        :'ion_mass' => :'Float',
        :'ion_type' => :'String',
        :'merged_ms1' => :'AnnotatedSpectrum',
        :'merged_ms2' => :'AnnotatedSpectrum',
        :'ms1_spectra' => :'Array<AnnotatedSpectrum>',
        :'ms2_spectra' => :'Array<AnnotatedSpectrum>',
        :'name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'index')
        self.index = attributes[:'index']
      end

      if attributes.has_key?(:'ionMass')
        self.ion_mass = attributes[:'ionMass']
      end

      if attributes.has_key?(:'ionType')
        self.ion_type = attributes[:'ionType']
      end

      if attributes.has_key?(:'mergedMs1')
        self.merged_ms1 = attributes[:'mergedMs1']
      end

      if attributes.has_key?(:'mergedMs2')
        self.merged_ms2 = attributes[:'mergedMs2']
      end

      if attributes.has_key?(:'ms1Spectra')
        if (value = attributes[:'ms1Spectra']).is_a?(Array)
          self.ms1_spectra = value
        end
      end

      if attributes.has_key?(:'ms2Spectra')
        if (value = attributes[:'ms2Spectra']).is_a?(Array)
          self.ms2_spectra = value
        end
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          index == o.index &&
          ion_mass == o.ion_mass &&
          ion_type == o.ion_type &&
          merged_ms1 == o.merged_ms1 &&
          merged_ms2 == o.merged_ms2 &&
          ms1_spectra == o.ms1_spectra &&
          ms2_spectra == o.ms2_spectra &&
          name == o.name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, index, ion_mass, ion_type, merged_ms1, merged_ms2, ms1_spectra, ms2_spectra, name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
