# coding: utf-8

"""
    Sirius Nightsky Middleware API

    Sirius Nightsky Middleware API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnnotatedSpectrum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collision_energy': 'CollisionEnergy',
        'empty': 'bool',
        'intensities': 'list[float]',
        'masses': 'list[float]',
        'max_intensity': 'float',
        'ms_level': 'int'
    }

    attribute_map = {
        'collision_energy': 'collisionEnergy',
        'empty': 'empty',
        'intensities': 'intensities',
        'masses': 'masses',
        'max_intensity': 'maxIntensity',
        'ms_level': 'msLevel'
    }

    def __init__(self, collision_energy=None, empty=None, intensities=None, masses=None, max_intensity=None, ms_level=None):  # noqa: E501
        """AnnotatedSpectrum - a model defined in Swagger"""  # noqa: E501

        self._collision_energy = None
        self._empty = None
        self._intensities = None
        self._masses = None
        self._max_intensity = None
        self._ms_level = None
        self.discriminator = None

        if collision_energy is not None:
            self.collision_energy = collision_energy
        if empty is not None:
            self.empty = empty
        if intensities is not None:
            self.intensities = intensities
        if masses is not None:
            self.masses = masses
        if max_intensity is not None:
            self.max_intensity = max_intensity
        if ms_level is not None:
            self.ms_level = ms_level

    @property
    def collision_energy(self):
        """Gets the collision_energy of this AnnotatedSpectrum.  # noqa: E501


        :return: The collision_energy of this AnnotatedSpectrum.  # noqa: E501
        :rtype: CollisionEnergy
        """
        return self._collision_energy

    @collision_energy.setter
    def collision_energy(self, collision_energy):
        """Sets the collision_energy of this AnnotatedSpectrum.


        :param collision_energy: The collision_energy of this AnnotatedSpectrum.  # noqa: E501
        :type: CollisionEnergy
        """

        self._collision_energy = collision_energy

    @property
    def empty(self):
        """Gets the empty of this AnnotatedSpectrum.  # noqa: E501


        :return: The empty of this AnnotatedSpectrum.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this AnnotatedSpectrum.


        :param empty: The empty of this AnnotatedSpectrum.  # noqa: E501
        :type: bool
        """

        self._empty = empty

    @property
    def intensities(self):
        """Gets the intensities of this AnnotatedSpectrum.  # noqa: E501


        :return: The intensities of this AnnotatedSpectrum.  # noqa: E501
        :rtype: list[float]
        """
        return self._intensities

    @intensities.setter
    def intensities(self, intensities):
        """Sets the intensities of this AnnotatedSpectrum.


        :param intensities: The intensities of this AnnotatedSpectrum.  # noqa: E501
        :type: list[float]
        """

        self._intensities = intensities

    @property
    def masses(self):
        """Gets the masses of this AnnotatedSpectrum.  # noqa: E501


        :return: The masses of this AnnotatedSpectrum.  # noqa: E501
        :rtype: list[float]
        """
        return self._masses

    @masses.setter
    def masses(self, masses):
        """Sets the masses of this AnnotatedSpectrum.


        :param masses: The masses of this AnnotatedSpectrum.  # noqa: E501
        :type: list[float]
        """

        self._masses = masses

    @property
    def max_intensity(self):
        """Gets the max_intensity of this AnnotatedSpectrum.  # noqa: E501


        :return: The max_intensity of this AnnotatedSpectrum.  # noqa: E501
        :rtype: float
        """
        return self._max_intensity

    @max_intensity.setter
    def max_intensity(self, max_intensity):
        """Sets the max_intensity of this AnnotatedSpectrum.


        :param max_intensity: The max_intensity of this AnnotatedSpectrum.  # noqa: E501
        :type: float
        """

        self._max_intensity = max_intensity

    @property
    def ms_level(self):
        """Gets the ms_level of this AnnotatedSpectrum.  # noqa: E501


        :return: The ms_level of this AnnotatedSpectrum.  # noqa: E501
        :rtype: int
        """
        return self._ms_level

    @ms_level.setter
    def ms_level(self, ms_level):
        """Sets the ms_level of this AnnotatedSpectrum.


        :param ms_level: The ms_level of this AnnotatedSpectrum.  # noqa: E501
        :type: int
        """

        self._ms_level = ms_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotatedSpectrum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotatedSpectrum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
