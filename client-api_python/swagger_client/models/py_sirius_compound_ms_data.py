# coding: utf-8

"""
    Sirius Nightsky Middleware API

    Sirius Nightsky Middleware API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PySiriusCompoundMsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'index': 'int',
        'ion_mass': 'float',
        'ion_type': 'str',
        'merged_ms1': 'PySiriusAnnotatedSpectrum',
        'merged_ms2': 'PySiriusAnnotatedSpectrum',
        'ms1_spectra': 'list[PySiriusAnnotatedSpectrum]',
        'ms2_spectra': 'list[PySiriusAnnotatedSpectrum]',
        'name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'index': 'index',
        'ion_mass': 'ionMass',
        'ion_type': 'ionType',
        'merged_ms1': 'mergedMs1',
        'merged_ms2': 'mergedMs2',
        'ms1_spectra': 'ms1Spectra',
        'ms2_spectra': 'ms2Spectra',
        'name': 'name'
    }

    def __init__(self, id=None, index=None, ion_mass=None, ion_type=None, merged_ms1=None, merged_ms2=None, ms1_spectra=None, ms2_spectra=None, name=None):  # noqa: E501
        """PySiriusCompoundMsData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._index = None
        self._ion_mass = None
        self._ion_type = None
        self._merged_ms1 = None
        self._merged_ms2 = None
        self._ms1_spectra = None
        self._ms2_spectra = None
        self._name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if index is not None:
            self.index = index
        if ion_mass is not None:
            self.ion_mass = ion_mass
        if ion_type is not None:
            self.ion_type = ion_type
        if merged_ms1 is not None:
            self.merged_ms1 = merged_ms1
        if merged_ms2 is not None:
            self.merged_ms2 = merged_ms2
        if ms1_spectra is not None:
            self.ms1_spectra = ms1_spectra
        if ms2_spectra is not None:
            self.ms2_spectra = ms2_spectra
        if name is not None:
            self.name = name

    @property
    def id(self):
        """Gets the id of this PySiriusCompoundMsData.  # noqa: E501


        :return: The id of this PySiriusCompoundMsData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PySiriusCompoundMsData.


        :param id: The id of this PySiriusCompoundMsData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def index(self):
        """Gets the index of this PySiriusCompoundMsData.  # noqa: E501


        :return: The index of this PySiriusCompoundMsData.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this PySiriusCompoundMsData.


        :param index: The index of this PySiriusCompoundMsData.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def ion_mass(self):
        """Gets the ion_mass of this PySiriusCompoundMsData.  # noqa: E501


        :return: The ion_mass of this PySiriusCompoundMsData.  # noqa: E501
        :rtype: float
        """
        return self._ion_mass

    @ion_mass.setter
    def ion_mass(self, ion_mass):
        """Sets the ion_mass of this PySiriusCompoundMsData.


        :param ion_mass: The ion_mass of this PySiriusCompoundMsData.  # noqa: E501
        :type: float
        """

        self._ion_mass = ion_mass

    @property
    def ion_type(self):
        """Gets the ion_type of this PySiriusCompoundMsData.  # noqa: E501


        :return: The ion_type of this PySiriusCompoundMsData.  # noqa: E501
        :rtype: str
        """
        return self._ion_type

    @ion_type.setter
    def ion_type(self, ion_type):
        """Sets the ion_type of this PySiriusCompoundMsData.


        :param ion_type: The ion_type of this PySiriusCompoundMsData.  # noqa: E501
        :type: str
        """

        self._ion_type = ion_type

    @property
    def merged_ms1(self):
        """Gets the merged_ms1 of this PySiriusCompoundMsData.  # noqa: E501


        :return: The merged_ms1 of this PySiriusCompoundMsData.  # noqa: E501
        :rtype: PySiriusAnnotatedSpectrum
        """
        return self._merged_ms1

    @merged_ms1.setter
    def merged_ms1(self, merged_ms1):
        """Sets the merged_ms1 of this PySiriusCompoundMsData.


        :param merged_ms1: The merged_ms1 of this PySiriusCompoundMsData.  # noqa: E501
        :type: PySiriusAnnotatedSpectrum
        """

        self._merged_ms1 = merged_ms1

    @property
    def merged_ms2(self):
        """Gets the merged_ms2 of this PySiriusCompoundMsData.  # noqa: E501


        :return: The merged_ms2 of this PySiriusCompoundMsData.  # noqa: E501
        :rtype: PySiriusAnnotatedSpectrum
        """
        return self._merged_ms2

    @merged_ms2.setter
    def merged_ms2(self, merged_ms2):
        """Sets the merged_ms2 of this PySiriusCompoundMsData.


        :param merged_ms2: The merged_ms2 of this PySiriusCompoundMsData.  # noqa: E501
        :type: PySiriusAnnotatedSpectrum
        """

        self._merged_ms2 = merged_ms2

    @property
    def ms1_spectra(self):
        """Gets the ms1_spectra of this PySiriusCompoundMsData.  # noqa: E501


        :return: The ms1_spectra of this PySiriusCompoundMsData.  # noqa: E501
        :rtype: list[PySiriusAnnotatedSpectrum]
        """
        return self._ms1_spectra

    @ms1_spectra.setter
    def ms1_spectra(self, ms1_spectra):
        """Sets the ms1_spectra of this PySiriusCompoundMsData.


        :param ms1_spectra: The ms1_spectra of this PySiriusCompoundMsData.  # noqa: E501
        :type: list[PySiriusAnnotatedSpectrum]
        """

        self._ms1_spectra = ms1_spectra

    @property
    def ms2_spectra(self):
        """Gets the ms2_spectra of this PySiriusCompoundMsData.  # noqa: E501


        :return: The ms2_spectra of this PySiriusCompoundMsData.  # noqa: E501
        :rtype: list[PySiriusAnnotatedSpectrum]
        """
        return self._ms2_spectra

    @ms2_spectra.setter
    def ms2_spectra(self, ms2_spectra):
        """Sets the ms2_spectra of this PySiriusCompoundMsData.


        :param ms2_spectra: The ms2_spectra of this PySiriusCompoundMsData.  # noqa: E501
        :type: list[PySiriusAnnotatedSpectrum]
        """

        self._ms2_spectra = ms2_spectra

    @property
    def name(self):
        """Gets the name of this PySiriusCompoundMsData.  # noqa: E501


        :return: The name of this PySiriusCompoundMsData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PySiriusCompoundMsData.


        :param name: The name of this PySiriusCompoundMsData.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PySiriusCompoundMsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PySiriusCompoundMsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
