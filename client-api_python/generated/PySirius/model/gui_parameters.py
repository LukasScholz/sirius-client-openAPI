# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class GuiParameters(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Parameters to "remote control" the SIRIUS GUI.
    """


    class MetaOapg:
        
        class properties:
            
            
            class selectedTab(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FORMULAS": "FORMULAS",
                        "SPECTRA": "SPECTRA",
                        "TREES": "TREES",
                        "PREDICTED_FINGERPRINT": "PREDICTED_FINGERPRINT",
                        "STRUCTURES": "STRUCTURES",
                        "STRUCTURE_ANNOTATION": "STRUCTURE_ANNOTATION",
                        "COMPOUND_CLASSES": "COMPOUND_CLASSES",
                    }
                
                @schemas.classproperty
                def FORMULAS(cls):
                    return cls("FORMULAS")
                
                @schemas.classproperty
                def SPECTRA(cls):
                    return cls("SPECTRA")
                
                @schemas.classproperty
                def TREES(cls):
                    return cls("TREES")
                
                @schemas.classproperty
                def PREDICTED_FINGERPRINT(cls):
                    return cls("PREDICTED_FINGERPRINT")
                
                @schemas.classproperty
                def STRUCTURES(cls):
                    return cls("STRUCTURES")
                
                @schemas.classproperty
                def STRUCTURE_ANNOTATION(cls):
                    return cls("STRUCTURE_ANNOTATION")
                
                @schemas.classproperty
                def COMPOUND_CLASSES(cls):
                    return cls("COMPOUND_CLASSES")
            cid = schemas.StrSchema
            fid = schemas.StrSchema
            structureCandidateInChIKey = schemas.StrSchema
            bringToFront = schemas.BoolSchema
            __annotations__ = {
                "selectedTab": selectedTab,
                "cid": cid,
                "fid": fid,
                "structureCandidateInChIKey": structureCandidateInChIKey,
                "bringToFront": bringToFront,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selectedTab"]) -> MetaOapg.properties.selectedTab: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fid"]) -> MetaOapg.properties.fid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["structureCandidateInChIKey"]) -> MetaOapg.properties.structureCandidateInChIKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bringToFront"]) -> MetaOapg.properties.bringToFront: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["selectedTab", "cid", "fid", "structureCandidateInChIKey", "bringToFront", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selectedTab"]) -> typing.Union[MetaOapg.properties.selectedTab, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fid"]) -> typing.Union[MetaOapg.properties.fid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["structureCandidateInChIKey"]) -> typing.Union[MetaOapg.properties.structureCandidateInChIKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bringToFront"]) -> typing.Union[MetaOapg.properties.bringToFront, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["selectedTab", "cid", "fid", "structureCandidateInChIKey", "bringToFront", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        selectedTab: typing.Union[MetaOapg.properties.selectedTab, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        fid: typing.Union[MetaOapg.properties.fid, str, schemas.Unset] = schemas.unset,
        structureCandidateInChIKey: typing.Union[MetaOapg.properties.structureCandidateInChIKey, str, schemas.Unset] = schemas.unset,
        bringToFront: typing.Union[MetaOapg.properties.bringToFront, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GuiParameters':
        return super().__new__(
            cls,
            *args,
            selectedTab=selectedTab,
            cid=cid,
            fid=fid,
            structureCandidateInChIKey=structureCandidateInChIKey,
            bringToFront=bringToFront,
            _configuration=_configuration,
            **kwargs,
        )
