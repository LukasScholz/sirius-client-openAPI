# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class StructureCandidate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            structureName = schemas.StrSchema
            smiles = schemas.StrSchema
            csiScore = schemas.Float64Schema
            tanimotoSimilarity = schemas.Float64Schema
            confidenceScore = schemas.Float64Schema
            numOfPubMedIds = schemas.Int32Schema
            xlogP = schemas.Float64Schema
            inchiKey = schemas.StrSchema
            
            
            class fpBitsSet(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fpBitsSet':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class dbLinks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DBLink']:
                        return DBLink
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DBLink'], typing.List['DBLink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dbLinks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DBLink':
                    return super().__getitem__(i)
            
            
            class pubmedIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pubmedIds':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "structureName": structureName,
                "smiles": smiles,
                "csiScore": csiScore,
                "tanimotoSimilarity": tanimotoSimilarity,
                "confidenceScore": confidenceScore,
                "numOfPubMedIds": numOfPubMedIds,
                "xlogP": xlogP,
                "inchiKey": inchiKey,
                "fpBitsSet": fpBitsSet,
                "dbLinks": dbLinks,
                "pubmedIds": pubmedIds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["structureName"]) -> MetaOapg.properties.structureName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smiles"]) -> MetaOapg.properties.smiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csiScore"]) -> MetaOapg.properties.csiScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tanimotoSimilarity"]) -> MetaOapg.properties.tanimotoSimilarity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidenceScore"]) -> MetaOapg.properties.confidenceScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numOfPubMedIds"]) -> MetaOapg.properties.numOfPubMedIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xlogP"]) -> MetaOapg.properties.xlogP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inchiKey"]) -> MetaOapg.properties.inchiKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fpBitsSet"]) -> MetaOapg.properties.fpBitsSet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dbLinks"]) -> MetaOapg.properties.dbLinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pubmedIds"]) -> MetaOapg.properties.pubmedIds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["structureName", "smiles", "csiScore", "tanimotoSimilarity", "confidenceScore", "numOfPubMedIds", "xlogP", "inchiKey", "fpBitsSet", "dbLinks", "pubmedIds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["structureName"]) -> typing.Union[MetaOapg.properties.structureName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smiles"]) -> typing.Union[MetaOapg.properties.smiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csiScore"]) -> typing.Union[MetaOapg.properties.csiScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tanimotoSimilarity"]) -> typing.Union[MetaOapg.properties.tanimotoSimilarity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidenceScore"]) -> typing.Union[MetaOapg.properties.confidenceScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numOfPubMedIds"]) -> typing.Union[MetaOapg.properties.numOfPubMedIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xlogP"]) -> typing.Union[MetaOapg.properties.xlogP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inchiKey"]) -> typing.Union[MetaOapg.properties.inchiKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fpBitsSet"]) -> typing.Union[MetaOapg.properties.fpBitsSet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dbLinks"]) -> typing.Union[MetaOapg.properties.dbLinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pubmedIds"]) -> typing.Union[MetaOapg.properties.pubmedIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["structureName", "smiles", "csiScore", "tanimotoSimilarity", "confidenceScore", "numOfPubMedIds", "xlogP", "inchiKey", "fpBitsSet", "dbLinks", "pubmedIds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        structureName: typing.Union[MetaOapg.properties.structureName, str, schemas.Unset] = schemas.unset,
        smiles: typing.Union[MetaOapg.properties.smiles, str, schemas.Unset] = schemas.unset,
        csiScore: typing.Union[MetaOapg.properties.csiScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tanimotoSimilarity: typing.Union[MetaOapg.properties.tanimotoSimilarity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        confidenceScore: typing.Union[MetaOapg.properties.confidenceScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        numOfPubMedIds: typing.Union[MetaOapg.properties.numOfPubMedIds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        xlogP: typing.Union[MetaOapg.properties.xlogP, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        inchiKey: typing.Union[MetaOapg.properties.inchiKey, str, schemas.Unset] = schemas.unset,
        fpBitsSet: typing.Union[MetaOapg.properties.fpBitsSet, list, tuple, schemas.Unset] = schemas.unset,
        dbLinks: typing.Union[MetaOapg.properties.dbLinks, list, tuple, schemas.Unset] = schemas.unset,
        pubmedIds: typing.Union[MetaOapg.properties.pubmedIds, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StructureCandidate':
        return super().__new__(
            cls,
            *args,
            structureName=structureName,
            smiles=smiles,
            csiScore=csiScore,
            tanimotoSimilarity=tanimotoSimilarity,
            confidenceScore=confidenceScore,
            numOfPubMedIds=numOfPubMedIds,
            xlogP=xlogP,
            inchiKey=inchiKey,
            fpBitsSet=fpBitsSet,
            dbLinks=dbLinks,
            pubmedIds=pubmedIds,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.db_link import DBLink
