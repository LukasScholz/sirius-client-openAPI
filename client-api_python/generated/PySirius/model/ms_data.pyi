# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class MsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The MsData wraps all spectral input data belonging to a compound.

 Each compound has:
 - One merged MS/MS spectrum (optional)
 - One merged MS spectrum (optional)
 - many MS/MS spectra
 - many MS spectra

 Each non-merged spectrum has an index which can be used to access the spectrum.

 In the future we might add some additional information like chromatographic peak or something similar
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def mergedMs1() -> typing.Type['AnnotatedSpectrum']:
                return AnnotatedSpectrum
        
            @staticmethod
            def mergedMs2() -> typing.Type['AnnotatedSpectrum']:
                return AnnotatedSpectrum
            
            
            class ms2Spectra(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AnnotatedSpectrum']:
                        return AnnotatedSpectrum
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AnnotatedSpectrum'], typing.List['AnnotatedSpectrum']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ms2Spectra':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AnnotatedSpectrum':
                    return super().__getitem__(i)
            
            
            class ms1Spectra(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AnnotatedSpectrum']:
                        return AnnotatedSpectrum
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AnnotatedSpectrum'], typing.List['AnnotatedSpectrum']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ms1Spectra':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AnnotatedSpectrum':
                    return super().__getitem__(i)
            __annotations__ = {
                "mergedMs1": mergedMs1,
                "mergedMs2": mergedMs2,
                "ms2Spectra": ms2Spectra,
                "ms1Spectra": ms1Spectra,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mergedMs1"]) -> 'AnnotatedSpectrum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mergedMs2"]) -> 'AnnotatedSpectrum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ms2Spectra"]) -> MetaOapg.properties.ms2Spectra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ms1Spectra"]) -> MetaOapg.properties.ms1Spectra: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mergedMs1", "mergedMs2", "ms2Spectra", "ms1Spectra", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mergedMs1"]) -> typing.Union['AnnotatedSpectrum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mergedMs2"]) -> typing.Union['AnnotatedSpectrum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ms2Spectra"]) -> typing.Union[MetaOapg.properties.ms2Spectra, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ms1Spectra"]) -> typing.Union[MetaOapg.properties.ms1Spectra, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mergedMs1", "mergedMs2", "ms2Spectra", "ms1Spectra", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        mergedMs1: typing.Union['AnnotatedSpectrum', schemas.Unset] = schemas.unset,
        mergedMs2: typing.Union['AnnotatedSpectrum', schemas.Unset] = schemas.unset,
        ms2Spectra: typing.Union[MetaOapg.properties.ms2Spectra, list, tuple, schemas.Unset] = schemas.unset,
        ms1Spectra: typing.Union[MetaOapg.properties.ms1Spectra, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MsData':
        return super().__new__(
            cls,
            *args,
            mergedMs1=mergedMs1,
            mergedMs2=mergedMs2,
            ms2Spectra=ms2Spectra,
            ms1Spectra=ms1Spectra,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.annotated_spectrum import AnnotatedSpectrum
