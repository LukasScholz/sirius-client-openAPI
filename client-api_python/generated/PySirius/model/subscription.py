# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class Subscription(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            sid = schemas.StrSchema
            subscriberId = schemas.StrSchema
            subscriberName = schemas.StrSchema
            expirationDate = schemas.DateTimeSchema
            startDate = schemas.DateTimeSchema
            countQueries = schemas.BoolSchema
            compoundLimit = schemas.Int32Schema
            compoundHashRecordingTime = schemas.Int32Schema
            maxQueriesPerCompound = schemas.Int32Schema
            maxUserAccounts = schemas.Int32Schema
            serviceUrl = schemas.StrSchema
            description = schemas.StrSchema
            name = schemas.StrSchema
            tos = schemas.StrSchema
            pp = schemas.StrSchema
            __annotations__ = {
                "sid": sid,
                "subscriberId": subscriberId,
                "subscriberName": subscriberName,
                "expirationDate": expirationDate,
                "startDate": startDate,
                "countQueries": countQueries,
                "compoundLimit": compoundLimit,
                "compoundHashRecordingTime": compoundHashRecordingTime,
                "maxQueriesPerCompound": maxQueriesPerCompound,
                "maxUserAccounts": maxUserAccounts,
                "serviceUrl": serviceUrl,
                "description": description,
                "name": name,
                "tos": tos,
                "pp": pp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sid"]) -> MetaOapg.properties.sid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriberId"]) -> MetaOapg.properties.subscriberId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriberName"]) -> MetaOapg.properties.subscriberName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countQueries"]) -> MetaOapg.properties.countQueries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compoundLimit"]) -> MetaOapg.properties.compoundLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compoundHashRecordingTime"]) -> MetaOapg.properties.compoundHashRecordingTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxQueriesPerCompound"]) -> MetaOapg.properties.maxQueriesPerCompound: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxUserAccounts"]) -> MetaOapg.properties.maxUserAccounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceUrl"]) -> MetaOapg.properties.serviceUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tos"]) -> MetaOapg.properties.tos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pp"]) -> MetaOapg.properties.pp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sid", "subscriberId", "subscriberName", "expirationDate", "startDate", "countQueries", "compoundLimit", "compoundHashRecordingTime", "maxQueriesPerCompound", "maxUserAccounts", "serviceUrl", "description", "name", "tos", "pp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sid"]) -> typing.Union[MetaOapg.properties.sid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriberId"]) -> typing.Union[MetaOapg.properties.subscriberId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriberName"]) -> typing.Union[MetaOapg.properties.subscriberName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countQueries"]) -> typing.Union[MetaOapg.properties.countQueries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compoundLimit"]) -> typing.Union[MetaOapg.properties.compoundLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compoundHashRecordingTime"]) -> typing.Union[MetaOapg.properties.compoundHashRecordingTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxQueriesPerCompound"]) -> typing.Union[MetaOapg.properties.maxQueriesPerCompound, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxUserAccounts"]) -> typing.Union[MetaOapg.properties.maxUserAccounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceUrl"]) -> typing.Union[MetaOapg.properties.serviceUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tos"]) -> typing.Union[MetaOapg.properties.tos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pp"]) -> typing.Union[MetaOapg.properties.pp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sid", "subscriberId", "subscriberName", "expirationDate", "startDate", "countQueries", "compoundLimit", "compoundHashRecordingTime", "maxQueriesPerCompound", "maxUserAccounts", "serviceUrl", "description", "name", "tos", "pp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sid: typing.Union[MetaOapg.properties.sid, str, schemas.Unset] = schemas.unset,
        subscriberId: typing.Union[MetaOapg.properties.subscriberId, str, schemas.Unset] = schemas.unset,
        subscriberName: typing.Union[MetaOapg.properties.subscriberName, str, schemas.Unset] = schemas.unset,
        expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, datetime, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, schemas.Unset] = schemas.unset,
        countQueries: typing.Union[MetaOapg.properties.countQueries, bool, schemas.Unset] = schemas.unset,
        compoundLimit: typing.Union[MetaOapg.properties.compoundLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        compoundHashRecordingTime: typing.Union[MetaOapg.properties.compoundHashRecordingTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxQueriesPerCompound: typing.Union[MetaOapg.properties.maxQueriesPerCompound, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxUserAccounts: typing.Union[MetaOapg.properties.maxUserAccounts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        serviceUrl: typing.Union[MetaOapg.properties.serviceUrl, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        tos: typing.Union[MetaOapg.properties.tos, str, schemas.Unset] = schemas.unset,
        pp: typing.Union[MetaOapg.properties.pp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Subscription':
        return super().__new__(
            cls,
            *args,
            sid=sid,
            subscriberId=subscriberId,
            subscriberName=subscriberName,
            expirationDate=expirationDate,
            startDate=startDate,
            countQueries=countQueries,
            compoundLimit=compoundLimit,
            compoundHashRecordingTime=compoundHashRecordingTime,
            maxQueriesPerCompound=maxQueriesPerCompound,
            maxUserAccounts=maxUserAccounts,
            serviceUrl=serviceUrl,
            description=description,
            name=name,
            tos=tos,
            pp=pp,
            _configuration=_configuration,
            **kwargs,
        )
