# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class LossEdge(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def sourceFragment() -> typing.Type['FragmentNode']:
                return FragmentNode
        
            @staticmethod
            def targetFragment() -> typing.Type['FragmentNode']:
                return FragmentNode
            molecularFormula = schemas.StrSchema
            score = schemas.Float64Schema
            __annotations__ = {
                "sourceFragment": sourceFragment,
                "targetFragment": targetFragment,
                "molecularFormula": molecularFormula,
                "score": score,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceFragment"]) -> 'FragmentNode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetFragment"]) -> 'FragmentNode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["molecularFormula"]) -> MetaOapg.properties.molecularFormula: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sourceFragment", "targetFragment", "molecularFormula", "score", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceFragment"]) -> typing.Union['FragmentNode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetFragment"]) -> typing.Union['FragmentNode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["molecularFormula"]) -> typing.Union[MetaOapg.properties.molecularFormula, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sourceFragment", "targetFragment", "molecularFormula", "score", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sourceFragment: typing.Union['FragmentNode', schemas.Unset] = schemas.unset,
        targetFragment: typing.Union['FragmentNode', schemas.Unset] = schemas.unset,
        molecularFormula: typing.Union[MetaOapg.properties.molecularFormula, str, schemas.Unset] = schemas.unset,
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LossEdge':
        return super().__new__(
            cls,
            *args,
            sourceFragment=sourceFragment,
            targetFragment=targetFragment,
            molecularFormula=molecularFormula,
            score=score,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.fragment_node import FragmentNode
