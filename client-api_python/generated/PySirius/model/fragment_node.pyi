# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class FragmentNode(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int32Schema
            molecularFormula = schemas.StrSchema
            ionType = schemas.StrSchema
            massDeviationDa = schemas.Float64Schema
            massErrorPpm = schemas.Float64Schema
            score = schemas.Float64Schema
            intensity = schemas.Float64Schema
            mz = schemas.Float64Schema
            __annotations__ = {
                "id": id,
                "molecularFormula": molecularFormula,
                "ionType": ionType,
                "massDeviationDa": massDeviationDa,
                "massErrorPpm": massErrorPpm,
                "score": score,
                "intensity": intensity,
                "mz": mz,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["molecularFormula"]) -> MetaOapg.properties.molecularFormula: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ionType"]) -> MetaOapg.properties.ionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["massDeviationDa"]) -> MetaOapg.properties.massDeviationDa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["massErrorPpm"]) -> MetaOapg.properties.massErrorPpm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intensity"]) -> MetaOapg.properties.intensity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mz"]) -> MetaOapg.properties.mz: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "molecularFormula", "ionType", "massDeviationDa", "massErrorPpm", "score", "intensity", "mz", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["molecularFormula"]) -> typing.Union[MetaOapg.properties.molecularFormula, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ionType"]) -> typing.Union[MetaOapg.properties.ionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["massDeviationDa"]) -> typing.Union[MetaOapg.properties.massDeviationDa, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["massErrorPpm"]) -> typing.Union[MetaOapg.properties.massErrorPpm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intensity"]) -> typing.Union[MetaOapg.properties.intensity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mz"]) -> typing.Union[MetaOapg.properties.mz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "molecularFormula", "ionType", "massDeviationDa", "massErrorPpm", "score", "intensity", "mz", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        molecularFormula: typing.Union[MetaOapg.properties.molecularFormula, str, schemas.Unset] = schemas.unset,
        ionType: typing.Union[MetaOapg.properties.ionType, str, schemas.Unset] = schemas.unset,
        massDeviationDa: typing.Union[MetaOapg.properties.massDeviationDa, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        massErrorPpm: typing.Union[MetaOapg.properties.massErrorPpm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        intensity: typing.Union[MetaOapg.properties.intensity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mz: typing.Union[MetaOapg.properties.mz, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FragmentNode':
        return super().__new__(
            cls,
            *args,
            id=id,
            molecularFormula=molecularFormula,
            ionType=ionType,
            massDeviationDa=massDeviationDa,
            massErrorPpm=massErrorPpm,
            score=score,
            intensity=intensity,
            mz=mz,
            _configuration=_configuration,
            **kwargs,
        )
