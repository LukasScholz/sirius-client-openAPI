# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class ResultOverview(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Results that are available for a {@link FormulaResultContainer FormulaResultContainer} represented as boolean or numeric score (if available).
 NULL scores indicate that the corresponding result is not available.
    """


    class MetaOapg:
        
        class properties:
            siriusScore = schemas.Float64Schema
            zodiacScore = schemas.Float64Schema
            topCSIScore = schemas.Float64Schema
            confidenceScore = schemas.Float64Schema
            canopusResult = schemas.BoolSchema
            __annotations__ = {
                "siriusScore": siriusScore,
                "zodiacScore": zodiacScore,
                "topCSIScore": topCSIScore,
                "confidenceScore": confidenceScore,
                "canopusResult": canopusResult,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siriusScore"]) -> MetaOapg.properties.siriusScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zodiacScore"]) -> MetaOapg.properties.zodiacScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topCSIScore"]) -> MetaOapg.properties.topCSIScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidenceScore"]) -> MetaOapg.properties.confidenceScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canopusResult"]) -> MetaOapg.properties.canopusResult: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["siriusScore", "zodiacScore", "topCSIScore", "confidenceScore", "canopusResult", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siriusScore"]) -> typing.Union[MetaOapg.properties.siriusScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zodiacScore"]) -> typing.Union[MetaOapg.properties.zodiacScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topCSIScore"]) -> typing.Union[MetaOapg.properties.topCSIScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidenceScore"]) -> typing.Union[MetaOapg.properties.confidenceScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canopusResult"]) -> typing.Union[MetaOapg.properties.canopusResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["siriusScore", "zodiacScore", "topCSIScore", "confidenceScore", "canopusResult", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        siriusScore: typing.Union[MetaOapg.properties.siriusScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        zodiacScore: typing.Union[MetaOapg.properties.zodiacScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        topCSIScore: typing.Union[MetaOapg.properties.topCSIScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        confidenceScore: typing.Union[MetaOapg.properties.confidenceScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        canopusResult: typing.Union[MetaOapg.properties.canopusResult, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResultOverview':
        return super().__new__(
            cls,
            *args,
            siriusScore=siriusScore,
            zodiacScore=zodiacScore,
            topCSIScore=topCSIScore,
            confidenceScore=confidenceScore,
            canopusResult=canopusResult,
            _configuration=_configuration,
            **kwargs,
        )
