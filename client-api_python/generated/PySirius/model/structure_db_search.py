# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class StructureDbSearch(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    User/developer friendly parameter subset for the CSI:FingerID structure db search tool.
    """


    class MetaOapg:
        
        class properties:
            enabled = schemas.BoolSchema
            
            
            class structureSearchDBs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "ALL": "ALL",
                                "ALL_BUT_INSILICO": "ALL_BUT_INSILICO",
                                "PUBCHEM": "PUBCHEM",
                                "MESH": "MESH",
                                "HMDB": "HMDB",
                                "KNAPSACK": "KNAPSACK",
                                "CHEBI": "CHEBI",
                                "PUBMED": "PUBMED",
                                "BIO": "BIO",
                                "KEGG": "KEGG",
                                "HSDB": "HSDB",
                                "MACONDA": "MACONDA",
                                "METACYC": "METACYC",
                                "GNPS": "GNPS",
                                "ZINCBIO": "ZINCBIO",
                                "TRAIN": "TRAIN",
                                "UNDP": "UNDP",
                                "YMDB": "YMDB",
                                "PLANTCYC": "PLANTCYC",
                                "NORMAN": "NORMAN",
                                "ADDITIONAL": "ADDITIONAL",
                                "SUPERNATURAL": "SUPERNATURAL",
                                "COCONUT": "COCONUT",
                                "PUBCHEMANNOTATIONBIO": "PUBCHEMANNOTATIONBIO",
                                "PUBCHEMANNOTATIONDRUG": "PUBCHEMANNOTATIONDRUG",
                                "PUBCHEMANNOTATIONSAFETYANDTOXIC": "PUBCHEMANNOTATIONSAFETYANDTOXIC",
                                "PUBCHEMANNOTATIONFOOD": "PUBCHEMANNOTATIONFOOD",
                                "LIPID": "LIPID",
                                "KEGGMINE": "KEGGMINE",
                                "ECOCYCMINE": "ECOCYCMINE",
                                "YMDBMINE": "YMDBMINE",
                            }
                        
                        @schemas.classproperty
                        def ALL(cls):
                            return cls("ALL")
                        
                        @schemas.classproperty
                        def ALL_BUT_INSILICO(cls):
                            return cls("ALL_BUT_INSILICO")
                        
                        @schemas.classproperty
                        def PUBCHEM(cls):
                            return cls("PUBCHEM")
                        
                        @schemas.classproperty
                        def MESH(cls):
                            return cls("MESH")
                        
                        @schemas.classproperty
                        def HMDB(cls):
                            return cls("HMDB")
                        
                        @schemas.classproperty
                        def KNAPSACK(cls):
                            return cls("KNAPSACK")
                        
                        @schemas.classproperty
                        def CHEBI(cls):
                            return cls("CHEBI")
                        
                        @schemas.classproperty
                        def PUBMED(cls):
                            return cls("PUBMED")
                        
                        @schemas.classproperty
                        def BIO(cls):
                            return cls("BIO")
                        
                        @schemas.classproperty
                        def KEGG(cls):
                            return cls("KEGG")
                        
                        @schemas.classproperty
                        def HSDB(cls):
                            return cls("HSDB")
                        
                        @schemas.classproperty
                        def MACONDA(cls):
                            return cls("MACONDA")
                        
                        @schemas.classproperty
                        def METACYC(cls):
                            return cls("METACYC")
                        
                        @schemas.classproperty
                        def GNPS(cls):
                            return cls("GNPS")
                        
                        @schemas.classproperty
                        def ZINCBIO(cls):
                            return cls("ZINCBIO")
                        
                        @schemas.classproperty
                        def TRAIN(cls):
                            return cls("TRAIN")
                        
                        @schemas.classproperty
                        def UNDP(cls):
                            return cls("UNDP")
                        
                        @schemas.classproperty
                        def YMDB(cls):
                            return cls("YMDB")
                        
                        @schemas.classproperty
                        def PLANTCYC(cls):
                            return cls("PLANTCYC")
                        
                        @schemas.classproperty
                        def NORMAN(cls):
                            return cls("NORMAN")
                        
                        @schemas.classproperty
                        def ADDITIONAL(cls):
                            return cls("ADDITIONAL")
                        
                        @schemas.classproperty
                        def SUPERNATURAL(cls):
                            return cls("SUPERNATURAL")
                        
                        @schemas.classproperty
                        def COCONUT(cls):
                            return cls("COCONUT")
                        
                        @schemas.classproperty
                        def PUBCHEMANNOTATIONBIO(cls):
                            return cls("PUBCHEMANNOTATIONBIO")
                        
                        @schemas.classproperty
                        def PUBCHEMANNOTATIONDRUG(cls):
                            return cls("PUBCHEMANNOTATIONDRUG")
                        
                        @schemas.classproperty
                        def PUBCHEMANNOTATIONSAFETYANDTOXIC(cls):
                            return cls("PUBCHEMANNOTATIONSAFETYANDTOXIC")
                        
                        @schemas.classproperty
                        def PUBCHEMANNOTATIONFOOD(cls):
                            return cls("PUBCHEMANNOTATIONFOOD")
                        
                        @schemas.classproperty
                        def LIPID(cls):
                            return cls("LIPID")
                        
                        @schemas.classproperty
                        def KEGGMINE(cls):
                            return cls("KEGGMINE")
                        
                        @schemas.classproperty
                        def ECOCYCMINE(cls):
                            return cls("ECOCYCMINE")
                        
                        @schemas.classproperty
                        def YMDBMINE(cls):
                            return cls("YMDBMINE")
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'structureSearchDBs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            tagLipids = schemas.BoolSchema
            __annotations__ = {
                "enabled": enabled,
                "structureSearchDBs": structureSearchDBs,
                "tagLipids": tagLipids,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["structureSearchDBs"]) -> MetaOapg.properties.structureSearchDBs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagLipids"]) -> MetaOapg.properties.tagLipids: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enabled", "structureSearchDBs", "tagLipids", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["structureSearchDBs"]) -> typing.Union[MetaOapg.properties.structureSearchDBs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagLipids"]) -> typing.Union[MetaOapg.properties.tagLipids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enabled", "structureSearchDBs", "tagLipids", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        structureSearchDBs: typing.Union[MetaOapg.properties.structureSearchDBs, list, tuple, schemas.Unset] = schemas.unset,
        tagLipids: typing.Union[MetaOapg.properties.tagLipids, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StructureDbSearch':
        return super().__new__(
            cls,
            *args,
            enabled=enabled,
            structureSearchDBs=structureSearchDBs,
            tagLipids=tagLipids,
            _configuration=_configuration,
            **kwargs,
        )
