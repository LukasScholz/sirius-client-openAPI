# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class CollisionEnergy(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            minEnergy = schemas.Float64Schema
            maxEnergy = schemas.Float64Schema
            corrected = schemas.BoolSchema
            __annotations__ = {
                "minEnergy": minEnergy,
                "maxEnergy": maxEnergy,
                "corrected": corrected,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minEnergy"]) -> MetaOapg.properties.minEnergy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxEnergy"]) -> MetaOapg.properties.maxEnergy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["corrected"]) -> MetaOapg.properties.corrected: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["minEnergy", "maxEnergy", "corrected", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minEnergy"]) -> typing.Union[MetaOapg.properties.minEnergy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxEnergy"]) -> typing.Union[MetaOapg.properties.maxEnergy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["corrected"]) -> typing.Union[MetaOapg.properties.corrected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["minEnergy", "maxEnergy", "corrected", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        minEnergy: typing.Union[MetaOapg.properties.minEnergy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        maxEnergy: typing.Union[MetaOapg.properties.maxEnergy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        corrected: typing.Union[MetaOapg.properties.corrected, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CollisionEnergy':
        return super().__new__(
            cls,
            *args,
            minEnergy=minEnergy,
            maxEnergy=maxEnergy,
            corrected=corrected,
            _configuration=_configuration,
            **kwargs,
        )
