# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class Sirius(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    User/developer friendly parameter subset for the Formula/SIRIUS tool
    """


    class MetaOapg:
        
        class properties:
            enabled = schemas.BoolSchema
            
            
            class profile(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def QTOF(cls):
                    return cls("QTOF")
                
                @schemas.classproperty
                def ORBI(cls):
                    return cls("ORBI")
                
                @schemas.classproperty
                def FTICR(cls):
                    return cls("FTICR")
            numberOfCandidates = schemas.Int32Schema
            numberOfCandidatesPerIon = schemas.Int32Schema
            massAccuracyMS2ppm = schemas.Float64Schema
            
            
            class isotopeMs2Settings(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def IGNORE(cls):
                    return cls("IGNORE")
                
                @schemas.classproperty
                def FILTER(cls):
                    return cls("FILTER")
                
                @schemas.classproperty
                def SCORE(cls):
                    return cls("SCORE")
            
            
            class formulaSearchDBs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def ALL(cls):
                            return cls("ALL")
                        
                        @schemas.classproperty
                        def ALL_BUT_INSILICO(cls):
                            return cls("ALL_BUT_INSILICO")
                        
                        @schemas.classproperty
                        def PUBCHEM(cls):
                            return cls("PUBCHEM")
                        
                        @schemas.classproperty
                        def MESH(cls):
                            return cls("MESH")
                        
                        @schemas.classproperty
                        def HMDB(cls):
                            return cls("HMDB")
                        
                        @schemas.classproperty
                        def KNAPSACK(cls):
                            return cls("KNAPSACK")
                        
                        @schemas.classproperty
                        def CHEBI(cls):
                            return cls("CHEBI")
                        
                        @schemas.classproperty
                        def PUBMED(cls):
                            return cls("PUBMED")
                        
                        @schemas.classproperty
                        def BIO(cls):
                            return cls("BIO")
                        
                        @schemas.classproperty
                        def KEGG(cls):
                            return cls("KEGG")
                        
                        @schemas.classproperty
                        def HSDB(cls):
                            return cls("HSDB")
                        
                        @schemas.classproperty
                        def MACONDA(cls):
                            return cls("MACONDA")
                        
                        @schemas.classproperty
                        def METACYC(cls):
                            return cls("METACYC")
                        
                        @schemas.classproperty
                        def GNPS(cls):
                            return cls("GNPS")
                        
                        @schemas.classproperty
                        def ZINCBIO(cls):
                            return cls("ZINCBIO")
                        
                        @schemas.classproperty
                        def TRAIN(cls):
                            return cls("TRAIN")
                        
                        @schemas.classproperty
                        def UNDP(cls):
                            return cls("UNDP")
                        
                        @schemas.classproperty
                        def YMDB(cls):
                            return cls("YMDB")
                        
                        @schemas.classproperty
                        def PLANTCYC(cls):
                            return cls("PLANTCYC")
                        
                        @schemas.classproperty
                        def NORMAN(cls):
                            return cls("NORMAN")
                        
                        @schemas.classproperty
                        def ADDITIONAL(cls):
                            return cls("ADDITIONAL")
                        
                        @schemas.classproperty
                        def SUPERNATURAL(cls):
                            return cls("SUPERNATURAL")
                        
                        @schemas.classproperty
                        def COCONUT(cls):
                            return cls("COCONUT")
                        
                        @schemas.classproperty
                        def PUBCHEMANNOTATIONBIO(cls):
                            return cls("PUBCHEMANNOTATIONBIO")
                        
                        @schemas.classproperty
                        def PUBCHEMANNOTATIONDRUG(cls):
                            return cls("PUBCHEMANNOTATIONDRUG")
                        
                        @schemas.classproperty
                        def PUBCHEMANNOTATIONSAFETYANDTOXIC(cls):
                            return cls("PUBCHEMANNOTATIONSAFETYANDTOXIC")
                        
                        @schemas.classproperty
                        def PUBCHEMANNOTATIONFOOD(cls):
                            return cls("PUBCHEMANNOTATIONFOOD")
                        
                        @schemas.classproperty
                        def LIPID(cls):
                            return cls("LIPID")
                        
                        @schemas.classproperty
                        def KEGGMINE(cls):
                            return cls("KEGGMINE")
                        
                        @schemas.classproperty
                        def ECOCYCMINE(cls):
                            return cls("ECOCYCMINE")
                        
                        @schemas.classproperty
                        def YMDBMINE(cls):
                            return cls("YMDBMINE")
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'formulaSearchDBs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            enforcedFormulaConstraints = schemas.StrSchema
            fallbackFormulaConstraints = schemas.StrSchema
            
            
            class detectableElements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'detectableElements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def ilpTimeout() -> typing.Type['Timeout']:
                return Timeout
        
            @staticmethod
            def useHeuristic() -> typing.Type['UseHeuristic']:
                return UseHeuristic
            __annotations__ = {
                "enabled": enabled,
                "profile": profile,
                "numberOfCandidates": numberOfCandidates,
                "numberOfCandidatesPerIon": numberOfCandidatesPerIon,
                "massAccuracyMS2ppm": massAccuracyMS2ppm,
                "isotopeMs2Settings": isotopeMs2Settings,
                "formulaSearchDBs": formulaSearchDBs,
                "enforcedFormulaConstraints": enforcedFormulaConstraints,
                "fallbackFormulaConstraints": fallbackFormulaConstraints,
                "detectableElements": detectableElements,
                "ilpTimeout": ilpTimeout,
                "useHeuristic": useHeuristic,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> MetaOapg.properties.profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfCandidates"]) -> MetaOapg.properties.numberOfCandidates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfCandidatesPerIon"]) -> MetaOapg.properties.numberOfCandidatesPerIon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["massAccuracyMS2ppm"]) -> MetaOapg.properties.massAccuracyMS2ppm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isotopeMs2Settings"]) -> MetaOapg.properties.isotopeMs2Settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formulaSearchDBs"]) -> MetaOapg.properties.formulaSearchDBs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enforcedFormulaConstraints"]) -> MetaOapg.properties.enforcedFormulaConstraints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallbackFormulaConstraints"]) -> MetaOapg.properties.fallbackFormulaConstraints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectableElements"]) -> MetaOapg.properties.detectableElements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ilpTimeout"]) -> 'Timeout': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useHeuristic"]) -> 'UseHeuristic': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enabled", "profile", "numberOfCandidates", "numberOfCandidatesPerIon", "massAccuracyMS2ppm", "isotopeMs2Settings", "formulaSearchDBs", "enforcedFormulaConstraints", "fallbackFormulaConstraints", "detectableElements", "ilpTimeout", "useHeuristic", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> typing.Union[MetaOapg.properties.profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfCandidates"]) -> typing.Union[MetaOapg.properties.numberOfCandidates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfCandidatesPerIon"]) -> typing.Union[MetaOapg.properties.numberOfCandidatesPerIon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["massAccuracyMS2ppm"]) -> typing.Union[MetaOapg.properties.massAccuracyMS2ppm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isotopeMs2Settings"]) -> typing.Union[MetaOapg.properties.isotopeMs2Settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formulaSearchDBs"]) -> typing.Union[MetaOapg.properties.formulaSearchDBs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enforcedFormulaConstraints"]) -> typing.Union[MetaOapg.properties.enforcedFormulaConstraints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallbackFormulaConstraints"]) -> typing.Union[MetaOapg.properties.fallbackFormulaConstraints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectableElements"]) -> typing.Union[MetaOapg.properties.detectableElements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ilpTimeout"]) -> typing.Union['Timeout', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useHeuristic"]) -> typing.Union['UseHeuristic', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enabled", "profile", "numberOfCandidates", "numberOfCandidatesPerIon", "massAccuracyMS2ppm", "isotopeMs2Settings", "formulaSearchDBs", "enforcedFormulaConstraints", "fallbackFormulaConstraints", "detectableElements", "ilpTimeout", "useHeuristic", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        profile: typing.Union[MetaOapg.properties.profile, str, schemas.Unset] = schemas.unset,
        numberOfCandidates: typing.Union[MetaOapg.properties.numberOfCandidates, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        numberOfCandidatesPerIon: typing.Union[MetaOapg.properties.numberOfCandidatesPerIon, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        massAccuracyMS2ppm: typing.Union[MetaOapg.properties.massAccuracyMS2ppm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isotopeMs2Settings: typing.Union[MetaOapg.properties.isotopeMs2Settings, str, schemas.Unset] = schemas.unset,
        formulaSearchDBs: typing.Union[MetaOapg.properties.formulaSearchDBs, list, tuple, schemas.Unset] = schemas.unset,
        enforcedFormulaConstraints: typing.Union[MetaOapg.properties.enforcedFormulaConstraints, str, schemas.Unset] = schemas.unset,
        fallbackFormulaConstraints: typing.Union[MetaOapg.properties.fallbackFormulaConstraints, str, schemas.Unset] = schemas.unset,
        detectableElements: typing.Union[MetaOapg.properties.detectableElements, list, tuple, schemas.Unset] = schemas.unset,
        ilpTimeout: typing.Union['Timeout', schemas.Unset] = schemas.unset,
        useHeuristic: typing.Union['UseHeuristic', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Sirius':
        return super().__new__(
            cls,
            *args,
            enabled=enabled,
            profile=profile,
            numberOfCandidates=numberOfCandidates,
            numberOfCandidatesPerIon=numberOfCandidatesPerIon,
            massAccuracyMS2ppm=massAccuracyMS2ppm,
            isotopeMs2Settings=isotopeMs2Settings,
            formulaSearchDBs=formulaSearchDBs,
            enforcedFormulaConstraints=enforcedFormulaConstraints,
            fallbackFormulaConstraints=fallbackFormulaConstraints,
            detectableElements=detectableElements,
            ilpTimeout=ilpTimeout,
            useHeuristic=useHeuristic,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.timeout import Timeout
from PySirius.model.use_heuristic import UseHeuristic
