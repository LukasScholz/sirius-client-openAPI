# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class CompoundId(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The CompoundId contains the ID of a compound together with some read-only information that might be displayed in
 some summary view.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            index = schemas.Int64Schema
            ionMass = schemas.Float64Schema
            ionType = schemas.StrSchema
            rtStartSeconds = schemas.Float64Schema
            rtEndSeconds = schemas.Float64Schema
        
            @staticmethod
            def topAnnotation() -> typing.Type['CompoundAnnotation']:
                return CompoundAnnotation
        
            @staticmethod
            def msData() -> typing.Type['MsData']:
                return MsData
            computing = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "index": index,
                "ionMass": ionMass,
                "ionType": ionType,
                "rtStartSeconds": rtStartSeconds,
                "rtEndSeconds": rtEndSeconds,
                "topAnnotation": topAnnotation,
                "msData": msData,
                "computing": computing,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["index"]) -> MetaOapg.properties.index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ionMass"]) -> MetaOapg.properties.ionMass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ionType"]) -> MetaOapg.properties.ionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtStartSeconds"]) -> MetaOapg.properties.rtStartSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtEndSeconds"]) -> MetaOapg.properties.rtEndSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topAnnotation"]) -> 'CompoundAnnotation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["msData"]) -> 'MsData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["computing"]) -> MetaOapg.properties.computing: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "index", "ionMass", "ionType", "rtStartSeconds", "rtEndSeconds", "topAnnotation", "msData", "computing", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["index"]) -> typing.Union[MetaOapg.properties.index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ionMass"]) -> typing.Union[MetaOapg.properties.ionMass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ionType"]) -> typing.Union[MetaOapg.properties.ionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtStartSeconds"]) -> typing.Union[MetaOapg.properties.rtStartSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtEndSeconds"]) -> typing.Union[MetaOapg.properties.rtEndSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topAnnotation"]) -> typing.Union['CompoundAnnotation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["msData"]) -> typing.Union['MsData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["computing"]) -> typing.Union[MetaOapg.properties.computing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "index", "ionMass", "ionType", "rtStartSeconds", "rtEndSeconds", "topAnnotation", "msData", "computing", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        index: typing.Union[MetaOapg.properties.index, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ionMass: typing.Union[MetaOapg.properties.ionMass, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ionType: typing.Union[MetaOapg.properties.ionType, str, schemas.Unset] = schemas.unset,
        rtStartSeconds: typing.Union[MetaOapg.properties.rtStartSeconds, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rtEndSeconds: typing.Union[MetaOapg.properties.rtEndSeconds, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        topAnnotation: typing.Union['CompoundAnnotation', schemas.Unset] = schemas.unset,
        msData: typing.Union['MsData', schemas.Unset] = schemas.unset,
        computing: typing.Union[MetaOapg.properties.computing, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompoundId':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            index=index,
            ionMass=ionMass,
            ionType=ionType,
            rtStartSeconds=rtStartSeconds,
            rtEndSeconds=rtEndSeconds,
            topAnnotation=topAnnotation,
            msData=msData,
            computing=computing,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.compound_annotation import CompoundAnnotation
from PySirius.model.ms_data import MsData
