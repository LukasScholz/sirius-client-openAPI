# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class CompoundClasses(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Container class that holds the best matching compound class for different levels of each ontology for a
 certain compound/feature/predicted fingerprint.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def npcPathway() -> typing.Type['CompoundClass']:
                return CompoundClass
        
            @staticmethod
            def npcSuperclass() -> typing.Type['CompoundClass']:
                return CompoundClass
        
            @staticmethod
            def npcClass() -> typing.Type['CompoundClass']:
                return CompoundClass
        
            @staticmethod
            def classyFireMostSpecific() -> typing.Type['CompoundClass']:
                return CompoundClass
        
            @staticmethod
            def classyFireLevel5() -> typing.Type['CompoundClass']:
                return CompoundClass
        
            @staticmethod
            def classyFireClass() -> typing.Type['CompoundClass']:
                return CompoundClass
        
            @staticmethod
            def classyFireSubClass() -> typing.Type['CompoundClass']:
                return CompoundClass
        
            @staticmethod
            def classyFireSuperClass() -> typing.Type['CompoundClass']:
                return CompoundClass
            __annotations__ = {
                "npcPathway": npcPathway,
                "npcSuperclass": npcSuperclass,
                "npcClass": npcClass,
                "classyFireMostSpecific": classyFireMostSpecific,
                "classyFireLevel5": classyFireLevel5,
                "classyFireClass": classyFireClass,
                "classyFireSubClass": classyFireSubClass,
                "classyFireSuperClass": classyFireSuperClass,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["npcPathway"]) -> 'CompoundClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["npcSuperclass"]) -> 'CompoundClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["npcClass"]) -> 'CompoundClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classyFireMostSpecific"]) -> 'CompoundClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classyFireLevel5"]) -> 'CompoundClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classyFireClass"]) -> 'CompoundClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classyFireSubClass"]) -> 'CompoundClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classyFireSuperClass"]) -> 'CompoundClass': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["npcPathway", "npcSuperclass", "npcClass", "classyFireMostSpecific", "classyFireLevel5", "classyFireClass", "classyFireSubClass", "classyFireSuperClass", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["npcPathway"]) -> typing.Union['CompoundClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["npcSuperclass"]) -> typing.Union['CompoundClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["npcClass"]) -> typing.Union['CompoundClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classyFireMostSpecific"]) -> typing.Union['CompoundClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classyFireLevel5"]) -> typing.Union['CompoundClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classyFireClass"]) -> typing.Union['CompoundClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classyFireSubClass"]) -> typing.Union['CompoundClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classyFireSuperClass"]) -> typing.Union['CompoundClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["npcPathway", "npcSuperclass", "npcClass", "classyFireMostSpecific", "classyFireLevel5", "classyFireClass", "classyFireSubClass", "classyFireSuperClass", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        npcPathway: typing.Union['CompoundClass', schemas.Unset] = schemas.unset,
        npcSuperclass: typing.Union['CompoundClass', schemas.Unset] = schemas.unset,
        npcClass: typing.Union['CompoundClass', schemas.Unset] = schemas.unset,
        classyFireMostSpecific: typing.Union['CompoundClass', schemas.Unset] = schemas.unset,
        classyFireLevel5: typing.Union['CompoundClass', schemas.Unset] = schemas.unset,
        classyFireClass: typing.Union['CompoundClass', schemas.Unset] = schemas.unset,
        classyFireSubClass: typing.Union['CompoundClass', schemas.Unset] = schemas.unset,
        classyFireSuperClass: typing.Union['CompoundClass', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompoundClasses':
        return super().__new__(
            cls,
            *args,
            npcPathway=npcPathway,
            npcSuperclass=npcSuperclass,
            npcClass=npcClass,
            classyFireMostSpecific=classyFireMostSpecific,
            classyFireLevel5=classyFireLevel5,
            classyFireClass=classyFireClass,
            classyFireSubClass=classyFireSubClass,
            classyFireSuperClass=classyFireSuperClass,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.compound_class import CompoundClass
