# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class CompoundAnnotation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Summary of the results of a Compound. Can be added to a CompoundId.
 It is not null within a CompoundId if it was not requested und non null otherwise
 The different summary fields within this summary are null if the corresponding
 compound does not contain the represented results. The content of  non NULL
 summary field id the result was computed but is empty.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def formulaAnnotation() -> typing.Type['FormulaCandidate']:
                return FormulaCandidate
        
            @staticmethod
            def structureAnnotation() -> typing.Type['StructureCandidate']:
                return StructureCandidate
        
            @staticmethod
            def compoundClassAnnotation() -> typing.Type['CompoundClasses']:
                return CompoundClasses
            __annotations__ = {
                "formulaAnnotation": formulaAnnotation,
                "structureAnnotation": structureAnnotation,
                "compoundClassAnnotation": compoundClassAnnotation,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formulaAnnotation"]) -> 'FormulaCandidate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["structureAnnotation"]) -> 'StructureCandidate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compoundClassAnnotation"]) -> 'CompoundClasses': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["formulaAnnotation", "structureAnnotation", "compoundClassAnnotation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formulaAnnotation"]) -> typing.Union['FormulaCandidate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["structureAnnotation"]) -> typing.Union['StructureCandidate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compoundClassAnnotation"]) -> typing.Union['CompoundClasses', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["formulaAnnotation", "structureAnnotation", "compoundClassAnnotation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        formulaAnnotation: typing.Union['FormulaCandidate', schemas.Unset] = schemas.unset,
        structureAnnotation: typing.Union['StructureCandidate', schemas.Unset] = schemas.unset,
        compoundClassAnnotation: typing.Union['CompoundClasses', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompoundAnnotation':
        return super().__new__(
            cls,
            *args,
            formulaAnnotation=formulaAnnotation,
            structureAnnotation=structureAnnotation,
            compoundClassAnnotation=compoundClassAnnotation,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.compound_classes import CompoundClasses
from PySirius.model.formula_candidate import FormulaCandidate
from PySirius.model.structure_candidate import StructureCandidate
