# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class AccountInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            userID = schemas.StrSchema
            username = schemas.StrSchema
            userEmail = schemas.StrSchema
            gravatarURL = schemas.StrSchema
            
            
            class subscriptions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Subscription']:
                        return Subscription
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Subscription'], typing.List['Subscription']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscriptions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Subscription':
                    return super().__getitem__(i)
            activeSubscriptionId = schemas.StrSchema
            __annotations__ = {
                "userID": userID,
                "username": username,
                "userEmail": userEmail,
                "gravatarURL": gravatarURL,
                "subscriptions": subscriptions,
                "activeSubscriptionId": activeSubscriptionId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userID"]) -> MetaOapg.properties.userID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userEmail"]) -> MetaOapg.properties.userEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gravatarURL"]) -> MetaOapg.properties.gravatarURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriptions"]) -> MetaOapg.properties.subscriptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeSubscriptionId"]) -> MetaOapg.properties.activeSubscriptionId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userID", "username", "userEmail", "gravatarURL", "subscriptions", "activeSubscriptionId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userID"]) -> typing.Union[MetaOapg.properties.userID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userEmail"]) -> typing.Union[MetaOapg.properties.userEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gravatarURL"]) -> typing.Union[MetaOapg.properties.gravatarURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriptions"]) -> typing.Union[MetaOapg.properties.subscriptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeSubscriptionId"]) -> typing.Union[MetaOapg.properties.activeSubscriptionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userID", "username", "userEmail", "gravatarURL", "subscriptions", "activeSubscriptionId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        userID: typing.Union[MetaOapg.properties.userID, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        userEmail: typing.Union[MetaOapg.properties.userEmail, str, schemas.Unset] = schemas.unset,
        gravatarURL: typing.Union[MetaOapg.properties.gravatarURL, str, schemas.Unset] = schemas.unset,
        subscriptions: typing.Union[MetaOapg.properties.subscriptions, list, tuple, schemas.Unset] = schemas.unset,
        activeSubscriptionId: typing.Union[MetaOapg.properties.activeSubscriptionId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountInfo':
        return super().__new__(
            cls,
            *args,
            userID=userID,
            username=username,
            userEmail=userEmail,
            gravatarURL=gravatarURL,
            subscriptions=subscriptions,
            activeSubscriptionId=activeSubscriptionId,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.subscription import Subscription
