# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class FormulaResultContainer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Container for formula level results that holds a unique identifier (molecular formula + adduct).
 It can be extended/annotated with a list of results that are available for this formula candidate and their scores.
 It can further be extended/annotated with the action formula candidate results.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            molecularFormula = schemas.StrSchema
            adduct = schemas.StrSchema
        
            @staticmethod
            def resultOverview() -> typing.Type['ResultOverview']:
                return ResultOverview
        
            @staticmethod
            def candidate() -> typing.Type['FormulaCandidate']:
                return FormulaCandidate
            __annotations__ = {
                "id": id,
                "molecularFormula": molecularFormula,
                "adduct": adduct,
                "resultOverview": resultOverview,
                "candidate": candidate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["molecularFormula"]) -> MetaOapg.properties.molecularFormula: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adduct"]) -> MetaOapg.properties.adduct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultOverview"]) -> 'ResultOverview': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidate"]) -> 'FormulaCandidate': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "molecularFormula", "adduct", "resultOverview", "candidate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["molecularFormula"]) -> typing.Union[MetaOapg.properties.molecularFormula, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adduct"]) -> typing.Union[MetaOapg.properties.adduct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultOverview"]) -> typing.Union['ResultOverview', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidate"]) -> typing.Union['FormulaCandidate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "molecularFormula", "adduct", "resultOverview", "candidate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        molecularFormula: typing.Union[MetaOapg.properties.molecularFormula, str, schemas.Unset] = schemas.unset,
        adduct: typing.Union[MetaOapg.properties.adduct, str, schemas.Unset] = schemas.unset,
        resultOverview: typing.Union['ResultOverview', schemas.Unset] = schemas.unset,
        candidate: typing.Union['FormulaCandidate', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FormulaResultContainer':
        return super().__new__(
            cls,
            *args,
            id=id,
            molecularFormula=molecularFormula,
            adduct=adduct,
            resultOverview=resultOverview,
            candidate=candidate,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.formula_candidate import FormulaCandidate
from PySirius.model.result_overview import ResultOverview
