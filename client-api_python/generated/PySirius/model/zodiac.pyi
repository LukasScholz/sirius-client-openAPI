# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class Zodiac(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    User/developer friendly parameter subset for the ZODIAC tool (Network base molecular formula re-ranking).
    """


    class MetaOapg:
        
        class properties:
            enabled = schemas.BoolSchema
        
            @staticmethod
            def consideredCandidatesAt300Mz() -> typing.Type['ZodiacNumberOfConsideredCandidatesAt300Mz']:
                return ZodiacNumberOfConsideredCandidatesAt300Mz
        
            @staticmethod
            def consideredCandidatesAt800Mz() -> typing.Type['ZodiacNumberOfConsideredCandidatesAt800Mz']:
                return ZodiacNumberOfConsideredCandidatesAt800Mz
        
            @staticmethod
            def runInTwoSteps() -> typing.Type['ZodiacRunInTwoSteps']:
                return ZodiacRunInTwoSteps
        
            @staticmethod
            def edgeFilterThresholds() -> typing.Type['ZodiacEdgeFilterThresholds']:
                return ZodiacEdgeFilterThresholds
        
            @staticmethod
            def gibbsSamplerParameters() -> typing.Type['ZodiacEpochs']:
                return ZodiacEpochs
            __annotations__ = {
                "enabled": enabled,
                "consideredCandidatesAt300Mz": consideredCandidatesAt300Mz,
                "consideredCandidatesAt800Mz": consideredCandidatesAt800Mz,
                "runInTwoSteps": runInTwoSteps,
                "edgeFilterThresholds": edgeFilterThresholds,
                "gibbsSamplerParameters": gibbsSamplerParameters,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consideredCandidatesAt300Mz"]) -> 'ZodiacNumberOfConsideredCandidatesAt300Mz': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["consideredCandidatesAt800Mz"]) -> 'ZodiacNumberOfConsideredCandidatesAt800Mz': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runInTwoSteps"]) -> 'ZodiacRunInTwoSteps': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edgeFilterThresholds"]) -> 'ZodiacEdgeFilterThresholds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gibbsSamplerParameters"]) -> 'ZodiacEpochs': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enabled", "consideredCandidatesAt300Mz", "consideredCandidatesAt800Mz", "runInTwoSteps", "edgeFilterThresholds", "gibbsSamplerParameters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consideredCandidatesAt300Mz"]) -> typing.Union['ZodiacNumberOfConsideredCandidatesAt300Mz', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["consideredCandidatesAt800Mz"]) -> typing.Union['ZodiacNumberOfConsideredCandidatesAt800Mz', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runInTwoSteps"]) -> typing.Union['ZodiacRunInTwoSteps', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edgeFilterThresholds"]) -> typing.Union['ZodiacEdgeFilterThresholds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gibbsSamplerParameters"]) -> typing.Union['ZodiacEpochs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enabled", "consideredCandidatesAt300Mz", "consideredCandidatesAt800Mz", "runInTwoSteps", "edgeFilterThresholds", "gibbsSamplerParameters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        consideredCandidatesAt300Mz: typing.Union['ZodiacNumberOfConsideredCandidatesAt300Mz', schemas.Unset] = schemas.unset,
        consideredCandidatesAt800Mz: typing.Union['ZodiacNumberOfConsideredCandidatesAt800Mz', schemas.Unset] = schemas.unset,
        runInTwoSteps: typing.Union['ZodiacRunInTwoSteps', schemas.Unset] = schemas.unset,
        edgeFilterThresholds: typing.Union['ZodiacEdgeFilterThresholds', schemas.Unset] = schemas.unset,
        gibbsSamplerParameters: typing.Union['ZodiacEpochs', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Zodiac':
        return super().__new__(
            cls,
            *args,
            enabled=enabled,
            consideredCandidatesAt300Mz=consideredCandidatesAt300Mz,
            consideredCandidatesAt800Mz=consideredCandidatesAt800Mz,
            runInTwoSteps=runInTwoSteps,
            edgeFilterThresholds=edgeFilterThresholds,
            gibbsSamplerParameters=gibbsSamplerParameters,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.zodiac_edge_filter_thresholds import ZodiacEdgeFilterThresholds
from PySirius.model.zodiac_epochs import ZodiacEpochs
from PySirius.model.zodiac_number_of_considered_candidates_at300_mz import ZodiacNumberOfConsideredCandidatesAt300Mz
from PySirius.model.zodiac_number_of_considered_candidates_at800_mz import ZodiacNumberOfConsideredCandidatesAt800Mz
from PySirius.model.zodiac_run_in_two_steps import ZodiacRunInTwoSteps
