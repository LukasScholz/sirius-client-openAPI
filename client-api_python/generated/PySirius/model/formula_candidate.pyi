# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class FormulaCandidate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            siriusScore = schemas.Float64Schema
            isotopeScore = schemas.Float64Schema
            treeScore = schemas.Float64Schema
            zodiacScore = schemas.Float64Schema
            molecularFormula = schemas.StrSchema
            adduct = schemas.StrSchema
            numOfexplainedPeaks = schemas.Int32Schema
            numOfexplainablePeaks = schemas.Int32Schema
            totalExplainedIntensity = schemas.Float64Schema
        
            @staticmethod
            def medianMassDeviation() -> typing.Type['Deviation']:
                return Deviation
            __annotations__ = {
                "siriusScore": siriusScore,
                "isotopeScore": isotopeScore,
                "treeScore": treeScore,
                "zodiacScore": zodiacScore,
                "molecularFormula": molecularFormula,
                "adduct": adduct,
                "numOfexplainedPeaks": numOfexplainedPeaks,
                "numOfexplainablePeaks": numOfexplainablePeaks,
                "totalExplainedIntensity": totalExplainedIntensity,
                "medianMassDeviation": medianMassDeviation,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siriusScore"]) -> MetaOapg.properties.siriusScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isotopeScore"]) -> MetaOapg.properties.isotopeScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["treeScore"]) -> MetaOapg.properties.treeScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zodiacScore"]) -> MetaOapg.properties.zodiacScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["molecularFormula"]) -> MetaOapg.properties.molecularFormula: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adduct"]) -> MetaOapg.properties.adduct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numOfexplainedPeaks"]) -> MetaOapg.properties.numOfexplainedPeaks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numOfexplainablePeaks"]) -> MetaOapg.properties.numOfexplainablePeaks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalExplainedIntensity"]) -> MetaOapg.properties.totalExplainedIntensity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medianMassDeviation"]) -> 'Deviation': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["siriusScore", "isotopeScore", "treeScore", "zodiacScore", "molecularFormula", "adduct", "numOfexplainedPeaks", "numOfexplainablePeaks", "totalExplainedIntensity", "medianMassDeviation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siriusScore"]) -> typing.Union[MetaOapg.properties.siriusScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isotopeScore"]) -> typing.Union[MetaOapg.properties.isotopeScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["treeScore"]) -> typing.Union[MetaOapg.properties.treeScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zodiacScore"]) -> typing.Union[MetaOapg.properties.zodiacScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["molecularFormula"]) -> typing.Union[MetaOapg.properties.molecularFormula, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adduct"]) -> typing.Union[MetaOapg.properties.adduct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numOfexplainedPeaks"]) -> typing.Union[MetaOapg.properties.numOfexplainedPeaks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numOfexplainablePeaks"]) -> typing.Union[MetaOapg.properties.numOfexplainablePeaks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalExplainedIntensity"]) -> typing.Union[MetaOapg.properties.totalExplainedIntensity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medianMassDeviation"]) -> typing.Union['Deviation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["siriusScore", "isotopeScore", "treeScore", "zodiacScore", "molecularFormula", "adduct", "numOfexplainedPeaks", "numOfexplainablePeaks", "totalExplainedIntensity", "medianMassDeviation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        siriusScore: typing.Union[MetaOapg.properties.siriusScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isotopeScore: typing.Union[MetaOapg.properties.isotopeScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        treeScore: typing.Union[MetaOapg.properties.treeScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        zodiacScore: typing.Union[MetaOapg.properties.zodiacScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        molecularFormula: typing.Union[MetaOapg.properties.molecularFormula, str, schemas.Unset] = schemas.unset,
        adduct: typing.Union[MetaOapg.properties.adduct, str, schemas.Unset] = schemas.unset,
        numOfexplainedPeaks: typing.Union[MetaOapg.properties.numOfexplainedPeaks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        numOfexplainablePeaks: typing.Union[MetaOapg.properties.numOfexplainablePeaks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalExplainedIntensity: typing.Union[MetaOapg.properties.totalExplainedIntensity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        medianMassDeviation: typing.Union['Deviation', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FormulaCandidate':
        return super().__new__(
            cls,
            *args,
            siriusScore=siriusScore,
            isotopeScore=isotopeScore,
            treeScore=treeScore,
            zodiacScore=zodiacScore,
            molecularFormula=molecularFormula,
            adduct=adduct,
            numOfexplainedPeaks=numOfexplainedPeaks,
            numOfexplainablePeaks=numOfexplainablePeaks,
            totalExplainedIntensity=totalExplainedIntensity,
            medianMassDeviation=medianMassDeviation,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.deviation import Deviation
