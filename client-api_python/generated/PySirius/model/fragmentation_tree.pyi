# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class FragmentationTree(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class fragments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FragmentNode']:
                        return FragmentNode
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['FragmentNode'], typing.List['FragmentNode']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fragments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FragmentNode':
                    return super().__getitem__(i)
            
            
            class losses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LossEdge']:
                        return LossEdge
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LossEdge'], typing.List['LossEdge']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'losses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LossEdge':
                    return super().__getitem__(i)
            treeScore = schemas.Float64Schema
        
            @staticmethod
            def root() -> typing.Type['FragmentNode']:
                return FragmentNode
            __annotations__ = {
                "fragments": fragments,
                "losses": losses,
                "treeScore": treeScore,
                "root": root,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fragments"]) -> MetaOapg.properties.fragments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["losses"]) -> MetaOapg.properties.losses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["treeScore"]) -> MetaOapg.properties.treeScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["root"]) -> 'FragmentNode': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fragments", "losses", "treeScore", "root", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fragments"]) -> typing.Union[MetaOapg.properties.fragments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["losses"]) -> typing.Union[MetaOapg.properties.losses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["treeScore"]) -> typing.Union[MetaOapg.properties.treeScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["root"]) -> typing.Union['FragmentNode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fragments", "losses", "treeScore", "root", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fragments: typing.Union[MetaOapg.properties.fragments, list, tuple, schemas.Unset] = schemas.unset,
        losses: typing.Union[MetaOapg.properties.losses, list, tuple, schemas.Unset] = schemas.unset,
        treeScore: typing.Union[MetaOapg.properties.treeScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        root: typing.Union['FragmentNode', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FragmentationTree':
        return super().__new__(
            cls,
            *args,
            fragments=fragments,
            losses=losses,
            treeScore=treeScore,
            root=root,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.fragment_node import FragmentNode
from PySirius.model.loss_edge import LossEdge
