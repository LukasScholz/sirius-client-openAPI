# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from PySirius import schemas  # noqa: F401


class AnnotatedSpectrum(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            msLevel = schemas.Int32Schema
        
            @staticmethod
            def collisionEnergy() -> typing.Type['CollisionEnergy']:
                return CollisionEnergy
            
            
            class peaks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AnnotatedPeak']:
                        return AnnotatedPeak
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AnnotatedPeak'], typing.List['AnnotatedPeak']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'peaks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AnnotatedPeak':
                    return super().__getitem__(i)
            __annotations__ = {
                "msLevel": msLevel,
                "collisionEnergy": collisionEnergy,
                "peaks": peaks,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["msLevel"]) -> MetaOapg.properties.msLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collisionEnergy"]) -> 'CollisionEnergy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["peaks"]) -> MetaOapg.properties.peaks: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["msLevel", "collisionEnergy", "peaks", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["msLevel"]) -> typing.Union[MetaOapg.properties.msLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collisionEnergy"]) -> typing.Union['CollisionEnergy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["peaks"]) -> typing.Union[MetaOapg.properties.peaks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["msLevel", "collisionEnergy", "peaks", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        msLevel: typing.Union[MetaOapg.properties.msLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        collisionEnergy: typing.Union['CollisionEnergy', schemas.Unset] = schemas.unset,
        peaks: typing.Union[MetaOapg.properties.peaks, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnnotatedSpectrum':
        return super().__new__(
            cls,
            *args,
            msLevel=msLevel,
            collisionEnergy=collisionEnergy,
            peaks=peaks,
            _configuration=_configuration,
            **kwargs,
        )

from PySirius.model.annotated_peak import AnnotatedPeak
from PySirius.model.collision_energy import CollisionEnergy
