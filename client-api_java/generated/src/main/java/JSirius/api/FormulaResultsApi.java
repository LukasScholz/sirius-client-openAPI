/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package JSirius.api;

import JSirius.ApiCallback;
import JSirius.ApiClient;
import JSirius.ApiException;
import JSirius.ApiResponse;
import JSirius.Configuration;
import JSirius.Pair;
import JSirius.ProgressRequestBody;
import JSirius.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import JSirius.model.AnnotatedSpectrum;
import JSirius.model.CanopusPredictions;
import JSirius.model.CompoundClasses;
import JSirius.model.FormulaResultContainer;
import JSirius.model.FragmentationTree;
import JSirius.model.StructureCandidate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FormulaResultsApi {
    private ApiClient apiClient;

    public FormulaResultsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FormulaResultsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getBestMatchingCanopusPredictions
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBestMatchingCanopusPredictionsCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/best-canopus-predictions"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "compoundId" + "\\}", apiClient.escapeString(compoundId.toString()))
            .replaceAll("\\{" + "formulaId" + "\\}", apiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBestMatchingCanopusPredictionsValidateBeforeCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getBestMatchingCanopusPredictions(Async)");
        }
        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getBestMatchingCanopusPredictions(Async)");
        }
        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getBestMatchingCanopusPredictions(Async)");
        }
        
        com.squareup.okhttp.Call call = getBestMatchingCanopusPredictionsCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return CompoundClasses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompoundClasses getBestMatchingCanopusPredictions(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<CompoundClasses> resp = getBestMatchingCanopusPredictionsWithHttpInfo(projectId, compoundId, formulaId);
        return resp.getData();
    }

    /**
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;CompoundClasses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompoundClasses> getBestMatchingCanopusPredictionsWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        com.squareup.okhttp.Call call = getBestMatchingCanopusPredictionsValidateBeforeCall(projectId, compoundId, formulaId, null, null);
        Type localVarReturnType = new TypeToken<CompoundClasses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology, (asynchronously)
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBestMatchingCanopusPredictionsAsync(String projectId, String compoundId, String formulaId, final ApiCallback<CompoundClasses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBestMatchingCanopusPredictionsValidateBeforeCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompoundClasses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCanopusPredictions
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCanopusPredictionsCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/canopus-predictions"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "compoundId" + "\\}", apiClient.escapeString(compoundId.toString()))
            .replaceAll("\\{" + "formulaId" + "\\}", apiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCanopusPredictionsValidateBeforeCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCanopusPredictions(Async)");
        }
        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getCanopusPredictions(Async)");
        }
        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getCanopusPredictions(Async)");
        }
        
        com.squareup.okhttp.Call call = getCanopusPredictionsCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return CanopusPredictions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CanopusPredictions getCanopusPredictions(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<CanopusPredictions> resp = getCanopusPredictionsWithHttpInfo(projectId, compoundId, formulaId);
        return resp.getData();
    }

    /**
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;CanopusPredictions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CanopusPredictions> getCanopusPredictionsWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        com.squareup.okhttp.Call call = getCanopusPredictionsValidateBeforeCall(projectId, compoundId, formulaId, null, null);
        Type localVarReturnType = new TypeToken<CanopusPredictions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities, (asynchronously)
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCanopusPredictionsAsync(String projectId, String compoundId, String formulaId, final ApiCallback<CanopusPredictions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCanopusPredictionsValidateBeforeCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CanopusPredictions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFingerprintPrediction
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFingerprintPredictionCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/fingerprint"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "compoundId" + "\\}", apiClient.escapeString(compoundId.toString()))
            .replaceAll("\\{" + "formulaId" + "\\}", apiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFingerprintPredictionValidateBeforeCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFingerprintPrediction(Async)");
        }
        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getFingerprintPrediction(Async)");
        }
        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getFingerprintPrediction(Async)");
        }
        
        com.squareup.okhttp.Call call = getFingerprintPredictionCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return List&lt;Double&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Double> getFingerprintPrediction(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<List<Double>> resp = getFingerprintPredictionWithHttpInfo(projectId, compoundId, formulaId);
        return resp.getData();
    }

    /**
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;List&lt;Double&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Double>> getFingerprintPredictionWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        com.squareup.okhttp.Call call = getFingerprintPredictionValidateBeforeCall(projectId, compoundId, formulaId, null, null);
        Type localVarReturnType = new TypeToken<List<Double>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes. (asynchronously)
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFingerprintPredictionAsync(String projectId, String compoundId, String formulaId, final ApiCallback<List<Double>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFingerprintPredictionValidateBeforeCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Double>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFormulaIds
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainers (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainers (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormulaIdsCall(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "compoundId" + "\\}", apiClient.escapeString(compoundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (resultOverview != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resultOverview", resultOverview));
        if (formulaCandidate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("formulaCandidate", formulaCandidate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormulaIdsValidateBeforeCall(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFormulaIds(Async)");
        }
        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getFormulaIds(Async)");
        }
        
        com.squareup.okhttp.Call call = getFormulaIdsCall(projectId, compoundId, resultOverview, formulaCandidate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List of all FormulaResultContainers available for this compound/feature with minimal information.
     * List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainers (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainers (optional, default to false)
     * @return List&lt;FormulaResultContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FormulaResultContainer> getFormulaIds(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate) throws ApiException {
        ApiResponse<List<FormulaResultContainer>> resp = getFormulaIdsWithHttpInfo(projectId, compoundId, resultOverview, formulaCandidate);
        return resp.getData();
    }

    /**
     * List of all FormulaResultContainers available for this compound/feature with minimal information.
     * List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainers (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainers (optional, default to false)
     * @return ApiResponse&lt;List&lt;FormulaResultContainer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FormulaResultContainer>> getFormulaIdsWithHttpInfo(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate) throws ApiException {
        com.squareup.okhttp.Call call = getFormulaIdsValidateBeforeCall(projectId, compoundId, resultOverview, formulaCandidate, null, null);
        Type localVarReturnType = new TypeToken<List<FormulaResultContainer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of all FormulaResultContainers available for this compound/feature with minimal information. (asynchronously)
     * List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainers (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainers (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormulaIdsAsync(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate, final ApiCallback<List<FormulaResultContainer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormulaIdsValidateBeforeCall(projectId, compoundId, resultOverview, formulaCandidate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FormulaResultContainer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFormulaResult
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainer (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainer (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormulaResultCall(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "compoundId" + "\\}", apiClient.escapeString(compoundId.toString()))
            .replaceAll("\\{" + "formulaId" + "\\}", apiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (resultOverview != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resultOverview", resultOverview));
        if (formulaCandidate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("formulaCandidate", formulaCandidate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormulaResultValidateBeforeCall(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFormulaResult(Async)");
        }
        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getFormulaResult(Async)");
        }
        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getFormulaResult(Async)");
        }
        
        com.squareup.okhttp.Call call = getFormulaResultCall(projectId, compoundId, formulaId, resultOverview, formulaCandidate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.
     * FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainer (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainer (optional, default to true)
     * @return FormulaResultContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormulaResultContainer getFormulaResult(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate) throws ApiException {
        ApiResponse<FormulaResultContainer> resp = getFormulaResultWithHttpInfo(projectId, compoundId, formulaId, resultOverview, formulaCandidate);
        return resp.getData();
    }

    /**
     * FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.
     * FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainer (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainer (optional, default to true)
     * @return ApiResponse&lt;FormulaResultContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormulaResultContainer> getFormulaResultWithHttpInfo(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate) throws ApiException {
        com.squareup.okhttp.Call call = getFormulaResultValidateBeforeCall(projectId, compoundId, formulaId, resultOverview, formulaCandidate, null, null);
        Type localVarReturnType = new TypeToken<FormulaResultContainer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information. (asynchronously)
     * FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainer (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainer (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormulaResultAsync(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate, final ApiCallback<FormulaResultContainer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormulaResultValidateBeforeCall(projectId, compoundId, formulaId, resultOverview, formulaCandidate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FormulaResultContainer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFragTree
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFragTreeCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/tree"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "compoundId" + "\\}", apiClient.escapeString(compoundId.toString()))
            .replaceAll("\\{" + "formulaId" + "\\}", apiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFragTreeValidateBeforeCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFragTree(Async)");
        }
        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getFragTree(Async)");
        }
        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getFragTree(Async)");
        }
        
        com.squareup.okhttp.Call call = getFragTreeCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return FragmentationTree
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FragmentationTree getFragTree(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<FragmentationTree> resp = getFragTreeWithHttpInfo(projectId, compoundId, formulaId);
        return resp.getData();
    }

    /**
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;FragmentationTree&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FragmentationTree> getFragTreeWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        com.squareup.okhttp.Call call = getFragTreeValidateBeforeCall(projectId, compoundId, formulaId, null, null);
        Type localVarReturnType = new TypeToken<FragmentationTree>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore). (asynchronously)
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFragTreeAsync(String projectId, String compoundId, String formulaId, final ApiCallback<FragmentationTree> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFragTreeValidateBeforeCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FragmentationTree>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSimulatedIsotopePattern
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSimulatedIsotopePatternCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/isotope-pattern"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "compoundId" + "\\}", apiClient.escapeString(compoundId.toString()))
            .replaceAll("\\{" + "formulaId" + "\\}", apiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSimulatedIsotopePatternValidateBeforeCall(String projectId, String compoundId, String formulaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getSimulatedIsotopePattern(Async)");
        }
        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getSimulatedIsotopePattern(Async)");
        }
        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getSimulatedIsotopePattern(Async)");
        }
        
        com.squareup.okhttp.Call call = getSimulatedIsotopePatternCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return AnnotatedSpectrum
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnnotatedSpectrum getSimulatedIsotopePattern(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<AnnotatedSpectrum> resp = getSimulatedIsotopePatternWithHttpInfo(projectId, compoundId, formulaId);
        return resp.getData();
    }

    /**
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;AnnotatedSpectrum&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnnotatedSpectrum> getSimulatedIsotopePatternWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        com.squareup.okhttp.Call call = getSimulatedIsotopePatternValidateBeforeCall(projectId, compoundId, formulaId, null, null);
        Type localVarReturnType = new TypeToken<AnnotatedSpectrum>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier. (asynchronously)
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSimulatedIsotopePatternAsync(String projectId, String compoundId, String formulaId, final ApiCallback<AnnotatedSpectrum> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSimulatedIsotopePatternValidateBeforeCall(projectId, compoundId, formulaId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnotatedSpectrum>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStructureCandidates
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param topK retrieve only the top k StructureCandidates (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStructureCandidatesCall(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/structures"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "compoundId" + "\\}", apiClient.escapeString(compoundId.toString()))
            .replaceAll("\\{" + "formulaId" + "\\}", apiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fingerprint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fingerprint", fingerprint));
        if (dbLinks != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dbLinks", dbLinks));
        if (pubMedIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pubMedIds", pubMedIds));
        if (topK != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("topK", topK));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStructureCandidatesValidateBeforeCall(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStructureCandidates(Async)");
        }
        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getStructureCandidates(Async)");
        }
        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getStructureCandidates(Async)");
        }
        
        com.squareup.okhttp.Call call = getStructureCandidatesCall(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.
     * List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param topK retrieve only the top k StructureCandidates (optional, default to -1)
     * @return List&lt;StructureCandidate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StructureCandidate> getStructureCandidates(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK) throws ApiException {
        ApiResponse<List<StructureCandidate>> resp = getStructureCandidatesWithHttpInfo(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK);
        return resp.getData();
    }

    /**
     * List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.
     * List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param topK retrieve only the top k StructureCandidates (optional, default to -1)
     * @return ApiResponse&lt;List&lt;StructureCandidate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StructureCandidate>> getStructureCandidatesWithHttpInfo(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK) throws ApiException {
        com.squareup.okhttp.Call call = getStructureCandidatesValidateBeforeCall(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK, null, null);
        Type localVarReturnType = new TypeToken<List<StructureCandidate>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information. (asynchronously)
     * List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param topK retrieve only the top k StructureCandidates (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStructureCandidatesAsync(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK, final ApiCallback<List<StructureCandidate>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStructureCandidatesValidateBeforeCall(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StructureCandidate>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTopStructureCandidate
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTopStructureCandidateCall(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/top-structure"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "compoundId" + "\\}", apiClient.escapeString(compoundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fingerprint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fingerprint", fingerprint));
        if (dbLinks != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dbLinks", dbLinks));
        if (pubMedIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pubMedIds", pubMedIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopStructureCandidateValidateBeforeCall(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTopStructureCandidate(Async)");
        }
        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getTopStructureCandidate(Async)");
        }
        
        com.squareup.okhttp.Call call = getTopStructureCandidateCall(projectId, compoundId, fingerprint, dbLinks, pubMedIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @return StructureCandidate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StructureCandidate getTopStructureCandidate(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds) throws ApiException {
        ApiResponse<StructureCandidate> resp = getTopStructureCandidateWithHttpInfo(projectId, compoundId, fingerprint, dbLinks, pubMedIds);
        return resp.getData();
    }

    /**
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @return ApiResponse&lt;StructureCandidate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StructureCandidate> getTopStructureCandidateWithHttpInfo(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds) throws ApiException {
        com.squareup.okhttp.Call call = getTopStructureCandidateValidateBeforeCall(projectId, compoundId, fingerprint, dbLinks, pubMedIds, null, null);
        Type localVarReturnType = new TypeToken<StructureCandidate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId). (asynchronously)
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopStructureCandidateAsync(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, final ApiCallback<StructureCandidate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopStructureCandidateValidateBeforeCall(projectId, compoundId, fingerprint, dbLinks, pubMedIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StructureCandidate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
