/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ProjectSpaceId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectSpacesApi {
    private ApiClient apiClient;

    public ProjectSpacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectSpacesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for closeProjectSpace
     * @param projectId unique name/identifier of the  project-space to be closed. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closeProjectSpaceCall(String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call closeProjectSpaceValidateBeforeCall(String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling closeProjectSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = closeProjectSpaceCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Close project-space and remove it from application.
     * Close project-space and remove it from application. Project-space will NOT be deleted from disk.
     * @param projectId unique name/identifier of the  project-space to be closed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void closeProjectSpace(String projectId) throws ApiException {
        closeProjectSpaceWithHttpInfo(projectId);
    }

    /**
     * Close project-space and remove it from application.
     * Close project-space and remove it from application. Project-space will NOT be deleted from disk.
     * @param projectId unique name/identifier of the  project-space to be closed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> closeProjectSpaceWithHttpInfo(String projectId) throws ApiException {
        com.squareup.okhttp.Call call = closeProjectSpaceValidateBeforeCall(projectId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Close project-space and remove it from application. (asynchronously)
     * Close project-space and remove it from application. Project-space will NOT be deleted from disk.
     * @param projectId unique name/identifier of the  project-space to be closed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closeProjectSpaceAsync(String projectId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closeProjectSpaceValidateBeforeCall(projectId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createProjectSpace
     * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
     * @param pathToProject  (required)
     * @param pathToSourceProject  (optional)
     * @param awaitImport  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProjectSpaceCall(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pathToProject != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pathToProject", pathToProject));
        if (pathToSourceProject != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pathToSourceProject", pathToSourceProject));
        if (awaitImport != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("awaitImport", awaitImport));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProjectSpaceValidateBeforeCall(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createProjectSpace(Async)");
        }
        // verify the required parameter 'pathToProject' is set
        if (pathToProject == null) {
            throw new ApiException("Missing the required parameter 'pathToProject' when calling createProjectSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = createProjectSpaceCall(projectId, pathToProject, pathToSourceProject, awaitImport, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
     * @param pathToProject  (required)
     * @param pathToSourceProject  (optional)
     * @param awaitImport  (optional, default to true)
     * @return ProjectSpaceId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectSpaceId createProjectSpace(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport) throws ApiException {
        ApiResponse<ProjectSpaceId> resp = createProjectSpaceWithHttpInfo(projectId, pathToProject, pathToSourceProject, awaitImport);
        return resp.getData();
    }

    /**
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
     * @param pathToProject  (required)
     * @param pathToSourceProject  (optional)
     * @param awaitImport  (optional, default to true)
     * @return ApiResponse&lt;ProjectSpaceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectSpaceId> createProjectSpaceWithHttpInfo(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport) throws ApiException {
        com.squareup.okhttp.Call call = createProjectSpaceValidateBeforeCall(projectId, pathToProject, pathToSourceProject, awaitImport, null, null);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create and open a new project-space at given location and make it accessible via the given projectId. (asynchronously)
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
     * @param pathToProject  (required)
     * @param pathToSourceProject  (optional)
     * @param awaitImport  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProjectSpaceAsync(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport, final ApiCallback<ProjectSpaceId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProjectSpaceValidateBeforeCall(projectId, pathToProject, pathToSourceProject, awaitImport, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectSpace
     * @param projectId unique name/identifier tof the project-space to be accessed. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectSpaceCall(String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectSpaceValidateBeforeCall(String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = getProjectSpaceCall(projectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get project space info by its projectId.
     * Get project space info by its projectId.
     * @param projectId unique name/identifier tof the project-space to be accessed. (required)
     * @return ProjectSpaceId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectSpaceId getProjectSpace(String projectId) throws ApiException {
        ApiResponse<ProjectSpaceId> resp = getProjectSpaceWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get project space info by its projectId.
     * Get project space info by its projectId.
     * @param projectId unique name/identifier tof the project-space to be accessed. (required)
     * @return ApiResponse&lt;ProjectSpaceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectSpaceId> getProjectSpaceWithHttpInfo(String projectId) throws ApiException {
        com.squareup.okhttp.Call call = getProjectSpaceValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get project space info by its projectId. (asynchronously)
     * Get project space info by its projectId.
     * @param projectId unique name/identifier tof the project-space to be accessed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectSpaceAsync(String projectId, final ApiCallback<ProjectSpaceId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectSpaceValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectSpaces
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectSpacesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectSpacesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getProjectSpacesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all opened project spaces.
     * List all opened project spaces.
     * @return List&lt;ProjectSpaceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectSpaceId> getProjectSpaces() throws ApiException {
        ApiResponse<List<ProjectSpaceId>> resp = getProjectSpacesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all opened project spaces.
     * List all opened project spaces.
     * @return ApiResponse&lt;List&lt;ProjectSpaceId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectSpaceId>> getProjectSpacesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getProjectSpacesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ProjectSpaceId>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all opened project spaces. (asynchronously)
     * List all opened project spaces.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectSpacesAsync(final ApiCallback<List<ProjectSpaceId>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectSpacesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectSpaceId>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openProjectSpace
     * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
     * @param pathToProject  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openProjectSpaceCall(String projectId, String pathToProject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pathToProject != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pathToProject", pathToProject));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openProjectSpaceValidateBeforeCall(String projectId, String pathToProject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling openProjectSpace(Async)");
        }
        // verify the required parameter 'pathToProject' is set
        if (pathToProject == null) {
            throw new ApiException("Missing the required parameter 'pathToProject' when calling openProjectSpace(Async)");
        }
        
        com.squareup.okhttp.Call call = openProjectSpaceCall(projectId, pathToProject, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Open an existing project-space and make it accessible via the given projectId.
     * Open an existing project-space and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
     * @param pathToProject  (required)
     * @return ProjectSpaceId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectSpaceId openProjectSpace(String projectId, String pathToProject) throws ApiException {
        ApiResponse<ProjectSpaceId> resp = openProjectSpaceWithHttpInfo(projectId, pathToProject);
        return resp.getData();
    }

    /**
     * Open an existing project-space and make it accessible via the given projectId.
     * Open an existing project-space and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
     * @param pathToProject  (required)
     * @return ApiResponse&lt;ProjectSpaceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectSpaceId> openProjectSpaceWithHttpInfo(String projectId, String pathToProject) throws ApiException {
        com.squareup.okhttp.Call call = openProjectSpaceValidateBeforeCall(projectId, pathToProject, null, null);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Open an existing project-space and make it accessible via the given projectId. (asynchronously)
     * Open an existing project-space and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
     * @param pathToProject  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openProjectSpaceAsync(String projectId, String pathToProject, final ApiCallback<ProjectSpaceId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openProjectSpaceValidateBeforeCall(projectId, pathToProject, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
