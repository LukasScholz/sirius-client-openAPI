/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CompoundId;
import io.swagger.client.model.JobId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompoundsApi {
    private ApiClient apiClient;

    public CompoundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompoundsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteCompound
     * @param projectId project-space to delete from. (required)
     * @param cid identifier of compound to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCompoundCall(String projectId, String cid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{cid}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "cid" + "\\}", apiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCompoundValidateBeforeCall(String projectId, String cid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteCompound(Async)");
        }
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling deleteCompound(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteCompoundCall(projectId, cid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete compound/feature with the given identifier from the specified project-space.
     * Delete compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to delete from. (required)
     * @param cid identifier of compound to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCompound(String projectId, String cid) throws ApiException {
        deleteCompoundWithHttpInfo(projectId, cid);
    }

    /**
     * Delete compound/feature with the given identifier from the specified project-space.
     * Delete compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to delete from. (required)
     * @param cid identifier of compound to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCompoundWithHttpInfo(String projectId, String cid) throws ApiException {
        com.squareup.okhttp.Call call = deleteCompoundValidateBeforeCall(projectId, cid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete compound/feature with the given identifier from the specified project-space. (asynchronously)
     * Delete compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to delete from. (required)
     * @param cid identifier of compound to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCompoundAsync(String projectId, String cid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCompoundValidateBeforeCall(projectId, cid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCompound
     * @param projectId project-space to read from. (required)
     * @param cid identifier of compound to access. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCompoundCall(String projectId, String cid, Boolean topAnnotation, Boolean msData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{cid}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "cid" + "\\}", apiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (topAnnotation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("topAnnotation", topAnnotation));
        if (msData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("msData", msData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompoundValidateBeforeCall(String projectId, String cid, Boolean topAnnotation, Boolean msData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCompound(Async)");
        }
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling getCompound(Async)");
        }
        
        com.squareup.okhttp.Call call = getCompoundCall(projectId, cid, topAnnotation, msData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get compound/feature with the given identifier from the specified project-space.
     * Get compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to read from. (required)
     * @param cid identifier of compound to access. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @return CompoundId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompoundId getCompound(String projectId, String cid, Boolean topAnnotation, Boolean msData) throws ApiException {
        ApiResponse<CompoundId> resp = getCompoundWithHttpInfo(projectId, cid, topAnnotation, msData);
        return resp.getData();
    }

    /**
     * Get compound/feature with the given identifier from the specified project-space.
     * Get compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to read from. (required)
     * @param cid identifier of compound to access. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @return ApiResponse&lt;CompoundId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompoundId> getCompoundWithHttpInfo(String projectId, String cid, Boolean topAnnotation, Boolean msData) throws ApiException {
        com.squareup.okhttp.Call call = getCompoundValidateBeforeCall(projectId, cid, topAnnotation, msData, null, null);
        Type localVarReturnType = new TypeToken<CompoundId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get compound/feature with the given identifier from the specified project-space. (asynchronously)
     * Get compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to read from. (required)
     * @param cid identifier of compound to access. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompoundAsync(String projectId, String cid, Boolean topAnnotation, Boolean msData, final ApiCallback<CompoundId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompoundValidateBeforeCall(projectId, cid, topAnnotation, msData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompoundId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCompounds
     * @param projectId project-space to read from. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCompoundsCall(String projectId, Boolean topAnnotation, Boolean msData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (topAnnotation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("topAnnotation", topAnnotation));
        if (msData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("msData", msData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompoundsValidateBeforeCall(String projectId, Boolean topAnnotation, Boolean msData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCompounds(Async)");
        }
        
        com.squareup.okhttp.Call call = getCompoundsCall(projectId, topAnnotation, msData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all available compounds/features in the given project-space.
     * Get all available compounds/features in the given project-space.
     * @param projectId project-space to read from. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @return List&lt;CompoundId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CompoundId> getCompounds(String projectId, Boolean topAnnotation, Boolean msData) throws ApiException {
        ApiResponse<List<CompoundId>> resp = getCompoundsWithHttpInfo(projectId, topAnnotation, msData);
        return resp.getData();
    }

    /**
     * Get all available compounds/features in the given project-space.
     * Get all available compounds/features in the given project-space.
     * @param projectId project-space to read from. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @return ApiResponse&lt;List&lt;CompoundId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CompoundId>> getCompoundsWithHttpInfo(String projectId, Boolean topAnnotation, Boolean msData) throws ApiException {
        com.squareup.okhttp.Call call = getCompoundsValidateBeforeCall(projectId, topAnnotation, msData, null, null);
        Type localVarReturnType = new TypeToken<List<CompoundId>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all available compounds/features in the given project-space. (asynchronously)
     * Get all available compounds/features in the given project-space.
     * @param projectId project-space to read from. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompoundsAsync(String projectId, Boolean topAnnotation, Boolean msData, final ApiCallback<List<CompoundId>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompoundsValidateBeforeCall(projectId, topAnnotation, msData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CompoundId>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importCompounds
     * @param body List of file and directory paths to import (required)
     * @param projectId project-space to import into. (required)
     * @param alignLCMSRuns If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)
     * @param allowMs1OnlyData  (optional, default to true)
     * @param ignoreFormulas  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importCompoundsCall(List<String> body, String projectId, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (alignLCMSRuns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alignLCMSRuns", alignLCMSRuns));
        if (allowMs1OnlyData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allowMs1OnlyData", allowMs1OnlyData));
        if (ignoreFormulas != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignoreFormulas", ignoreFormulas));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importCompoundsValidateBeforeCall(List<String> body, String projectId, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling importCompounds(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling importCompounds(Async)");
        }
        
        com.squareup.okhttp.Call call = importCompoundsCall(body, projectId, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Import ms/ms data in given format from local filesystem into the specified project-space
     * Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
     * @param body List of file and directory paths to import (required)
     * @param projectId project-space to import into. (required)
     * @param alignLCMSRuns If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)
     * @param allowMs1OnlyData  (optional, default to true)
     * @param ignoreFormulas  (optional, default to false)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobId importCompounds(List<String> body, String projectId, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas) throws ApiException {
        ApiResponse<JobId> resp = importCompoundsWithHttpInfo(body, projectId, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas);
        return resp.getData();
    }

    /**
     * Import ms/ms data in given format from local filesystem into the specified project-space
     * Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
     * @param body List of file and directory paths to import (required)
     * @param projectId project-space to import into. (required)
     * @param alignLCMSRuns If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)
     * @param allowMs1OnlyData  (optional, default to true)
     * @param ignoreFormulas  (optional, default to false)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobId> importCompoundsWithHttpInfo(List<String> body, String projectId, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas) throws ApiException {
        com.squareup.okhttp.Call call = importCompoundsValidateBeforeCall(body, projectId, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas, null, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import ms/ms data in given format from local filesystem into the specified project-space (asynchronously)
     * Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
     * @param body List of file and directory paths to import (required)
     * @param projectId project-space to import into. (required)
     * @param alignLCMSRuns If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)
     * @param allowMs1OnlyData  (optional, default to true)
     * @param ignoreFormulas  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importCompoundsAsync(List<String> body, String projectId, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas, final ApiCallback<JobId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importCompoundsValidateBeforeCall(body, projectId, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importCompoundsFromString
     * @param body data content in specified format (required)
     * @param format data format specified by the usual file extension of the format (without [.]) (required)
     * @param projectId project-space to import into. (required)
     * @param sourceName name that specifies the data source. Can e.g. be a file path or just a name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importCompoundsFromStringCall(String body, String format, String projectId, String sourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/import-from-string"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
        if (sourceName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceName", sourceName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importCompoundsFromStringValidateBeforeCall(String body, String format, String projectId, String sourceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling importCompoundsFromString(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling importCompoundsFromString(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling importCompoundsFromString(Async)");
        }
        
        com.squareup.okhttp.Call call = importCompoundsFromStringCall(body, format, projectId, sourceName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * @param body data content in specified format (required)
     * @param format data format specified by the usual file extension of the format (without [.]) (required)
     * @param projectId project-space to import into. (required)
     * @param sourceName name that specifies the data source. Can e.g. be a file path or just a name. (optional)
     * @return List&lt;CompoundId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CompoundId> importCompoundsFromString(String body, String format, String projectId, String sourceName) throws ApiException {
        ApiResponse<List<CompoundId>> resp = importCompoundsFromStringWithHttpInfo(body, format, projectId, sourceName);
        return resp.getData();
    }

    /**
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * @param body data content in specified format (required)
     * @param format data format specified by the usual file extension of the format (without [.]) (required)
     * @param projectId project-space to import into. (required)
     * @param sourceName name that specifies the data source. Can e.g. be a file path or just a name. (optional)
     * @return ApiResponse&lt;List&lt;CompoundId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CompoundId>> importCompoundsFromStringWithHttpInfo(String body, String format, String projectId, String sourceName) throws ApiException {
        com.squareup.okhttp.Call call = importCompoundsFromStringValidateBeforeCall(body, format, projectId, sourceName, null, null);
        Type localVarReturnType = new TypeToken<List<CompoundId>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML) (asynchronously)
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * @param body data content in specified format (required)
     * @param format data format specified by the usual file extension of the format (without [.]) (required)
     * @param projectId project-space to import into. (required)
     * @param sourceName name that specifies the data source. Can e.g. be a file path or just a name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importCompoundsFromStringAsync(String body, String format, String projectId, String sourceName, final ApiCallback<List<CompoundId>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importCompoundsFromStringValidateBeforeCall(body, format, projectId, sourceName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CompoundId>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
