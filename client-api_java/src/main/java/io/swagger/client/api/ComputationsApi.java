/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.JobId;
import io.swagger.client.model.JobSubmission;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ComputationsApi {
    private ApiClient apiClient;

    public ComputationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ComputationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteJob
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be deleted (required)
     * @param cancelIfRunning If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)
     * @param awaitDeletion If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobCall(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs/{jobId}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cancelIfRunning != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cancelIfRunning", cancelIfRunning));
        if (awaitDeletion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("awaitDeletion", awaitDeletion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobValidateBeforeCall(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling deleteJob(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteJobCall(projectId, jobId, cancelIfRunning, awaitDeletion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete job.
     * Delete job. Specify how to behave for running jobs.
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be deleted (required)
     * @param cancelIfRunning If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)
     * @param awaitDeletion If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJob(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion) throws ApiException {
        deleteJobWithHttpInfo(projectId, jobId, cancelIfRunning, awaitDeletion);
    }

    /**
     * Delete job.
     * Delete job. Specify how to behave for running jobs.
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be deleted (required)
     * @param cancelIfRunning If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)
     * @param awaitDeletion If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobWithHttpInfo(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobValidateBeforeCall(projectId, jobId, cancelIfRunning, awaitDeletion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete job. (asynchronously)
     * Delete job. Specify how to behave for running jobs.
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be deleted (required)
     * @param cancelIfRunning If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)
     * @param awaitDeletion If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobAsync(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobValidateBeforeCall(projectId, jobId, cancelIfRunning, awaitDeletion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteJobConfig
     * @param name name of the job-config to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobConfigCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/job-configs/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobConfigValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteJobConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteJobConfigCall(name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete job configuration with given name.
     * Delete job configuration with given name.
     * @param name name of the job-config to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobConfig(String name) throws ApiException {
        deleteJobConfigWithHttpInfo(name);
    }

    /**
     * Delete job configuration with given name.
     * Delete job configuration with given name.
     * @param name name of the job-config to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobConfigWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobConfigValidateBeforeCall(name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete job configuration with given name. (asynchronously)
     * Delete job configuration with given name.
     * @param name name of the job-config to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobConfigAsync(String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobConfigValidateBeforeCall(name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDefaultJobConfig
     * @param includeConfigMap if true, generic configmap with-defaults will be included (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDefaultJobConfigCall(Boolean includeConfigMap, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/default-job-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeConfigMap != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeConfigMap", includeConfigMap));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDefaultJobConfigValidateBeforeCall(Boolean includeConfigMap, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getDefaultJobConfigCall(includeConfigMap, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request default job configuration
     * Request default job configuration
     * @param includeConfigMap if true, generic configmap with-defaults will be included (optional, default to false)
     * @return JobSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobSubmission getDefaultJobConfig(Boolean includeConfigMap) throws ApiException {
        ApiResponse<JobSubmission> resp = getDefaultJobConfigWithHttpInfo(includeConfigMap);
        return resp.getData();
    }

    /**
     * Request default job configuration
     * Request default job configuration
     * @param includeConfigMap if true, generic configmap with-defaults will be included (optional, default to false)
     * @return ApiResponse&lt;JobSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobSubmission> getDefaultJobConfigWithHttpInfo(Boolean includeConfigMap) throws ApiException {
        com.squareup.okhttp.Call call = getDefaultJobConfigValidateBeforeCall(includeConfigMap, null, null);
        Type localVarReturnType = new TypeToken<JobSubmission>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request default job configuration (asynchronously)
     * Request default job configuration
     * @param includeConfigMap if true, generic configmap with-defaults will be included (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDefaultJobConfigAsync(Boolean includeConfigMap, final ApiCallback<JobSubmission> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDefaultJobConfigValidateBeforeCall(includeConfigMap, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobSubmission>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJob
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobCall(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs/{jobId}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeState", includeState));
        if (includeCommand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeCommand", includeCommand));
        if (includeAffectedCompounds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeAffectedCompounds", includeAffectedCompounds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobValidateBeforeCall(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getJob(Async)");
        }
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getJob(Async)");
        }
        
        com.squareup.okhttp.Call call = getJobCall(projectId, jobId, includeState, includeCommand, includeAffectedCompounds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get job information and its current state and progress (if available).
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobId getJob(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        ApiResponse<JobId> resp = getJobWithHttpInfo(projectId, jobId, includeState, includeCommand, includeAffectedCompounds);
        return resp.getData();
    }

    /**
     * Get job information and its current state and progress (if available).
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobId> getJobWithHttpInfo(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        com.squareup.okhttp.Call call = getJobValidateBeforeCall(projectId, jobId, includeState, includeCommand, includeAffectedCompounds, null, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get job information and its current state and progress (if available). (asynchronously)
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobAsync(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback<JobId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobValidateBeforeCall(projectId, jobId, includeState, includeCommand, includeAffectedCompounds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobConfig
     * @param name name of the job-config to return (required)
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobConfigCall(String name, Boolean includeConfigMap, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/job-configs/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeConfigMap != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeConfigMap", includeConfigMap));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobConfigValidateBeforeCall(String name, Boolean includeConfigMap, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getJobConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = getJobConfigCall(name, includeConfigMap, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request job configuration with given name.
     * Request job configuration with given name.
     * @param name name of the job-config to return (required)
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @return JobSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobSubmission getJobConfig(String name, Boolean includeConfigMap) throws ApiException {
        ApiResponse<JobSubmission> resp = getJobConfigWithHttpInfo(name, includeConfigMap);
        return resp.getData();
    }

    /**
     * Request job configuration with given name.
     * Request job configuration with given name.
     * @param name name of the job-config to return (required)
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @return ApiResponse&lt;JobSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobSubmission> getJobConfigWithHttpInfo(String name, Boolean includeConfigMap) throws ApiException {
        com.squareup.okhttp.Call call = getJobConfigValidateBeforeCall(name, includeConfigMap, null, null);
        Type localVarReturnType = new TypeToken<JobSubmission>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request job configuration with given name. (asynchronously)
     * Request job configuration with given name.
     * @param name name of the job-config to return (required)
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobConfigAsync(String name, Boolean includeConfigMap, final ApiCallback<JobSubmission> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobConfigValidateBeforeCall(name, includeConfigMap, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobSubmission>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobConfigs
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobConfigsCall(Boolean includeConfigMap, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/job-configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeConfigMap != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeConfigMap", includeConfigMap));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobConfigsValidateBeforeCall(Boolean includeConfigMap, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getJobConfigsCall(includeConfigMap, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request all available job configurations
     * Request all available job configurations
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @return List&lt;JobSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JobSubmission> getJobConfigs(Boolean includeConfigMap) throws ApiException {
        ApiResponse<List<JobSubmission>> resp = getJobConfigsWithHttpInfo(includeConfigMap);
        return resp.getData();
    }

    /**
     * Request all available job configurations
     * Request all available job configurations
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @return ApiResponse&lt;List&lt;JobSubmission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JobSubmission>> getJobConfigsWithHttpInfo(Boolean includeConfigMap) throws ApiException {
        com.squareup.okhttp.Call call = getJobConfigsValidateBeforeCall(includeConfigMap, null, null);
        Type localVarReturnType = new TypeToken<List<JobSubmission>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request all available job configurations (asynchronously)
     * Request all available job configurations
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobConfigsAsync(Boolean includeConfigMap, final ApiCallback<List<JobSubmission>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobConfigsValidateBeforeCall(includeConfigMap, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JobSubmission>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobs
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)
     * @param includeCommand include job commands. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobsCall(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeState", includeState));
        if (includeCommand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeCommand", includeCommand));
        if (includeAffectedCompounds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeAffectedCompounds", includeAffectedCompounds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobsValidateBeforeCall(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getJobs(Async)");
        }
        
        com.squareup.okhttp.Call call = getJobsCall(projectId, includeState, includeCommand, includeAffectedCompounds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get job information and its current state and progress (if available).
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)
     * @param includeCommand include job commands. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return List&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JobId> getJobs(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        ApiResponse<List<JobId>> resp = getJobsWithHttpInfo(projectId, includeState, includeCommand, includeAffectedCompounds);
        return resp.getData();
    }

    /**
     * Get job information and its current state and progress (if available).
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)
     * @param includeCommand include job commands. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return ApiResponse&lt;List&lt;JobId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JobId>> getJobsWithHttpInfo(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        com.squareup.okhttp.Call call = getJobsValidateBeforeCall(projectId, includeState, includeCommand, includeAffectedCompounds, null, null);
        Type localVarReturnType = new TypeToken<List<JobId>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get job information and its current state and progress (if available). (asynchronously)
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)
     * @param includeCommand include job commands. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobsAsync(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback<List<JobId>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobsValidateBeforeCall(projectId, includeState, includeCommand, includeAffectedCompounds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JobId>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postJobConfig
     * @param body to add (required)
     * @param name name of the job-config to add (required)
     * @param overrideExisting  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postJobConfigCall(JobSubmission body, String name, Boolean overrideExisting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/job-configs/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (overrideExisting != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("overrideExisting", overrideExisting));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postJobConfigValidateBeforeCall(JobSubmission body, String name, Boolean overrideExisting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postJobConfig(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postJobConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = postJobConfigCall(body, name, overrideExisting, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new job configuration with given name.
     * Add new job configuration with given name.
     * @param body to add (required)
     * @param name name of the job-config to add (required)
     * @param overrideExisting  (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postJobConfig(JobSubmission body, String name, Boolean overrideExisting) throws ApiException {
        ApiResponse<String> resp = postJobConfigWithHttpInfo(body, name, overrideExisting);
        return resp.getData();
    }

    /**
     * Add new job configuration with given name.
     * Add new job configuration with given name.
     * @param body to add (required)
     * @param name name of the job-config to add (required)
     * @param overrideExisting  (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postJobConfigWithHttpInfo(JobSubmission body, String name, Boolean overrideExisting) throws ApiException {
        com.squareup.okhttp.Call call = postJobConfigValidateBeforeCall(body, name, overrideExisting, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new job configuration with given name. (asynchronously)
     * Add new job configuration with given name.
     * @param body to add (required)
     * @param name name of the job-config to add (required)
     * @param overrideExisting  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postJobConfigAsync(JobSubmission body, String name, Boolean overrideExisting, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postJobConfigValidateBeforeCall(body, name, overrideExisting, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startJob
     * @param body configuration of the job that will be submitted of the job to be returned (required)
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startJobCall(JobSubmission body, String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeState", includeState));
        if (includeCommand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeCommand", includeCommand));
        if (includeAffectedCompounds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeAffectedCompounds", includeAffectedCompounds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startJobValidateBeforeCall(JobSubmission body, String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling startJob(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling startJob(Async)");
        }
        
        com.squareup.okhttp.Call call = startJobCall(body, projectId, includeState, includeCommand, includeAffectedCompounds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start computation for given compounds and with given parameters.
     * Start computation for given compounds and with given parameters.
     * @param body configuration of the job that will be submitted of the job to be returned (required)
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobId startJob(JobSubmission body, String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        ApiResponse<JobId> resp = startJobWithHttpInfo(body, projectId, includeState, includeCommand, includeAffectedCompounds);
        return resp.getData();
    }

    /**
     * Start computation for given compounds and with given parameters.
     * Start computation for given compounds and with given parameters.
     * @param body configuration of the job that will be submitted of the job to be returned (required)
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobId> startJobWithHttpInfo(JobSubmission body, String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        com.squareup.okhttp.Call call = startJobValidateBeforeCall(body, projectId, includeState, includeCommand, includeAffectedCompounds, null, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start computation for given compounds and with given parameters. (asynchronously)
     * Start computation for given compounds and with given parameters.
     * @param body configuration of the job that will be submitted of the job to be returned (required)
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startJobAsync(JobSubmission body, String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback<JobId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startJobValidateBeforeCall(body, projectId, includeState, includeCommand, includeAffectedCompounds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startJobFromConfig
     * @param body compound ids to be computed (required)
     * @param jobConfigName name if the config to be used (required)
     * @param projectId project-space to run jobs on (required)
     * @param recompute enable or disable recompute. If null the stored value will be used. (optional)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startJobFromConfigCall(List<String> body, String jobConfigName, String projectId, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs-from-config"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jobConfigName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jobConfigName", jobConfigName));
        if (recompute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recompute", recompute));
        if (includeState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeState", includeState));
        if (includeCommand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeCommand", includeCommand));
        if (includeAffectedCompounds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeAffectedCompounds", includeAffectedCompounds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startJobFromConfigValidateBeforeCall(List<String> body, String jobConfigName, String projectId, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling startJobFromConfig(Async)");
        }
        // verify the required parameter 'jobConfigName' is set
        if (jobConfigName == null) {
            throw new ApiException("Missing the required parameter 'jobConfigName' when calling startJobFromConfig(Async)");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling startJobFromConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = startJobFromConfigCall(body, jobConfigName, projectId, recompute, includeState, includeCommand, includeAffectedCompounds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start computation for given compounds and with parameters from a stored job-config.
     * Start computation for given compounds and with parameters from a stored job-config.
     * @param body compound ids to be computed (required)
     * @param jobConfigName name if the config to be used (required)
     * @param projectId project-space to run jobs on (required)
     * @param recompute enable or disable recompute. If null the stored value will be used. (optional)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobId startJobFromConfig(List<String> body, String jobConfigName, String projectId, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        ApiResponse<JobId> resp = startJobFromConfigWithHttpInfo(body, jobConfigName, projectId, recompute, includeState, includeCommand, includeAffectedCompounds);
        return resp.getData();
    }

    /**
     * Start computation for given compounds and with parameters from a stored job-config.
     * Start computation for given compounds and with parameters from a stored job-config.
     * @param body compound ids to be computed (required)
     * @param jobConfigName name if the config to be used (required)
     * @param projectId project-space to run jobs on (required)
     * @param recompute enable or disable recompute. If null the stored value will be used. (optional)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobId> startJobFromConfigWithHttpInfo(List<String> body, String jobConfigName, String projectId, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        com.squareup.okhttp.Call call = startJobFromConfigValidateBeforeCall(body, jobConfigName, projectId, recompute, includeState, includeCommand, includeAffectedCompounds, null, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start computation for given compounds and with parameters from a stored job-config. (asynchronously)
     * Start computation for given compounds and with parameters from a stored job-config.
     * @param body compound ids to be computed (required)
     * @param jobConfigName name if the config to be used (required)
     * @param projectId project-space to run jobs on (required)
     * @param recompute enable or disable recompute. If null the stored value will be used. (optional)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startJobFromConfigAsync(List<String> body, String jobConfigName, String projectId, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback<JobId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startJobFromConfigValidateBeforeCall(body, jobConfigName, projectId, recompute, includeState, includeCommand, includeAffectedCompounds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
