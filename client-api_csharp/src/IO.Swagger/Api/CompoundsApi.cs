/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICompoundsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <remarks>
        /// Delete compound/feature with the given identifier from the specified project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to delete from.</param>
        /// <param name="cid">identifier of compound to delete.</param>
        /// <returns></returns>
        void DeleteCompound (string projectId, string cid);

        /// <summary>
        /// Delete compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <remarks>
        /// Delete compound/feature with the given identifier from the specified project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to delete from.</param>
        /// <param name="cid">identifier of compound to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCompoundWithHttpInfo (string projectId, string cid);
        /// <summary>
        /// Get compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <remarks>
        /// Get compound/feature with the given identifier from the specified project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="cid">identifier of compound to access.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>CompoundId</returns>
        CompoundId GetCompound (string projectId, string cid, bool? topAnnotation = null, bool? msData = null);

        /// <summary>
        /// Get compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <remarks>
        /// Get compound/feature with the given identifier from the specified project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="cid">identifier of compound to access.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>ApiResponse of CompoundId</returns>
        ApiResponse<CompoundId> GetCompoundWithHttpInfo (string projectId, string cid, bool? topAnnotation = null, bool? msData = null);
        /// <summary>
        /// Get all available compounds/features in the given project-space.
        /// </summary>
        /// <remarks>
        /// Get all available compounds/features in the given project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>List&lt;CompoundId&gt;</returns>
        List<CompoundId> GetCompounds (string projectId, bool? topAnnotation = null, bool? msData = null);

        /// <summary>
        /// Get all available compounds/features in the given project-space.
        /// </summary>
        /// <remarks>
        /// Get all available compounds/features in the given project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CompoundId&gt;</returns>
        ApiResponse<List<CompoundId>> GetCompoundsWithHttpInfo (string projectId, bool? topAnnotation = null, bool? msData = null);
        /// <summary>
        /// Import ms/ms data in given format from local filesystem into the specified project-space
        /// </summary>
        /// <remarks>
        /// Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of file and directory paths to import</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="alignLCMSRuns">If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)</param>
        /// <param name="allowMs1OnlyData"> (optional, default to true)</param>
        /// <param name="ignoreFormulas"> (optional, default to false)</param>
        /// <returns>JobId</returns>
        JobId ImportCompounds (List<string> body, string projectId, bool? alignLCMSRuns = null, bool? allowMs1OnlyData = null, bool? ignoreFormulas = null);

        /// <summary>
        /// Import ms/ms data in given format from local filesystem into the specified project-space
        /// </summary>
        /// <remarks>
        /// Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of file and directory paths to import</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="alignLCMSRuns">If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)</param>
        /// <param name="allowMs1OnlyData"> (optional, default to true)</param>
        /// <param name="ignoreFormulas"> (optional, default to false)</param>
        /// <returns>ApiResponse of JobId</returns>
        ApiResponse<JobId> ImportCompoundsWithHttpInfo (List<string> body, string projectId, bool? alignLCMSRuns = null, bool? allowMs1OnlyData = null, bool? ignoreFormulas = null);
        /// <summary>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </summary>
        /// <remarks>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">data content in specified format</param>
        /// <param name="format">data format specified by the usual file extension of the format (without [.])</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="sourceName">name that specifies the data source. Can e.g. be a file path or just a name. (optional)</param>
        /// <returns>List&lt;CompoundId&gt;</returns>
        List<CompoundId> ImportCompoundsFromString (string body, string format, string projectId, string sourceName = null);

        /// <summary>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </summary>
        /// <remarks>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">data content in specified format</param>
        /// <param name="format">data format specified by the usual file extension of the format (without [.])</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="sourceName">name that specifies the data source. Can e.g. be a file path or just a name. (optional)</param>
        /// <returns>ApiResponse of List&lt;CompoundId&gt;</returns>
        ApiResponse<List<CompoundId>> ImportCompoundsFromStringWithHttpInfo (string body, string format, string projectId, string sourceName = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <remarks>
        /// Delete compound/feature with the given identifier from the specified project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to delete from.</param>
        /// <param name="cid">identifier of compound to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCompoundAsync (string projectId, string cid);

        /// <summary>
        /// Delete compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <remarks>
        /// Delete compound/feature with the given identifier from the specified project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to delete from.</param>
        /// <param name="cid">identifier of compound to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCompoundAsyncWithHttpInfo (string projectId, string cid);
        /// <summary>
        /// Get compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <remarks>
        /// Get compound/feature with the given identifier from the specified project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="cid">identifier of compound to access.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>Task of CompoundId</returns>
        System.Threading.Tasks.Task<CompoundId> GetCompoundAsync (string projectId, string cid, bool? topAnnotation = null, bool? msData = null);

        /// <summary>
        /// Get compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <remarks>
        /// Get compound/feature with the given identifier from the specified project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="cid">identifier of compound to access.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CompoundId)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompoundId>> GetCompoundAsyncWithHttpInfo (string projectId, string cid, bool? topAnnotation = null, bool? msData = null);
        /// <summary>
        /// Get all available compounds/features in the given project-space.
        /// </summary>
        /// <remarks>
        /// Get all available compounds/features in the given project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>Task of List&lt;CompoundId&gt;</returns>
        System.Threading.Tasks.Task<List<CompoundId>> GetCompoundsAsync (string projectId, bool? topAnnotation = null, bool? msData = null);

        /// <summary>
        /// Get all available compounds/features in the given project-space.
        /// </summary>
        /// <remarks>
        /// Get all available compounds/features in the given project-space.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;CompoundId&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CompoundId>>> GetCompoundsAsyncWithHttpInfo (string projectId, bool? topAnnotation = null, bool? msData = null);
        /// <summary>
        /// Import ms/ms data in given format from local filesystem into the specified project-space
        /// </summary>
        /// <remarks>
        /// Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of file and directory paths to import</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="alignLCMSRuns">If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)</param>
        /// <param name="allowMs1OnlyData"> (optional, default to true)</param>
        /// <param name="ignoreFormulas"> (optional, default to false)</param>
        /// <returns>Task of JobId</returns>
        System.Threading.Tasks.Task<JobId> ImportCompoundsAsync (List<string> body, string projectId, bool? alignLCMSRuns = null, bool? allowMs1OnlyData = null, bool? ignoreFormulas = null);

        /// <summary>
        /// Import ms/ms data in given format from local filesystem into the specified project-space
        /// </summary>
        /// <remarks>
        /// Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of file and directory paths to import</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="alignLCMSRuns">If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)</param>
        /// <param name="allowMs1OnlyData"> (optional, default to true)</param>
        /// <param name="ignoreFormulas"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobId)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobId>> ImportCompoundsAsyncWithHttpInfo (List<string> body, string projectId, bool? alignLCMSRuns = null, bool? allowMs1OnlyData = null, bool? ignoreFormulas = null);
        /// <summary>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </summary>
        /// <remarks>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">data content in specified format</param>
        /// <param name="format">data format specified by the usual file extension of the format (without [.])</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="sourceName">name that specifies the data source. Can e.g. be a file path or just a name. (optional)</param>
        /// <returns>Task of List&lt;CompoundId&gt;</returns>
        System.Threading.Tasks.Task<List<CompoundId>> ImportCompoundsFromStringAsync (string body, string format, string projectId, string sourceName = null);

        /// <summary>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </summary>
        /// <remarks>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">data content in specified format</param>
        /// <param name="format">data format specified by the usual file extension of the format (without [.])</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="sourceName">name that specifies the data source. Can e.g. be a file path or just a name. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CompoundId&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CompoundId>>> ImportCompoundsFromStringAsyncWithHttpInfo (string body, string format, string projectId, string sourceName = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CompoundsApi : ICompoundsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompoundsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompoundsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompoundsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CompoundsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompoundsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompoundsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete compound/feature with the given identifier from the specified project-space. Delete compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to delete from.</param>
        /// <param name="cid">identifier of compound to delete.</param>
        /// <returns></returns>
        public void DeleteCompound (string projectId, string cid)
        {
             DeleteCompoundWithHttpInfo(projectId, cid);
        }

        /// <summary>
        /// Delete compound/feature with the given identifier from the specified project-space. Delete compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to delete from.</param>
        /// <param name="cid">identifier of compound to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCompoundWithHttpInfo (string projectId, string cid)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->DeleteCompound");
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling CompoundsApi->DeleteCompound");

            var localVarPath = "/api/projects/{projectId}/compounds/{cid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCompound", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete compound/feature with the given identifier from the specified project-space. Delete compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to delete from.</param>
        /// <param name="cid">identifier of compound to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCompoundAsync (string projectId, string cid)
        {
             await DeleteCompoundAsyncWithHttpInfo(projectId, cid);

        }

        /// <summary>
        /// Delete compound/feature with the given identifier from the specified project-space. Delete compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to delete from.</param>
        /// <param name="cid">identifier of compound to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCompoundAsyncWithHttpInfo (string projectId, string cid)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->DeleteCompound");
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling CompoundsApi->DeleteCompound");

            var localVarPath = "/api/projects/{projectId}/compounds/{cid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCompound", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get compound/feature with the given identifier from the specified project-space. Get compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="cid">identifier of compound to access.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>CompoundId</returns>
        public CompoundId GetCompound (string projectId, string cid, bool? topAnnotation = null, bool? msData = null)
        {
             ApiResponse<CompoundId> localVarResponse = GetCompoundWithHttpInfo(projectId, cid, topAnnotation, msData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get compound/feature with the given identifier from the specified project-space. Get compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="cid">identifier of compound to access.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>ApiResponse of CompoundId</returns>
        public ApiResponse< CompoundId > GetCompoundWithHttpInfo (string projectId, string cid, bool? topAnnotation = null, bool? msData = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->GetCompound");
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling CompoundsApi->GetCompound");

            var localVarPath = "/api/projects/{projectId}/compounds/{cid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter
            if (topAnnotation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topAnnotation", topAnnotation)); // query parameter
            if (msData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "msData", msData)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompound", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompoundId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompoundId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompoundId)));
        }

        /// <summary>
        /// Get compound/feature with the given identifier from the specified project-space. Get compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="cid">identifier of compound to access.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>Task of CompoundId</returns>
        public async System.Threading.Tasks.Task<CompoundId> GetCompoundAsync (string projectId, string cid, bool? topAnnotation = null, bool? msData = null)
        {
             ApiResponse<CompoundId> localVarResponse = await GetCompoundAsyncWithHttpInfo(projectId, cid, topAnnotation, msData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get compound/feature with the given identifier from the specified project-space. Get compound/feature with the given identifier from the specified project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="cid">identifier of compound to access.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CompoundId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompoundId>> GetCompoundAsyncWithHttpInfo (string projectId, string cid, bool? topAnnotation = null, bool? msData = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->GetCompound");
            // verify the required parameter 'cid' is set
            if (cid == null)
                throw new ApiException(400, "Missing required parameter 'cid' when calling CompoundsApi->GetCompound");

            var localVarPath = "/api/projects/{projectId}/compounds/{cid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (cid != null) localVarPathParams.Add("cid", this.Configuration.ApiClient.ParameterToString(cid)); // path parameter
            if (topAnnotation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topAnnotation", topAnnotation)); // query parameter
            if (msData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "msData", msData)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompound", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompoundId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompoundId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompoundId)));
        }

        /// <summary>
        /// Get all available compounds/features in the given project-space. Get all available compounds/features in the given project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>List&lt;CompoundId&gt;</returns>
        public List<CompoundId> GetCompounds (string projectId, bool? topAnnotation = null, bool? msData = null)
        {
             ApiResponse<List<CompoundId>> localVarResponse = GetCompoundsWithHttpInfo(projectId, topAnnotation, msData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available compounds/features in the given project-space. Get all available compounds/features in the given project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CompoundId&gt;</returns>
        public ApiResponse< List<CompoundId> > GetCompoundsWithHttpInfo (string projectId, bool? topAnnotation = null, bool? msData = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->GetCompounds");

            var localVarPath = "/api/projects/{projectId}/compounds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (topAnnotation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topAnnotation", topAnnotation)); // query parameter
            if (msData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "msData", msData)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompounds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CompoundId>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CompoundId>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CompoundId>)));
        }

        /// <summary>
        /// Get all available compounds/features in the given project-space. Get all available compounds/features in the given project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>Task of List&lt;CompoundId&gt;</returns>
        public async System.Threading.Tasks.Task<List<CompoundId>> GetCompoundsAsync (string projectId, bool? topAnnotation = null, bool? msData = null)
        {
             ApiResponse<List<CompoundId>> localVarResponse = await GetCompoundsAsyncWithHttpInfo(projectId, topAnnotation, msData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available compounds/features in the given project-space. Get all available compounds/features in the given project-space.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="topAnnotation">include the top annotation of this feature into the output (if available). (optional, default to false)</param>
        /// <param name="msData">include corresponding source data (MS and MS/MS) into the output. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;CompoundId&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CompoundId>>> GetCompoundsAsyncWithHttpInfo (string projectId, bool? topAnnotation = null, bool? msData = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->GetCompounds");

            var localVarPath = "/api/projects/{projectId}/compounds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (topAnnotation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topAnnotation", topAnnotation)); // query parameter
            if (msData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "msData", msData)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompounds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CompoundId>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CompoundId>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CompoundId>)));
        }

        /// <summary>
        /// Import ms/ms data in given format from local filesystem into the specified project-space Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of file and directory paths to import</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="alignLCMSRuns">If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)</param>
        /// <param name="allowMs1OnlyData"> (optional, default to true)</param>
        /// <param name="ignoreFormulas"> (optional, default to false)</param>
        /// <returns>JobId</returns>
        public JobId ImportCompounds (List<string> body, string projectId, bool? alignLCMSRuns = null, bool? allowMs1OnlyData = null, bool? ignoreFormulas = null)
        {
             ApiResponse<JobId> localVarResponse = ImportCompoundsWithHttpInfo(body, projectId, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import ms/ms data in given format from local filesystem into the specified project-space Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of file and directory paths to import</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="alignLCMSRuns">If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)</param>
        /// <param name="allowMs1OnlyData"> (optional, default to true)</param>
        /// <param name="ignoreFormulas"> (optional, default to false)</param>
        /// <returns>ApiResponse of JobId</returns>
        public ApiResponse< JobId > ImportCompoundsWithHttpInfo (List<string> body, string projectId, bool? alignLCMSRuns = null, bool? allowMs1OnlyData = null, bool? ignoreFormulas = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompoundsApi->ImportCompounds");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->ImportCompounds");

            var localVarPath = "/api/projects/{projectId}/compounds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (alignLCMSRuns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alignLCMSRuns", alignLCMSRuns)); // query parameter
            if (allowMs1OnlyData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowMs1OnlyData", allowMs1OnlyData)); // query parameter
            if (ignoreFormulas != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreFormulas", ignoreFormulas)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCompounds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobId)));
        }

        /// <summary>
        /// Import ms/ms data in given format from local filesystem into the specified project-space Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of file and directory paths to import</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="alignLCMSRuns">If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)</param>
        /// <param name="allowMs1OnlyData"> (optional, default to true)</param>
        /// <param name="ignoreFormulas"> (optional, default to false)</param>
        /// <returns>Task of JobId</returns>
        public async System.Threading.Tasks.Task<JobId> ImportCompoundsAsync (List<string> body, string projectId, bool? alignLCMSRuns = null, bool? allowMs1OnlyData = null, bool? ignoreFormulas = null)
        {
             ApiResponse<JobId> localVarResponse = await ImportCompoundsAsyncWithHttpInfo(body, projectId, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import ms/ms data in given format from local filesystem into the specified project-space Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of file and directory paths to import</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="alignLCMSRuns">If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)</param>
        /// <param name="allowMs1OnlyData"> (optional, default to true)</param>
        /// <param name="ignoreFormulas"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobId>> ImportCompoundsAsyncWithHttpInfo (List<string> body, string projectId, bool? alignLCMSRuns = null, bool? allowMs1OnlyData = null, bool? ignoreFormulas = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompoundsApi->ImportCompounds");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->ImportCompounds");

            var localVarPath = "/api/projects/{projectId}/compounds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (alignLCMSRuns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alignLCMSRuns", alignLCMSRuns)); // query parameter
            if (allowMs1OnlyData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowMs1OnlyData", allowMs1OnlyData)); // query parameter
            if (ignoreFormulas != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreFormulas", ignoreFormulas)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCompounds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobId)));
        }

        /// <summary>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML) Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">data content in specified format</param>
        /// <param name="format">data format specified by the usual file extension of the format (without [.])</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="sourceName">name that specifies the data source. Can e.g. be a file path or just a name. (optional)</param>
        /// <returns>List&lt;CompoundId&gt;</returns>
        public List<CompoundId> ImportCompoundsFromString (string body, string format, string projectId, string sourceName = null)
        {
             ApiResponse<List<CompoundId>> localVarResponse = ImportCompoundsFromStringWithHttpInfo(body, format, projectId, sourceName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML) Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">data content in specified format</param>
        /// <param name="format">data format specified by the usual file extension of the format (without [.])</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="sourceName">name that specifies the data source. Can e.g. be a file path or just a name. (optional)</param>
        /// <returns>ApiResponse of List&lt;CompoundId&gt;</returns>
        public ApiResponse< List<CompoundId> > ImportCompoundsFromStringWithHttpInfo (string body, string format, string projectId, string sourceName = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompoundsApi->ImportCompoundsFromString");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CompoundsApi->ImportCompoundsFromString");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->ImportCompoundsFromString");

            var localVarPath = "/api/projects/{projectId}/compounds/import-from-string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (sourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceName", sourceName)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCompoundsFromString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CompoundId>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CompoundId>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CompoundId>)));
        }

        /// <summary>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML) Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">data content in specified format</param>
        /// <param name="format">data format specified by the usual file extension of the format (without [.])</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="sourceName">name that specifies the data source. Can e.g. be a file path or just a name. (optional)</param>
        /// <returns>Task of List&lt;CompoundId&gt;</returns>
        public async System.Threading.Tasks.Task<List<CompoundId>> ImportCompoundsFromStringAsync (string body, string format, string projectId, string sourceName = null)
        {
             ApiResponse<List<CompoundId>> localVarResponse = await ImportCompoundsFromStringAsyncWithHttpInfo(body, format, projectId, sourceName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML) Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">data content in specified format</param>
        /// <param name="format">data format specified by the usual file extension of the format (without [.])</param>
        /// <param name="projectId">project-space to import into.</param>
        /// <param name="sourceName">name that specifies the data source. Can e.g. be a file path or just a name. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CompoundId&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CompoundId>>> ImportCompoundsFromStringAsyncWithHttpInfo (string body, string format, string projectId, string sourceName = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompoundsApi->ImportCompoundsFromString");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CompoundsApi->ImportCompoundsFromString");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling CompoundsApi->ImportCompoundsFromString");

            var localVarPath = "/api/projects/{projectId}/compounds/import-from-string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (sourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceName", sourceName)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCompoundsFromString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CompoundId>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CompoundId>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CompoundId>)));
        }

    }
}
