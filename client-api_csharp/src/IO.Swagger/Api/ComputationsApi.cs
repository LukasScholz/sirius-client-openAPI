/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IComputationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete job.
        /// </summary>
        /// <remarks>
        /// Delete job. Specify how to behave for running jobs.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be deleted</param>
        /// <param name="cancelIfRunning">If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)</param>
        /// <param name="awaitDeletion">If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)</param>
        /// <returns></returns>
        void DeleteJob (string projectId, string jobId, bool? cancelIfRunning = null, bool? awaitDeletion = null);

        /// <summary>
        /// Delete job.
        /// </summary>
        /// <remarks>
        /// Delete job. Specify how to behave for running jobs.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be deleted</param>
        /// <param name="cancelIfRunning">If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)</param>
        /// <param name="awaitDeletion">If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobWithHttpInfo (string projectId, string jobId, bool? cancelIfRunning = null, bool? awaitDeletion = null);
        /// <summary>
        /// Delete job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Delete job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to delete</param>
        /// <returns></returns>
        void DeleteJobConfig (string name);

        /// <summary>
        /// Delete job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Delete job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobConfigWithHttpInfo (string name);
        /// <summary>
        /// Request default job configuration
        /// </summary>
        /// <remarks>
        /// Request default job configuration
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true, generic configmap with-defaults will be included (optional, default to false)</param>
        /// <returns>JobSubmission</returns>
        JobSubmission GetDefaultJobConfig (bool? includeConfigMap = null);

        /// <summary>
        /// Request default job configuration
        /// </summary>
        /// <remarks>
        /// Request default job configuration
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true, generic configmap with-defaults will be included (optional, default to false)</param>
        /// <returns>ApiResponse of JobSubmission</returns>
        ApiResponse<JobSubmission> GetDefaultJobConfigWithHttpInfo (bool? includeConfigMap = null);
        /// <summary>
        /// Get job information and its current state and progress (if available).
        /// </summary>
        /// <remarks>
        /// Get job information and its current state and progress (if available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be returned</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>JobId</returns>
        JobId GetJob (string projectId, string jobId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);

        /// <summary>
        /// Get job information and its current state and progress (if available).
        /// </summary>
        /// <remarks>
        /// Get job information and its current state and progress (if available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be returned</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>ApiResponse of JobId</returns>
        ApiResponse<JobId> GetJobWithHttpInfo (string projectId, string jobId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);
        /// <summary>
        /// Request job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Request job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to return</param>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>JobSubmission</returns>
        JobSubmission GetJobConfig (string name, bool? includeConfigMap = null);

        /// <summary>
        /// Request job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Request job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to return</param>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>ApiResponse of JobSubmission</returns>
        ApiResponse<JobSubmission> GetJobConfigWithHttpInfo (string name, bool? includeConfigMap = null);
        /// <summary>
        /// Request all available job configurations
        /// </summary>
        /// <remarks>
        /// Request all available job configurations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>List&lt;JobSubmission&gt;</returns>
        List<JobSubmission> GetJobConfigs (bool? includeConfigMap = null);

        /// <summary>
        /// Request all available job configurations
        /// </summary>
        /// <remarks>
        /// Request all available job configurations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;JobSubmission&gt;</returns>
        ApiResponse<List<JobSubmission>> GetJobConfigsWithHttpInfo (bool? includeConfigMap = null);
        /// <summary>
        /// Get job information and its current state and progress (if available).
        /// </summary>
        /// <remarks>
        /// Get job information and its current state and progress (if available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)</param>
        /// <param name="includeCommand">include job commands. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>List&lt;JobId&gt;</returns>
        List<JobId> GetJobs (string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);

        /// <summary>
        /// Get job information and its current state and progress (if available).
        /// </summary>
        /// <remarks>
        /// Get job information and its current state and progress (if available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)</param>
        /// <param name="includeCommand">include job commands. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;JobId&gt;</returns>
        ApiResponse<List<JobId>> GetJobsWithHttpInfo (string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);
        /// <summary>
        /// Add new job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Add new job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">to add</param>
        /// <param name="name">name of the job-config to add</param>
        /// <param name="overrideExisting"> (optional, default to false)</param>
        /// <returns>string</returns>
        string PostJobConfig (JobSubmission body, string name, bool? overrideExisting = null);

        /// <summary>
        /// Add new job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Add new job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">to add</param>
        /// <param name="name">name of the job-config to add</param>
        /// <param name="overrideExisting"> (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostJobConfigWithHttpInfo (JobSubmission body, string name, bool? overrideExisting = null);
        /// <summary>
        /// Start computation for given compounds and with given parameters.
        /// </summary>
        /// <remarks>
        /// Start computation for given compounds and with given parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration of the job that will be submitted of the job to be returned</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>JobId</returns>
        JobId StartJob (JobSubmission body, string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);

        /// <summary>
        /// Start computation for given compounds and with given parameters.
        /// </summary>
        /// <remarks>
        /// Start computation for given compounds and with given parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration of the job that will be submitted of the job to be returned</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>ApiResponse of JobId</returns>
        ApiResponse<JobId> StartJobWithHttpInfo (JobSubmission body, string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);
        /// <summary>
        /// Start computation for given compounds and with parameters from a stored job-config.
        /// </summary>
        /// <remarks>
        /// Start computation for given compounds and with parameters from a stored job-config.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">compound ids to be computed</param>
        /// <param name="jobConfigName">name if the config to be used</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="recompute">enable or disable recompute. If null the stored value will be used. (optional)</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>JobId</returns>
        JobId StartJobFromConfig (List<string> body, string jobConfigName, string projectId, bool? recompute = null, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);

        /// <summary>
        /// Start computation for given compounds and with parameters from a stored job-config.
        /// </summary>
        /// <remarks>
        /// Start computation for given compounds and with parameters from a stored job-config.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">compound ids to be computed</param>
        /// <param name="jobConfigName">name if the config to be used</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="recompute">enable or disable recompute. If null the stored value will be used. (optional)</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>ApiResponse of JobId</returns>
        ApiResponse<JobId> StartJobFromConfigWithHttpInfo (List<string> body, string jobConfigName, string projectId, bool? recompute = null, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete job.
        /// </summary>
        /// <remarks>
        /// Delete job. Specify how to behave for running jobs.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be deleted</param>
        /// <param name="cancelIfRunning">If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)</param>
        /// <param name="awaitDeletion">If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobAsync (string projectId, string jobId, bool? cancelIfRunning = null, bool? awaitDeletion = null);

        /// <summary>
        /// Delete job.
        /// </summary>
        /// <remarks>
        /// Delete job. Specify how to behave for running jobs.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be deleted</param>
        /// <param name="cancelIfRunning">If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)</param>
        /// <param name="awaitDeletion">If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobAsyncWithHttpInfo (string projectId, string jobId, bool? cancelIfRunning = null, bool? awaitDeletion = null);
        /// <summary>
        /// Delete job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Delete job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobConfigAsync (string name);

        /// <summary>
        /// Delete job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Delete job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobConfigAsyncWithHttpInfo (string name);
        /// <summary>
        /// Request default job configuration
        /// </summary>
        /// <remarks>
        /// Request default job configuration
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true, generic configmap with-defaults will be included (optional, default to false)</param>
        /// <returns>Task of JobSubmission</returns>
        System.Threading.Tasks.Task<JobSubmission> GetDefaultJobConfigAsync (bool? includeConfigMap = null);

        /// <summary>
        /// Request default job configuration
        /// </summary>
        /// <remarks>
        /// Request default job configuration
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true, generic configmap with-defaults will be included (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobSubmission>> GetDefaultJobConfigAsyncWithHttpInfo (bool? includeConfigMap = null);
        /// <summary>
        /// Get job information and its current state and progress (if available).
        /// </summary>
        /// <remarks>
        /// Get job information and its current state and progress (if available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be returned</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of JobId</returns>
        System.Threading.Tasks.Task<JobId> GetJobAsync (string projectId, string jobId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);

        /// <summary>
        /// Get job information and its current state and progress (if available).
        /// </summary>
        /// <remarks>
        /// Get job information and its current state and progress (if available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be returned</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobId)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobId>> GetJobAsyncWithHttpInfo (string projectId, string jobId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);
        /// <summary>
        /// Request job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Request job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to return</param>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>Task of JobSubmission</returns>
        System.Threading.Tasks.Task<JobSubmission> GetJobConfigAsync (string name, bool? includeConfigMap = null);

        /// <summary>
        /// Request job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Request job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to return</param>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobSubmission)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobSubmission>> GetJobConfigAsyncWithHttpInfo (string name, bool? includeConfigMap = null);
        /// <summary>
        /// Request all available job configurations
        /// </summary>
        /// <remarks>
        /// Request all available job configurations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>Task of List&lt;JobSubmission&gt;</returns>
        System.Threading.Tasks.Task<List<JobSubmission>> GetJobConfigsAsync (bool? includeConfigMap = null);

        /// <summary>
        /// Request all available job configurations
        /// </summary>
        /// <remarks>
        /// Request all available job configurations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;JobSubmission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobSubmission>>> GetJobConfigsAsyncWithHttpInfo (bool? includeConfigMap = null);
        /// <summary>
        /// Get job information and its current state and progress (if available).
        /// </summary>
        /// <remarks>
        /// Get job information and its current state and progress (if available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)</param>
        /// <param name="includeCommand">include job commands. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of List&lt;JobId&gt;</returns>
        System.Threading.Tasks.Task<List<JobId>> GetJobsAsync (string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);

        /// <summary>
        /// Get job information and its current state and progress (if available).
        /// </summary>
        /// <remarks>
        /// Get job information and its current state and progress (if available).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)</param>
        /// <param name="includeCommand">include job commands. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;JobId&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobId>>> GetJobsAsyncWithHttpInfo (string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);
        /// <summary>
        /// Add new job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Add new job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">to add</param>
        /// <param name="name">name of the job-config to add</param>
        /// <param name="overrideExisting"> (optional, default to false)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostJobConfigAsync (JobSubmission body, string name, bool? overrideExisting = null);

        /// <summary>
        /// Add new job configuration with given name.
        /// </summary>
        /// <remarks>
        /// Add new job configuration with given name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">to add</param>
        /// <param name="name">name of the job-config to add</param>
        /// <param name="overrideExisting"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostJobConfigAsyncWithHttpInfo (JobSubmission body, string name, bool? overrideExisting = null);
        /// <summary>
        /// Start computation for given compounds and with given parameters.
        /// </summary>
        /// <remarks>
        /// Start computation for given compounds and with given parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration of the job that will be submitted of the job to be returned</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of JobId</returns>
        System.Threading.Tasks.Task<JobId> StartJobAsync (JobSubmission body, string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);

        /// <summary>
        /// Start computation for given compounds and with given parameters.
        /// </summary>
        /// <remarks>
        /// Start computation for given compounds and with given parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration of the job that will be submitted of the job to be returned</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobId)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobId>> StartJobAsyncWithHttpInfo (JobSubmission body, string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);
        /// <summary>
        /// Start computation for given compounds and with parameters from a stored job-config.
        /// </summary>
        /// <remarks>
        /// Start computation for given compounds and with parameters from a stored job-config.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">compound ids to be computed</param>
        /// <param name="jobConfigName">name if the config to be used</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="recompute">enable or disable recompute. If null the stored value will be used. (optional)</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of JobId</returns>
        System.Threading.Tasks.Task<JobId> StartJobFromConfigAsync (List<string> body, string jobConfigName, string projectId, bool? recompute = null, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);

        /// <summary>
        /// Start computation for given compounds and with parameters from a stored job-config.
        /// </summary>
        /// <remarks>
        /// Start computation for given compounds and with parameters from a stored job-config.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">compound ids to be computed</param>
        /// <param name="jobConfigName">name if the config to be used</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="recompute">enable or disable recompute. If null the stored value will be used. (optional)</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobId)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobId>> StartJobFromConfigAsyncWithHttpInfo (List<string> body, string jobConfigName, string projectId, bool? recompute = null, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ComputationsApi : IComputationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComputationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComputationsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComputationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ComputationsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComputationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComputationsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete job. Delete job. Specify how to behave for running jobs.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be deleted</param>
        /// <param name="cancelIfRunning">If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)</param>
        /// <param name="awaitDeletion">If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteJob (string projectId, string jobId, bool? cancelIfRunning = null, bool? awaitDeletion = null)
        {
             DeleteJobWithHttpInfo(projectId, jobId, cancelIfRunning, awaitDeletion);
        }

        /// <summary>
        /// Delete job. Delete job. Specify how to behave for running jobs.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be deleted</param>
        /// <param name="cancelIfRunning">If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)</param>
        /// <param name="awaitDeletion">If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobWithHttpInfo (string projectId, string jobId, bool? cancelIfRunning = null, bool? awaitDeletion = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->DeleteJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ComputationsApi->DeleteJob");

            var localVarPath = "/api/projects/{projectId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (cancelIfRunning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cancelIfRunning", cancelIfRunning)); // query parameter
            if (awaitDeletion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "awaitDeletion", awaitDeletion)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete job. Delete job. Specify how to behave for running jobs.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be deleted</param>
        /// <param name="cancelIfRunning">If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)</param>
        /// <param name="awaitDeletion">If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobAsync (string projectId, string jobId, bool? cancelIfRunning = null, bool? awaitDeletion = null)
        {
             await DeleteJobAsyncWithHttpInfo(projectId, jobId, cancelIfRunning, awaitDeletion);

        }

        /// <summary>
        /// Delete job. Delete job. Specify how to behave for running jobs.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be deleted</param>
        /// <param name="cancelIfRunning">If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)</param>
        /// <param name="awaitDeletion">If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobAsyncWithHttpInfo (string projectId, string jobId, bool? cancelIfRunning = null, bool? awaitDeletion = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->DeleteJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ComputationsApi->DeleteJob");

            var localVarPath = "/api/projects/{projectId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (cancelIfRunning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cancelIfRunning", cancelIfRunning)); // query parameter
            if (awaitDeletion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "awaitDeletion", awaitDeletion)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete job configuration with given name. Delete job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to delete</param>
        /// <returns></returns>
        public void DeleteJobConfig (string name)
        {
             DeleteJobConfigWithHttpInfo(name);
        }

        /// <summary>
        /// Delete job configuration with given name. Delete job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteJobConfigWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ComputationsApi->DeleteJobConfig");

            var localVarPath = "/api/job-configs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete job configuration with given name. Delete job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobConfigAsync (string name)
        {
             await DeleteJobConfigAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Delete job configuration with given name. Delete job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobConfigAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ComputationsApi->DeleteJobConfig");

            var localVarPath = "/api/job-configs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJobConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Request default job configuration Request default job configuration
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true, generic configmap with-defaults will be included (optional, default to false)</param>
        /// <returns>JobSubmission</returns>
        public JobSubmission GetDefaultJobConfig (bool? includeConfigMap = null)
        {
             ApiResponse<JobSubmission> localVarResponse = GetDefaultJobConfigWithHttpInfo(includeConfigMap);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request default job configuration Request default job configuration
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true, generic configmap with-defaults will be included (optional, default to false)</param>
        /// <returns>ApiResponse of JobSubmission</returns>
        public ApiResponse< JobSubmission > GetDefaultJobConfigWithHttpInfo (bool? includeConfigMap = null)
        {

            var localVarPath = "/api/default-job-config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeConfigMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeConfigMap", includeConfigMap)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultJobConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobSubmission)));
        }

        /// <summary>
        /// Request default job configuration Request default job configuration
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true, generic configmap with-defaults will be included (optional, default to false)</param>
        /// <returns>Task of JobSubmission</returns>
        public async System.Threading.Tasks.Task<JobSubmission> GetDefaultJobConfigAsync (bool? includeConfigMap = null)
        {
             ApiResponse<JobSubmission> localVarResponse = await GetDefaultJobConfigAsyncWithHttpInfo(includeConfigMap);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request default job configuration Request default job configuration
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true, generic configmap with-defaults will be included (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobSubmission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobSubmission>> GetDefaultJobConfigAsyncWithHttpInfo (bool? includeConfigMap = null)
        {

            var localVarPath = "/api/default-job-config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeConfigMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeConfigMap", includeConfigMap)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDefaultJobConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobSubmission)));
        }

        /// <summary>
        /// Get job information and its current state and progress (if available). Get job information and its current state and progress (if available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be returned</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>JobId</returns>
        public JobId GetJob (string projectId, string jobId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
             ApiResponse<JobId> localVarResponse = GetJobWithHttpInfo(projectId, jobId, includeState, includeCommand, includeAffectedCompounds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get job information and its current state and progress (if available). Get job information and its current state and progress (if available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be returned</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>ApiResponse of JobId</returns>
        public ApiResponse< JobId > GetJobWithHttpInfo (string projectId, string jobId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->GetJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ComputationsApi->GetJob");

            var localVarPath = "/api/projects/{projectId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (includeState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeState", includeState)); // query parameter
            if (includeCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCommand", includeCommand)); // query parameter
            if (includeAffectedCompounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAffectedCompounds", includeAffectedCompounds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobId)));
        }

        /// <summary>
        /// Get job information and its current state and progress (if available). Get job information and its current state and progress (if available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be returned</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of JobId</returns>
        public async System.Threading.Tasks.Task<JobId> GetJobAsync (string projectId, string jobId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
             ApiResponse<JobId> localVarResponse = await GetJobAsyncWithHttpInfo(projectId, jobId, includeState, includeCommand, includeAffectedCompounds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get job information and its current state and progress (if available). Get job information and its current state and progress (if available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="jobId">of the job to be returned</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobId>> GetJobAsyncWithHttpInfo (string projectId, string jobId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->GetJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ComputationsApi->GetJob");

            var localVarPath = "/api/projects/{projectId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (includeState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeState", includeState)); // query parameter
            if (includeCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCommand", includeCommand)); // query parameter
            if (includeAffectedCompounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAffectedCompounds", includeAffectedCompounds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobId)));
        }

        /// <summary>
        /// Request job configuration with given name. Request job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to return</param>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>JobSubmission</returns>
        public JobSubmission GetJobConfig (string name, bool? includeConfigMap = null)
        {
             ApiResponse<JobSubmission> localVarResponse = GetJobConfigWithHttpInfo(name, includeConfigMap);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request job configuration with given name. Request job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to return</param>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>ApiResponse of JobSubmission</returns>
        public ApiResponse< JobSubmission > GetJobConfigWithHttpInfo (string name, bool? includeConfigMap = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ComputationsApi->GetJobConfig");

            var localVarPath = "/api/job-configs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (includeConfigMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeConfigMap", includeConfigMap)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobSubmission)));
        }

        /// <summary>
        /// Request job configuration with given name. Request job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to return</param>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>Task of JobSubmission</returns>
        public async System.Threading.Tasks.Task<JobSubmission> GetJobConfigAsync (string name, bool? includeConfigMap = null)
        {
             ApiResponse<JobSubmission> localVarResponse = await GetJobConfigAsyncWithHttpInfo(name, includeConfigMap);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request job configuration with given name. Request job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the job-config to return</param>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobSubmission)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobSubmission>> GetJobConfigAsyncWithHttpInfo (string name, bool? includeConfigMap = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ComputationsApi->GetJobConfig");

            var localVarPath = "/api/job-configs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (includeConfigMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeConfigMap", includeConfigMap)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobSubmission>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobSubmission) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobSubmission)));
        }

        /// <summary>
        /// Request all available job configurations Request all available job configurations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>List&lt;JobSubmission&gt;</returns>
        public List<JobSubmission> GetJobConfigs (bool? includeConfigMap = null)
        {
             ApiResponse<List<JobSubmission>> localVarResponse = GetJobConfigsWithHttpInfo(includeConfigMap);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request all available job configurations Request all available job configurations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;JobSubmission&gt;</returns>
        public ApiResponse< List<JobSubmission> > GetJobConfigsWithHttpInfo (bool? includeConfigMap = null)
        {

            var localVarPath = "/api/job-configs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeConfigMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeConfigMap", includeConfigMap)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobConfigs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobSubmission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobSubmission>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobSubmission>)));
        }

        /// <summary>
        /// Request all available job configurations Request all available job configurations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>Task of List&lt;JobSubmission&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobSubmission>> GetJobConfigsAsync (bool? includeConfigMap = null)
        {
             ApiResponse<List<JobSubmission>> localVarResponse = await GetJobConfigsAsyncWithHttpInfo(includeConfigMap);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request all available job configurations Request all available job configurations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeConfigMap">if true the generic configmap will be part of the output (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;JobSubmission&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobSubmission>>> GetJobConfigsAsyncWithHttpInfo (bool? includeConfigMap = null)
        {

            var localVarPath = "/api/job-configs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeConfigMap != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeConfigMap", includeConfigMap)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobConfigs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobSubmission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobSubmission>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobSubmission>)));
        }

        /// <summary>
        /// Get job information and its current state and progress (if available). Get job information and its current state and progress (if available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)</param>
        /// <param name="includeCommand">include job commands. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>List&lt;JobId&gt;</returns>
        public List<JobId> GetJobs (string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
             ApiResponse<List<JobId>> localVarResponse = GetJobsWithHttpInfo(projectId, includeState, includeCommand, includeAffectedCompounds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get job information and its current state and progress (if available). Get job information and its current state and progress (if available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)</param>
        /// <param name="includeCommand">include job commands. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;JobId&gt;</returns>
        public ApiResponse< List<JobId> > GetJobsWithHttpInfo (string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->GetJobs");

            var localVarPath = "/api/projects/{projectId}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (includeState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeState", includeState)); // query parameter
            if (includeCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCommand", includeCommand)); // query parameter
            if (includeAffectedCompounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAffectedCompounds", includeAffectedCompounds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobId>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobId>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobId>)));
        }

        /// <summary>
        /// Get job information and its current state and progress (if available). Get job information and its current state and progress (if available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)</param>
        /// <param name="includeCommand">include job commands. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of List&lt;JobId&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobId>> GetJobsAsync (string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
             ApiResponse<List<JobId>> localVarResponse = await GetJobsAsyncWithHttpInfo(projectId, includeState, includeCommand, includeAffectedCompounds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get job information and its current state and progress (if available). Get job information and its current state and progress (if available).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)</param>
        /// <param name="includeCommand">include job commands. (optional, default to false)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;JobId&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobId>>> GetJobsAsyncWithHttpInfo (string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->GetJobs");

            var localVarPath = "/api/projects/{projectId}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (includeState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeState", includeState)); // query parameter
            if (includeCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCommand", includeCommand)); // query parameter
            if (includeAffectedCompounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAffectedCompounds", includeAffectedCompounds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobId>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobId>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobId>)));
        }

        /// <summary>
        /// Add new job configuration with given name. Add new job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">to add</param>
        /// <param name="name">name of the job-config to add</param>
        /// <param name="overrideExisting"> (optional, default to false)</param>
        /// <returns>string</returns>
        public string PostJobConfig (JobSubmission body, string name, bool? overrideExisting = null)
        {
             ApiResponse<string> localVarResponse = PostJobConfigWithHttpInfo(body, name, overrideExisting);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new job configuration with given name. Add new job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">to add</param>
        /// <param name="name">name of the job-config to add</param>
        /// <param name="overrideExisting"> (optional, default to false)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostJobConfigWithHttpInfo (JobSubmission body, string name, bool? overrideExisting = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ComputationsApi->PostJobConfig");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ComputationsApi->PostJobConfig");

            var localVarPath = "/api/job-configs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (overrideExisting != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overrideExisting", overrideExisting)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostJobConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add new job configuration with given name. Add new job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">to add</param>
        /// <param name="name">name of the job-config to add</param>
        /// <param name="overrideExisting"> (optional, default to false)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostJobConfigAsync (JobSubmission body, string name, bool? overrideExisting = null)
        {
             ApiResponse<string> localVarResponse = await PostJobConfigAsyncWithHttpInfo(body, name, overrideExisting);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new job configuration with given name. Add new job configuration with given name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">to add</param>
        /// <param name="name">name of the job-config to add</param>
        /// <param name="overrideExisting"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostJobConfigAsyncWithHttpInfo (JobSubmission body, string name, bool? overrideExisting = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ComputationsApi->PostJobConfig");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ComputationsApi->PostJobConfig");

            var localVarPath = "/api/job-configs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (overrideExisting != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overrideExisting", overrideExisting)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostJobConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Start computation for given compounds and with given parameters. Start computation for given compounds and with given parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration of the job that will be submitted of the job to be returned</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>JobId</returns>
        public JobId StartJob (JobSubmission body, string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
             ApiResponse<JobId> localVarResponse = StartJobWithHttpInfo(body, projectId, includeState, includeCommand, includeAffectedCompounds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start computation for given compounds and with given parameters. Start computation for given compounds and with given parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration of the job that will be submitted of the job to be returned</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>ApiResponse of JobId</returns>
        public ApiResponse< JobId > StartJobWithHttpInfo (JobSubmission body, string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ComputationsApi->StartJob");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->StartJob");

            var localVarPath = "/api/projects/{projectId}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (includeState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeState", includeState)); // query parameter
            if (includeCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCommand", includeCommand)); // query parameter
            if (includeAffectedCompounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAffectedCompounds", includeAffectedCompounds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobId)));
        }

        /// <summary>
        /// Start computation for given compounds and with given parameters. Start computation for given compounds and with given parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration of the job that will be submitted of the job to be returned</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of JobId</returns>
        public async System.Threading.Tasks.Task<JobId> StartJobAsync (JobSubmission body, string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
             ApiResponse<JobId> localVarResponse = await StartJobAsyncWithHttpInfo(body, projectId, includeState, includeCommand, includeAffectedCompounds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start computation for given compounds and with given parameters. Start computation for given compounds and with given parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration of the job that will be submitted of the job to be returned</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobId>> StartJobAsyncWithHttpInfo (JobSubmission body, string projectId, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ComputationsApi->StartJob");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->StartJob");

            var localVarPath = "/api/projects/{projectId}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (includeState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeState", includeState)); // query parameter
            if (includeCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCommand", includeCommand)); // query parameter
            if (includeAffectedCompounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAffectedCompounds", includeAffectedCompounds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobId)));
        }

        /// <summary>
        /// Start computation for given compounds and with parameters from a stored job-config. Start computation for given compounds and with parameters from a stored job-config.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">compound ids to be computed</param>
        /// <param name="jobConfigName">name if the config to be used</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="recompute">enable or disable recompute. If null the stored value will be used. (optional)</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>JobId</returns>
        public JobId StartJobFromConfig (List<string> body, string jobConfigName, string projectId, bool? recompute = null, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
             ApiResponse<JobId> localVarResponse = StartJobFromConfigWithHttpInfo(body, jobConfigName, projectId, recompute, includeState, includeCommand, includeAffectedCompounds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start computation for given compounds and with parameters from a stored job-config. Start computation for given compounds and with parameters from a stored job-config.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">compound ids to be computed</param>
        /// <param name="jobConfigName">name if the config to be used</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="recompute">enable or disable recompute. If null the stored value will be used. (optional)</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>ApiResponse of JobId</returns>
        public ApiResponse< JobId > StartJobFromConfigWithHttpInfo (List<string> body, string jobConfigName, string projectId, bool? recompute = null, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ComputationsApi->StartJobFromConfig");
            // verify the required parameter 'jobConfigName' is set
            if (jobConfigName == null)
                throw new ApiException(400, "Missing required parameter 'jobConfigName' when calling ComputationsApi->StartJobFromConfig");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->StartJobFromConfig");

            var localVarPath = "/api/projects/{projectId}/jobs-from-config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (jobConfigName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobConfigName", jobConfigName)); // query parameter
            if (recompute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recompute", recompute)); // query parameter
            if (includeState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeState", includeState)); // query parameter
            if (includeCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCommand", includeCommand)); // query parameter
            if (includeAffectedCompounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAffectedCompounds", includeAffectedCompounds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartJobFromConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobId)));
        }

        /// <summary>
        /// Start computation for given compounds and with parameters from a stored job-config. Start computation for given compounds and with parameters from a stored job-config.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">compound ids to be computed</param>
        /// <param name="jobConfigName">name if the config to be used</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="recompute">enable or disable recompute. If null the stored value will be used. (optional)</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of JobId</returns>
        public async System.Threading.Tasks.Task<JobId> StartJobFromConfigAsync (List<string> body, string jobConfigName, string projectId, bool? recompute = null, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
             ApiResponse<JobId> localVarResponse = await StartJobFromConfigAsyncWithHttpInfo(body, jobConfigName, projectId, recompute, includeState, includeCommand, includeAffectedCompounds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start computation for given compounds and with parameters from a stored job-config. Start computation for given compounds and with parameters from a stored job-config.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">compound ids to be computed</param>
        /// <param name="jobConfigName">name if the config to be used</param>
        /// <param name="projectId">project-space to run jobs on</param>
        /// <param name="recompute">enable or disable recompute. If null the stored value will be used. (optional)</param>
        /// <param name="includeState">include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)</param>
        /// <param name="includeCommand">include job command. (optional, default to true)</param>
        /// <param name="includeAffectedCompounds">include list of compound ids affected by this job (if available) (optional, default to false)</param>
        /// <returns>Task of ApiResponse (JobId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobId>> StartJobFromConfigAsyncWithHttpInfo (List<string> body, string jobConfigName, string projectId, bool? recompute = null, bool? includeState = null, bool? includeCommand = null, bool? includeAffectedCompounds = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ComputationsApi->StartJobFromConfig");
            // verify the required parameter 'jobConfigName' is set
            if (jobConfigName == null)
                throw new ApiException(400, "Missing required parameter 'jobConfigName' when calling ComputationsApi->StartJobFromConfig");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ComputationsApi->StartJobFromConfig");

            var localVarPath = "/api/projects/{projectId}/jobs-from-config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (jobConfigName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobConfigName", jobConfigName)); // query parameter
            if (recompute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recompute", recompute)); // query parameter
            if (includeState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeState", includeState)); // query parameter
            if (includeCommand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCommand", includeCommand)); // query parameter
            if (includeAffectedCompounds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAffectedCompounds", includeAffectedCompounds)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartJobFromConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobId)));
        }

    }
}
