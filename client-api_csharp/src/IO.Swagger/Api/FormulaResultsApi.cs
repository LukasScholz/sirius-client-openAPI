/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFormulaResultsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </summary>
        /// <remarks>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>CompoundClasses</returns>
        CompoundClasses GetBestMatchingCanopusPredictions (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </summary>
        /// <remarks>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of CompoundClasses</returns>
        ApiResponse<CompoundClasses> GetBestMatchingCanopusPredictionsWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </summary>
        /// <remarks>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>CanopusPredictions</returns>
        CanopusPredictions GetCanopusPredictions (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </summary>
        /// <remarks>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of CanopusPredictions</returns>
        ApiResponse<CanopusPredictions> GetCanopusPredictionsWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </summary>
        /// <remarks>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>List&lt;double?&gt;</returns>
        List<double?> GetFingerprintPrediction (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </summary>
        /// <remarks>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of List&lt;double?&gt;</returns>
        ApiResponse<List<double?>> GetFingerprintPredictionWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information.
        /// </summary>
        /// <remarks>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainers (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainers (optional, default to false)</param>
        /// <returns>List&lt;FormulaResultContainer&gt;</returns>
        List<FormulaResultContainer> GetFormulaIds (string projectId, string compoundId, bool? resultOverview = null, bool? formulaCandidate = null);

        /// <summary>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information.
        /// </summary>
        /// <remarks>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainers (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainers (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;FormulaResultContainer&gt;</returns>
        ApiResponse<List<FormulaResultContainer>> GetFormulaIdsWithHttpInfo (string projectId, string compoundId, bool? resultOverview = null, bool? formulaCandidate = null);
        /// <summary>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.
        /// </summary>
        /// <remarks>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainer (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainer (optional, default to true)</param>
        /// <returns>FormulaResultContainer</returns>
        FormulaResultContainer GetFormulaResult (string projectId, string compoundId, string formulaId, bool? resultOverview = null, bool? formulaCandidate = null);

        /// <summary>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.
        /// </summary>
        /// <remarks>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainer (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainer (optional, default to true)</param>
        /// <returns>ApiResponse of FormulaResultContainer</returns>
        ApiResponse<FormulaResultContainer> GetFormulaResultWithHttpInfo (string projectId, string compoundId, string formulaId, bool? resultOverview = null, bool? formulaCandidate = null);
        /// <summary>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </summary>
        /// <remarks>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>FragmentationTree</returns>
        FragmentationTree GetFragTree (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </summary>
        /// <remarks>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of FragmentationTree</returns>
        ApiResponse<FragmentationTree> GetFragTreeWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
        /// </summary>
        /// <remarks>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>AnnotatedSpectrum</returns>
        AnnotatedSpectrum GetSimulatedIsotopePattern (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
        /// </summary>
        /// <remarks>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of AnnotatedSpectrum</returns>
        ApiResponse<AnnotatedSpectrum> GetSimulatedIsotopePatternWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.
        /// </summary>
        /// <remarks>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <param name="topK">retrieve only the top k StructureCandidates (optional, default to -1)</param>
        /// <returns>List&lt;StructureCandidate&gt;</returns>
        List<StructureCandidate> GetStructureCandidates (string projectId, string compoundId, string formulaId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null, int? topK = null);

        /// <summary>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.
        /// </summary>
        /// <remarks>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <param name="topK">retrieve only the top k StructureCandidates (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;StructureCandidate&gt;</returns>
        ApiResponse<List<StructureCandidate>> GetStructureCandidatesWithHttpInfo (string projectId, string compoundId, string formulaId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null, int? topK = null);
        /// <summary>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </summary>
        /// <remarks>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <returns>StructureCandidate</returns>
        StructureCandidate GetTopStructureCandidate (string projectId, string compoundId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null);

        /// <summary>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </summary>
        /// <remarks>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <returns>ApiResponse of StructureCandidate</returns>
        ApiResponse<StructureCandidate> GetTopStructureCandidateWithHttpInfo (string projectId, string compoundId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </summary>
        /// <remarks>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of CompoundClasses</returns>
        System.Threading.Tasks.Task<CompoundClasses> GetBestMatchingCanopusPredictionsAsync (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </summary>
        /// <remarks>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (CompoundClasses)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompoundClasses>> GetBestMatchingCanopusPredictionsAsyncWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </summary>
        /// <remarks>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of CanopusPredictions</returns>
        System.Threading.Tasks.Task<CanopusPredictions> GetCanopusPredictionsAsync (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </summary>
        /// <remarks>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (CanopusPredictions)</returns>
        System.Threading.Tasks.Task<ApiResponse<CanopusPredictions>> GetCanopusPredictionsAsyncWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </summary>
        /// <remarks>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of List&lt;double?&gt;</returns>
        System.Threading.Tasks.Task<List<double?>> GetFingerprintPredictionAsync (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </summary>
        /// <remarks>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (List&lt;double?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<double?>>> GetFingerprintPredictionAsyncWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information.
        /// </summary>
        /// <remarks>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainers (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainers (optional, default to false)</param>
        /// <returns>Task of List&lt;FormulaResultContainer&gt;</returns>
        System.Threading.Tasks.Task<List<FormulaResultContainer>> GetFormulaIdsAsync (string projectId, string compoundId, bool? resultOverview = null, bool? formulaCandidate = null);

        /// <summary>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information.
        /// </summary>
        /// <remarks>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainers (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainers (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;FormulaResultContainer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FormulaResultContainer>>> GetFormulaIdsAsyncWithHttpInfo (string projectId, string compoundId, bool? resultOverview = null, bool? formulaCandidate = null);
        /// <summary>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.
        /// </summary>
        /// <remarks>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainer (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainer (optional, default to true)</param>
        /// <returns>Task of FormulaResultContainer</returns>
        System.Threading.Tasks.Task<FormulaResultContainer> GetFormulaResultAsync (string projectId, string compoundId, string formulaId, bool? resultOverview = null, bool? formulaCandidate = null);

        /// <summary>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.
        /// </summary>
        /// <remarks>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainer (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainer (optional, default to true)</param>
        /// <returns>Task of ApiResponse (FormulaResultContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormulaResultContainer>> GetFormulaResultAsyncWithHttpInfo (string projectId, string compoundId, string formulaId, bool? resultOverview = null, bool? formulaCandidate = null);
        /// <summary>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </summary>
        /// <remarks>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of FragmentationTree</returns>
        System.Threading.Tasks.Task<FragmentationTree> GetFragTreeAsync (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </summary>
        /// <remarks>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (FragmentationTree)</returns>
        System.Threading.Tasks.Task<ApiResponse<FragmentationTree>> GetFragTreeAsyncWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
        /// </summary>
        /// <remarks>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of AnnotatedSpectrum</returns>
        System.Threading.Tasks.Task<AnnotatedSpectrum> GetSimulatedIsotopePatternAsync (string projectId, string compoundId, string formulaId);

        /// <summary>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
        /// </summary>
        /// <remarks>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (AnnotatedSpectrum)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotatedSpectrum>> GetSimulatedIsotopePatternAsyncWithHttpInfo (string projectId, string compoundId, string formulaId);
        /// <summary>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.
        /// </summary>
        /// <remarks>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <param name="topK">retrieve only the top k StructureCandidates (optional, default to -1)</param>
        /// <returns>Task of List&lt;StructureCandidate&gt;</returns>
        System.Threading.Tasks.Task<List<StructureCandidate>> GetStructureCandidatesAsync (string projectId, string compoundId, string formulaId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null, int? topK = null);

        /// <summary>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.
        /// </summary>
        /// <remarks>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <param name="topK">retrieve only the top k StructureCandidates (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (List&lt;StructureCandidate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StructureCandidate>>> GetStructureCandidatesAsyncWithHttpInfo (string projectId, string compoundId, string formulaId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null, int? topK = null);
        /// <summary>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </summary>
        /// <remarks>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <returns>Task of StructureCandidate</returns>
        System.Threading.Tasks.Task<StructureCandidate> GetTopStructureCandidateAsync (string projectId, string compoundId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null);

        /// <summary>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </summary>
        /// <remarks>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <returns>Task of ApiResponse (StructureCandidate)</returns>
        System.Threading.Tasks.Task<ApiResponse<StructureCandidate>> GetTopStructureCandidateAsyncWithHttpInfo (string projectId, string compoundId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FormulaResultsApi : IFormulaResultsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FormulaResultsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FormulaResultsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormulaResultsApi"/> class
        /// </summary>
        /// <returns></returns>
        public FormulaResultsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormulaResultsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FormulaResultsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology, Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>CompoundClasses</returns>
        public CompoundClasses GetBestMatchingCanopusPredictions (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<CompoundClasses> localVarResponse = GetBestMatchingCanopusPredictionsWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology, Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of CompoundClasses</returns>
        public ApiResponse< CompoundClasses > GetBestMatchingCanopusPredictionsWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetBestMatchingCanopusPredictions");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetBestMatchingCanopusPredictions");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetBestMatchingCanopusPredictions");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/best-canopus-predictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBestMatchingCanopusPredictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompoundClasses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompoundClasses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompoundClasses)));
        }

        /// <summary>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology, Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of CompoundClasses</returns>
        public async System.Threading.Tasks.Task<CompoundClasses> GetBestMatchingCanopusPredictionsAsync (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<CompoundClasses> localVarResponse = await GetBestMatchingCanopusPredictionsAsyncWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology, Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (CompoundClasses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompoundClasses>> GetBestMatchingCanopusPredictionsAsyncWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetBestMatchingCanopusPredictions");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetBestMatchingCanopusPredictions");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetBestMatchingCanopusPredictions");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/best-canopus-predictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBestMatchingCanopusPredictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompoundClasses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CompoundClasses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompoundClasses)));
        }

        /// <summary>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities, All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>CanopusPredictions</returns>
        public CanopusPredictions GetCanopusPredictions (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<CanopusPredictions> localVarResponse = GetCanopusPredictionsWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities, All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of CanopusPredictions</returns>
        public ApiResponse< CanopusPredictions > GetCanopusPredictionsWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetCanopusPredictions");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetCanopusPredictions");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetCanopusPredictions");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/canopus-predictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCanopusPredictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CanopusPredictions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CanopusPredictions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CanopusPredictions)));
        }

        /// <summary>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities, All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of CanopusPredictions</returns>
        public async System.Threading.Tasks.Task<CanopusPredictions> GetCanopusPredictionsAsync (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<CanopusPredictions> localVarResponse = await GetCanopusPredictionsAsyncWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities, All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (CanopusPredictions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CanopusPredictions>> GetCanopusPredictionsAsyncWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetCanopusPredictions");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetCanopusPredictions");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetCanopusPredictions");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/canopus-predictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCanopusPredictions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CanopusPredictions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CanopusPredictions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CanopusPredictions)));
        }

        /// <summary>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes. Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>List&lt;double?&gt;</returns>
        public List<double?> GetFingerprintPrediction (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<List<double?>> localVarResponse = GetFingerprintPredictionWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes. Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of List&lt;double?&gt;</returns>
        public ApiResponse< List<double?> > GetFingerprintPredictionWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetFingerprintPrediction");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetFingerprintPrediction");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetFingerprintPrediction");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/fingerprint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFingerprintPrediction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<double?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<double?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<double?>)));
        }

        /// <summary>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes. Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of List&lt;double?&gt;</returns>
        public async System.Threading.Tasks.Task<List<double?>> GetFingerprintPredictionAsync (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<List<double?>> localVarResponse = await GetFingerprintPredictionAsyncWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes. Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (List&lt;double?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<double?>>> GetFingerprintPredictionAsyncWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetFingerprintPrediction");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetFingerprintPrediction");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetFingerprintPrediction");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/fingerprint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFingerprintPrediction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<double?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<double?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<double?>)));
        }

        /// <summary>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information. List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainers (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainers (optional, default to false)</param>
        /// <returns>List&lt;FormulaResultContainer&gt;</returns>
        public List<FormulaResultContainer> GetFormulaIds (string projectId, string compoundId, bool? resultOverview = null, bool? formulaCandidate = null)
        {
             ApiResponse<List<FormulaResultContainer>> localVarResponse = GetFormulaIdsWithHttpInfo(projectId, compoundId, resultOverview, formulaCandidate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information. List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainers (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainers (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;FormulaResultContainer&gt;</returns>
        public ApiResponse< List<FormulaResultContainer> > GetFormulaIdsWithHttpInfo (string projectId, string compoundId, bool? resultOverview = null, bool? formulaCandidate = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetFormulaIds");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetFormulaIds");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (resultOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resultOverview", resultOverview)); // query parameter
            if (formulaCandidate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "formulaCandidate", formulaCandidate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormulaIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FormulaResultContainer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FormulaResultContainer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FormulaResultContainer>)));
        }

        /// <summary>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information. List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainers (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainers (optional, default to false)</param>
        /// <returns>Task of List&lt;FormulaResultContainer&gt;</returns>
        public async System.Threading.Tasks.Task<List<FormulaResultContainer>> GetFormulaIdsAsync (string projectId, string compoundId, bool? resultOverview = null, bool? formulaCandidate = null)
        {
             ApiResponse<List<FormulaResultContainer>> localVarResponse = await GetFormulaIdsAsyncWithHttpInfo(projectId, compoundId, resultOverview, formulaCandidate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of all FormulaResultContainers available for this compound/feature with minimal information. List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainers (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainers (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;FormulaResultContainer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FormulaResultContainer>>> GetFormulaIdsAsyncWithHttpInfo (string projectId, string compoundId, bool? resultOverview = null, bool? formulaCandidate = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetFormulaIds");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetFormulaIds");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (resultOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resultOverview", resultOverview)); // query parameter
            if (formulaCandidate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "formulaCandidate", formulaCandidate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormulaIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FormulaResultContainer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FormulaResultContainer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FormulaResultContainer>)));
        }

        /// <summary>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information. FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainer (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainer (optional, default to true)</param>
        /// <returns>FormulaResultContainer</returns>
        public FormulaResultContainer GetFormulaResult (string projectId, string compoundId, string formulaId, bool? resultOverview = null, bool? formulaCandidate = null)
        {
             ApiResponse<FormulaResultContainer> localVarResponse = GetFormulaResultWithHttpInfo(projectId, compoundId, formulaId, resultOverview, formulaCandidate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information. FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainer (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainer (optional, default to true)</param>
        /// <returns>ApiResponse of FormulaResultContainer</returns>
        public ApiResponse< FormulaResultContainer > GetFormulaResultWithHttpInfo (string projectId, string compoundId, string formulaId, bool? resultOverview = null, bool? formulaCandidate = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetFormulaResult");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetFormulaResult");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetFormulaResult");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter
            if (resultOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resultOverview", resultOverview)); // query parameter
            if (formulaCandidate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "formulaCandidate", formulaCandidate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormulaResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormulaResultContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormulaResultContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormulaResultContainer)));
        }

        /// <summary>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information. FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainer (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainer (optional, default to true)</param>
        /// <returns>Task of FormulaResultContainer</returns>
        public async System.Threading.Tasks.Task<FormulaResultContainer> GetFormulaResultAsync (string projectId, string compoundId, string formulaId, bool? resultOverview = null, bool? formulaCandidate = null)
        {
             ApiResponse<FormulaResultContainer> localVarResponse = await GetFormulaResultAsyncWithHttpInfo(projectId, compoundId, formulaId, resultOverview, formulaCandidate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information. FormulaResultContainers for the given &#x27;formulaId&#x27; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="resultOverview">add ResultOverview to the FormulaResultContainer (optional, default to true)</param>
        /// <param name="formulaCandidate">add extended formula candidate information to the FormulaResultContainer (optional, default to true)</param>
        /// <returns>Task of ApiResponse (FormulaResultContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormulaResultContainer>> GetFormulaResultAsyncWithHttpInfo (string projectId, string compoundId, string formulaId, bool? resultOverview = null, bool? formulaCandidate = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetFormulaResult");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetFormulaResult");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetFormulaResult");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter
            if (resultOverview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resultOverview", resultOverview)); // query parameter
            if (formulaCandidate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "formulaCandidate", formulaCandidate)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormulaResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormulaResultContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FormulaResultContainer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FormulaResultContainer)));
        }

        /// <summary>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore). Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>FragmentationTree</returns>
        public FragmentationTree GetFragTree (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<FragmentationTree> localVarResponse = GetFragTreeWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore). Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of FragmentationTree</returns>
        public ApiResponse< FragmentationTree > GetFragTreeWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetFragTree");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetFragTree");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetFragTree");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/tree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragTree", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FragmentationTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FragmentationTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FragmentationTree)));
        }

        /// <summary>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore). Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of FragmentationTree</returns>
        public async System.Threading.Tasks.Task<FragmentationTree> GetFragTreeAsync (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<FragmentationTree> localVarResponse = await GetFragTreeAsyncWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore). Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (FragmentationTree)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FragmentationTree>> GetFragTreeAsyncWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetFragTree");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetFragTree");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetFragTree");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/tree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFragTree", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FragmentationTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FragmentationTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FragmentationTree)));
        }

        /// <summary>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier. Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>AnnotatedSpectrum</returns>
        public AnnotatedSpectrum GetSimulatedIsotopePattern (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<AnnotatedSpectrum> localVarResponse = GetSimulatedIsotopePatternWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier. Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>ApiResponse of AnnotatedSpectrum</returns>
        public ApiResponse< AnnotatedSpectrum > GetSimulatedIsotopePatternWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetSimulatedIsotopePattern");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetSimulatedIsotopePattern");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetSimulatedIsotopePattern");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/isotope-pattern";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulatedIsotopePattern", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotatedSpectrum>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotatedSpectrum) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotatedSpectrum)));
        }

        /// <summary>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier. Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of AnnotatedSpectrum</returns>
        public async System.Threading.Tasks.Task<AnnotatedSpectrum> GetSimulatedIsotopePatternAsync (string projectId, string compoundId, string formulaId)
        {
             ApiResponse<AnnotatedSpectrum> localVarResponse = await GetSimulatedIsotopePatternAsyncWithHttpInfo(projectId, compoundId, formulaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns simulated isotope pattern (SIRIUS) for the given formula result identifier. Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <returns>Task of ApiResponse (AnnotatedSpectrum)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotatedSpectrum>> GetSimulatedIsotopePatternAsyncWithHttpInfo (string projectId, string compoundId, string formulaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetSimulatedIsotopePattern");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetSimulatedIsotopePattern");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetSimulatedIsotopePattern");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/isotope-pattern";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimulatedIsotopePattern", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotatedSpectrum>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AnnotatedSpectrum) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotatedSpectrum)));
        }

        /// <summary>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information. List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <param name="topK">retrieve only the top k StructureCandidates (optional, default to -1)</param>
        /// <returns>List&lt;StructureCandidate&gt;</returns>
        public List<StructureCandidate> GetStructureCandidates (string projectId, string compoundId, string formulaId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null, int? topK = null)
        {
             ApiResponse<List<StructureCandidate>> localVarResponse = GetStructureCandidatesWithHttpInfo(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information. List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <param name="topK">retrieve only the top k StructureCandidates (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;StructureCandidate&gt;</returns>
        public ApiResponse< List<StructureCandidate> > GetStructureCandidatesWithHttpInfo (string projectId, string compoundId, string formulaId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null, int? topK = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetStructureCandidates");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetStructureCandidates");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetStructureCandidates");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/structures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter
            if (fingerprint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fingerprint", fingerprint)); // query parameter
            if (dbLinks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbLinks", dbLinks)); // query parameter
            if (pubMedIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pubMedIds", pubMedIds)); // query parameter
            if (topK != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topK", topK)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStructureCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StructureCandidate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<StructureCandidate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StructureCandidate>)));
        }

        /// <summary>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information. List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <param name="topK">retrieve only the top k StructureCandidates (optional, default to -1)</param>
        /// <returns>Task of List&lt;StructureCandidate&gt;</returns>
        public async System.Threading.Tasks.Task<List<StructureCandidate>> GetStructureCandidatesAsync (string projectId, string compoundId, string formulaId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null, int? topK = null)
        {
             ApiResponse<List<StructureCandidate>> localVarResponse = await GetStructureCandidatesAsyncWithHttpInfo(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information. List of StructureCandidates the given &#x27;formulaId&#x27; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="formulaId">identifier of the requested formula result</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <param name="topK">retrieve only the top k StructureCandidates (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (List&lt;StructureCandidate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StructureCandidate>>> GetStructureCandidatesAsyncWithHttpInfo (string projectId, string compoundId, string formulaId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null, int? topK = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetStructureCandidates");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetStructureCandidates");
            // verify the required parameter 'formulaId' is set
            if (formulaId == null)
                throw new ApiException(400, "Missing required parameter 'formulaId' when calling FormulaResultsApi->GetStructureCandidates");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/structures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (formulaId != null) localVarPathParams.Add("formulaId", this.Configuration.ApiClient.ParameterToString(formulaId)); // path parameter
            if (fingerprint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fingerprint", fingerprint)); // query parameter
            if (dbLinks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbLinks", dbLinks)); // query parameter
            if (pubMedIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pubMedIds", pubMedIds)); // query parameter
            if (topK != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topK", topK)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStructureCandidates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StructureCandidate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<StructureCandidate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StructureCandidate>)));
        }

        /// <summary>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId). Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <returns>StructureCandidate</returns>
        public StructureCandidate GetTopStructureCandidate (string projectId, string compoundId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null)
        {
             ApiResponse<StructureCandidate> localVarResponse = GetTopStructureCandidateWithHttpInfo(projectId, compoundId, fingerprint, dbLinks, pubMedIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId). Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <returns>ApiResponse of StructureCandidate</returns>
        public ApiResponse< StructureCandidate > GetTopStructureCandidateWithHttpInfo (string projectId, string compoundId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetTopStructureCandidate");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetTopStructureCandidate");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/top-structure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (fingerprint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fingerprint", fingerprint)); // query parameter
            if (dbLinks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbLinks", dbLinks)); // query parameter
            if (pubMedIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pubMedIds", pubMedIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopStructureCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StructureCandidate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StructureCandidate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StructureCandidate)));
        }

        /// <summary>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId). Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <returns>Task of StructureCandidate</returns>
        public async System.Threading.Tasks.Task<StructureCandidate> GetTopStructureCandidateAsync (string projectId, string compoundId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null)
        {
             ApiResponse<StructureCandidate> localVarResponse = await GetTopStructureCandidateAsyncWithHttpInfo(projectId, compoundId, fingerprint, dbLinks, pubMedIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId). Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">project-space to read from.</param>
        /// <param name="compoundId">compound/feature the formula result belongs to.</param>
        /// <param name="fingerprint">add molecular fingerprint to StructureCandidates (optional, default to false)</param>
        /// <param name="dbLinks">add dbLinks to StructureCandidates (optional, default to false)</param>
        /// <param name="pubMedIds">add PubMedIds (citation count) to StructureCandidates (optional, default to false)</param>
        /// <returns>Task of ApiResponse (StructureCandidate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StructureCandidate>> GetTopStructureCandidateAsyncWithHttpInfo (string projectId, string compoundId, bool? fingerprint = null, bool? dbLinks = null, bool? pubMedIds = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling FormulaResultsApi->GetTopStructureCandidate");
            // verify the required parameter 'compoundId' is set
            if (compoundId == null)
                throw new ApiException(400, "Missing required parameter 'compoundId' when calling FormulaResultsApi->GetTopStructureCandidate");

            var localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/top-structure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (compoundId != null) localVarPathParams.Add("compoundId", this.Configuration.ApiClient.ParameterToString(compoundId)); // path parameter
            if (fingerprint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fingerprint", fingerprint)); // query parameter
            if (dbLinks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbLinks", dbLinks)); // query parameter
            if (pubMedIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pubMedIds", pubMedIds)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTopStructureCandidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StructureCandidate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StructureCandidate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StructureCandidate)));
        }

    }
}
