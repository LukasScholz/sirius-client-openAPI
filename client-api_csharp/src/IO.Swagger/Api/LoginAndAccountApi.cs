/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILoginAndAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get information about the account currently logged in.
        /// </summary>
        /// <remarks>
        /// Get information about the account currently logged in. Fails if not logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>AccountInfo</returns>
        AccountInfo GetAccountInfo (bool? includeSubs = null);

        /// <summary>
        /// Get information about the account currently logged in.
        /// </summary>
        /// <remarks>
        /// Get information about the account currently logged in. Fails if not logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        ApiResponse<AccountInfo> GetAccountInfoWithHttpInfo (bool? includeSubs = null);
        /// <summary>
        /// Get SignUp URL (For signUp via web browser)
        /// </summary>
        /// <remarks>
        /// Get SignUp URL (For signUp via web browser)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string GetSignUpURL ();

        /// <summary>
        /// Get SignUp URL (For signUp via web browser)
        /// </summary>
        /// <remarks>
        /// Get SignUp URL (For signUp via web browser)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetSignUpURLWithHttpInfo ();
        /// <summary>
        /// Get available subscriptions of the account currently logged in.
        /// </summary>
        /// <remarks>
        /// Get available subscriptions of the account currently logged in. Fails if not logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Subscription&gt;</returns>
        List<Subscription> GetSubscriptions ();

        /// <summary>
        /// Get available subscriptions of the account currently logged in.
        /// </summary>
        /// <remarks>
        /// Get available subscriptions of the account currently logged in. Fails if not logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Subscription&gt;</returns>
        ApiResponse<List<Subscription>> GetSubscriptionsWithHttpInfo ();
        /// <summary>
        /// Check if a user is logged in.
        /// </summary>
        /// <remarks>
        /// Check if a user is logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? IsLoggedIn ();

        /// <summary>
        /// Check if a user is logged in.
        /// </summary>
        /// <remarks>
        /// Check if a user is logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> IsLoggedInWithHttpInfo ();
        /// <summary>
        /// Login into SIRIUS web services.
        /// </summary>
        /// <remarks>
        /// Login into SIRIUS web services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">used to log in.</param>
        /// <param name="acceptTerms"></param>
        /// <param name="failWhenLoggedIn">if true request fails if an active login already exists. (optional, default to false)</param>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>AccountInfo</returns>
        AccountInfo Login (AccountCredentials body, bool? acceptTerms, bool? failWhenLoggedIn = null, bool? includeSubs = null);

        /// <summary>
        /// Login into SIRIUS web services.
        /// </summary>
        /// <remarks>
        /// Login into SIRIUS web services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">used to log in.</param>
        /// <param name="acceptTerms"></param>
        /// <param name="failWhenLoggedIn">if true request fails if an active login already exists. (optional, default to false)</param>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        ApiResponse<AccountInfo> LoginWithHttpInfo (AccountCredentials body, bool? acceptTerms, bool? failWhenLoggedIn = null, bool? includeSubs = null);
        /// <summary>
        /// Logout from SIRIUS web services.
        /// </summary>
        /// <remarks>
        /// Logout from SIRIUS web services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Logout ();

        /// <summary>
        /// Logout from SIRIUS web services.
        /// </summary>
        /// <remarks>
        /// Logout from SIRIUS web services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogoutWithHttpInfo ();
        /// <summary>
        /// Open SignUp window in system browser and return signUp link.
        /// </summary>
        /// <remarks>
        /// Open SignUp window in system browser and return signUp link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string SignUp ();

        /// <summary>
        /// Open SignUp window in system browser and return signUp link.
        /// </summary>
        /// <remarks>
        /// Open SignUp window in system browser and return signUp link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SignUpWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get information about the account currently logged in.
        /// </summary>
        /// <remarks>
        /// Get information about the account currently logged in. Fails if not logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<AccountInfo> GetAccountInfoAsync (bool? includeSubs = null);

        /// <summary>
        /// Get information about the account currently logged in.
        /// </summary>
        /// <remarks>
        /// Get information about the account currently logged in. Fails if not logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfo>> GetAccountInfoAsyncWithHttpInfo (bool? includeSubs = null);
        /// <summary>
        /// Get SignUp URL (For signUp via web browser)
        /// </summary>
        /// <remarks>
        /// Get SignUp URL (For signUp via web browser)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetSignUpURLAsync ();

        /// <summary>
        /// Get SignUp URL (For signUp via web browser)
        /// </summary>
        /// <remarks>
        /// Get SignUp URL (For signUp via web browser)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetSignUpURLAsyncWithHttpInfo ();
        /// <summary>
        /// Get available subscriptions of the account currently logged in.
        /// </summary>
        /// <remarks>
        /// Get available subscriptions of the account currently logged in. Fails if not logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Subscription&gt;</returns>
        System.Threading.Tasks.Task<List<Subscription>> GetSubscriptionsAsync ();

        /// <summary>
        /// Get available subscriptions of the account currently logged in.
        /// </summary>
        /// <remarks>
        /// Get available subscriptions of the account currently logged in. Fails if not logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Subscription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subscription>>> GetSubscriptionsAsyncWithHttpInfo ();
        /// <summary>
        /// Check if a user is logged in.
        /// </summary>
        /// <remarks>
        /// Check if a user is logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> IsLoggedInAsync ();

        /// <summary>
        /// Check if a user is logged in.
        /// </summary>
        /// <remarks>
        /// Check if a user is logged in.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> IsLoggedInAsyncWithHttpInfo ();
        /// <summary>
        /// Login into SIRIUS web services.
        /// </summary>
        /// <remarks>
        /// Login into SIRIUS web services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">used to log in.</param>
        /// <param name="acceptTerms"></param>
        /// <param name="failWhenLoggedIn">if true request fails if an active login already exists. (optional, default to false)</param>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<AccountInfo> LoginAsync (AccountCredentials body, bool? acceptTerms, bool? failWhenLoggedIn = null, bool? includeSubs = null);

        /// <summary>
        /// Login into SIRIUS web services.
        /// </summary>
        /// <remarks>
        /// Login into SIRIUS web services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">used to log in.</param>
        /// <param name="acceptTerms"></param>
        /// <param name="failWhenLoggedIn">if true request fails if an active login already exists. (optional, default to false)</param>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfo>> LoginAsyncWithHttpInfo (AccountCredentials body, bool? acceptTerms, bool? failWhenLoggedIn = null, bool? includeSubs = null);
        /// <summary>
        /// Logout from SIRIUS web services.
        /// </summary>
        /// <remarks>
        /// Logout from SIRIUS web services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogoutAsync ();

        /// <summary>
        /// Logout from SIRIUS web services.
        /// </summary>
        /// <remarks>
        /// Logout from SIRIUS web services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogoutAsyncWithHttpInfo ();
        /// <summary>
        /// Open SignUp window in system browser and return signUp link.
        /// </summary>
        /// <remarks>
        /// Open SignUp window in system browser and return signUp link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SignUpAsync ();

        /// <summary>
        /// Open SignUp window in system browser and return signUp link.
        /// </summary>
        /// <remarks>
        /// Open SignUp window in system browser and return signUp link.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SignUpAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LoginAndAccountApi : ILoginAndAccountApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginAndAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoginAndAccountApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginAndAccountApi"/> class
        /// </summary>
        /// <returns></returns>
        public LoginAndAccountApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginAndAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoginAndAccountApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get information about the account currently logged in. Get information about the account currently logged in. Fails if not logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>AccountInfo</returns>
        public AccountInfo GetAccountInfo (bool? includeSubs = null)
        {
             ApiResponse<AccountInfo> localVarResponse = GetAccountInfoWithHttpInfo(includeSubs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the account currently logged in. Get information about the account currently logged in. Fails if not logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        public ApiResponse< AccountInfo > GetAccountInfoWithHttpInfo (bool? includeSubs = null)
        {

            var localVarPath = "/api/account/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeSubs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSubs", includeSubs)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
        }

        /// <summary>
        /// Get information about the account currently logged in. Get information about the account currently logged in. Fails if not logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<AccountInfo> GetAccountInfoAsync (bool? includeSubs = null)
        {
             ApiResponse<AccountInfo> localVarResponse = await GetAccountInfoAsyncWithHttpInfo(includeSubs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about the account currently logged in. Get information about the account currently logged in. Fails if not logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfo>> GetAccountInfoAsyncWithHttpInfo (bool? includeSubs = null)
        {

            var localVarPath = "/api/account/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeSubs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSubs", includeSubs)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
        }

        /// <summary>
        /// Get SignUp URL (For signUp via web browser) Get SignUp URL (For signUp via web browser)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string GetSignUpURL ()
        {
             ApiResponse<string> localVarResponse = GetSignUpURLWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SignUp URL (For signUp via web browser) Get SignUp URL (For signUp via web browser)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetSignUpURLWithHttpInfo ()
        {

            var localVarPath = "/api/account/signUpURL";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignUpURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get SignUp URL (For signUp via web browser) Get SignUp URL (For signUp via web browser)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetSignUpURLAsync ()
        {
             ApiResponse<string> localVarResponse = await GetSignUpURLAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SignUp URL (For signUp via web browser) Get SignUp URL (For signUp via web browser)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetSignUpURLAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/account/signUpURL";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignUpURL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get available subscriptions of the account currently logged in. Get available subscriptions of the account currently logged in. Fails if not logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Subscription&gt;</returns>
        public List<Subscription> GetSubscriptions ()
        {
             ApiResponse<List<Subscription>> localVarResponse = GetSubscriptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get available subscriptions of the account currently logged in. Get available subscriptions of the account currently logged in. Fails if not logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Subscription&gt;</returns>
        public ApiResponse< List<Subscription> > GetSubscriptionsWithHttpInfo ()
        {

            var localVarPath = "/api/account/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Subscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subscription>)));
        }

        /// <summary>
        /// Get available subscriptions of the account currently logged in. Get available subscriptions of the account currently logged in. Fails if not logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Subscription&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subscription>> GetSubscriptionsAsync ()
        {
             ApiResponse<List<Subscription>> localVarResponse = await GetSubscriptionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get available subscriptions of the account currently logged in. Get available subscriptions of the account currently logged in. Fails if not logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Subscription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Subscription>>> GetSubscriptionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/account/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subscription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Subscription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subscription>)));
        }

        /// <summary>
        /// Check if a user is logged in. Check if a user is logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? IsLoggedIn ()
        {
             ApiResponse<bool?> localVarResponse = IsLoggedInWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if a user is logged in. Check if a user is logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > IsLoggedInWithHttpInfo ()
        {

            var localVarPath = "/api/account/isLoggedIn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsLoggedIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Check if a user is logged in. Check if a user is logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> IsLoggedInAsync ()
        {
             ApiResponse<bool?> localVarResponse = await IsLoggedInAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if a user is logged in. Check if a user is logged in.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> IsLoggedInAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/account/isLoggedIn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsLoggedIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Login into SIRIUS web services. Login into SIRIUS web services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">used to log in.</param>
        /// <param name="acceptTerms"></param>
        /// <param name="failWhenLoggedIn">if true request fails if an active login already exists. (optional, default to false)</param>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>AccountInfo</returns>
        public AccountInfo Login (AccountCredentials body, bool? acceptTerms, bool? failWhenLoggedIn = null, bool? includeSubs = null)
        {
             ApiResponse<AccountInfo> localVarResponse = LoginWithHttpInfo(body, acceptTerms, failWhenLoggedIn, includeSubs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login into SIRIUS web services. Login into SIRIUS web services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">used to log in.</param>
        /// <param name="acceptTerms"></param>
        /// <param name="failWhenLoggedIn">if true request fails if an active login already exists. (optional, default to false)</param>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        public ApiResponse< AccountInfo > LoginWithHttpInfo (AccountCredentials body, bool? acceptTerms, bool? failWhenLoggedIn = null, bool? includeSubs = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginAndAccountApi->Login");
            // verify the required parameter 'acceptTerms' is set
            if (acceptTerms == null)
                throw new ApiException(400, "Missing required parameter 'acceptTerms' when calling LoginAndAccountApi->Login");

            var localVarPath = "/api/account/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptTerms != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "acceptTerms", acceptTerms)); // query parameter
            if (failWhenLoggedIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failWhenLoggedIn", failWhenLoggedIn)); // query parameter
            if (includeSubs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSubs", includeSubs)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
        }

        /// <summary>
        /// Login into SIRIUS web services. Login into SIRIUS web services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">used to log in.</param>
        /// <param name="acceptTerms"></param>
        /// <param name="failWhenLoggedIn">if true request fails if an active login already exists. (optional, default to false)</param>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<AccountInfo> LoginAsync (AccountCredentials body, bool? acceptTerms, bool? failWhenLoggedIn = null, bool? includeSubs = null)
        {
             ApiResponse<AccountInfo> localVarResponse = await LoginAsyncWithHttpInfo(body, acceptTerms, failWhenLoggedIn, includeSubs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login into SIRIUS web services. Login into SIRIUS web services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">used to log in.</param>
        /// <param name="acceptTerms"></param>
        /// <param name="failWhenLoggedIn">if true request fails if an active login already exists. (optional, default to false)</param>
        /// <param name="includeSubs">include available and active subscriptions in {@link AccountInfo AccountInfo}. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfo>> LoginAsyncWithHttpInfo (AccountCredentials body, bool? acceptTerms, bool? failWhenLoggedIn = null, bool? includeSubs = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoginAndAccountApi->Login");
            // verify the required parameter 'acceptTerms' is set
            if (acceptTerms == null)
                throw new ApiException(400, "Missing required parameter 'acceptTerms' when calling LoginAndAccountApi->Login");

            var localVarPath = "/api/account/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptTerms != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "acceptTerms", acceptTerms)); // query parameter
            if (failWhenLoggedIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failWhenLoggedIn", failWhenLoggedIn)); // query parameter
            if (includeSubs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSubs", includeSubs)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
        }

        /// <summary>
        /// Logout from SIRIUS web services. Logout from SIRIUS web services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Logout ()
        {
             LogoutWithHttpInfo();
        }

        /// <summary>
        /// Logout from SIRIUS web services. Logout from SIRIUS web services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LogoutWithHttpInfo ()
        {

            var localVarPath = "/api/account/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Logout from SIRIUS web services. Logout from SIRIUS web services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogoutAsync ()
        {
             await LogoutAsyncWithHttpInfo();

        }

        /// <summary>
        /// Logout from SIRIUS web services. Logout from SIRIUS web services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LogoutAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/account/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Open SignUp window in system browser and return signUp link. Open SignUp window in system browser and return signUp link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string SignUp ()
        {
             ApiResponse<string> localVarResponse = SignUpWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Open SignUp window in system browser and return signUp link. Open SignUp window in system browser and return signUp link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SignUpWithHttpInfo ()
        {

            var localVarPath = "/api/account/signUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Open SignUp window in system browser and return signUp link. Open SignUp window in system browser and return signUp link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SignUpAsync ()
        {
             ApiResponse<string> localVarResponse = await SignUpAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Open SignUp window in system browser and return signUp link. Open SignUp window in system browser and return signUp link.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SignUpAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/account/signUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
