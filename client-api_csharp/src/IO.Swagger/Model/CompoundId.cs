/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The CompoundId contains the ID of a compound together with some read-only information that might be displayed in  some summary view.
    /// </summary>
    [DataContract]
        public partial class CompoundId :  IEquatable<CompoundId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompoundId" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="index">index.</param>
        /// <param name="ionMass">ionMass.</param>
        /// <param name="ionType">ionType.</param>
        /// <param name="rtStartSeconds">rtStartSeconds.</param>
        /// <param name="rtEndSeconds">rtEndSeconds.</param>
        /// <param name="topAnnotation">topAnnotation.</param>
        /// <param name="msData">msData.</param>
        /// <param name="computing">computing.</param>
        public CompoundId(string id = default(string), string name = default(string), long? index = default(long?), double? ionMass = default(double?), string ionType = default(string), double? rtStartSeconds = default(double?), double? rtEndSeconds = default(double?), CompoundAnnotation topAnnotation = default(CompoundAnnotation), MsData msData = default(MsData), bool? computing = default(bool?))
        {
            this.Id = id;
            this.Name = name;
            this.Index = index;
            this.IonMass = ionMass;
            this.IonType = ionType;
            this.RtStartSeconds = rtStartSeconds;
            this.RtEndSeconds = rtEndSeconds;
            this.TopAnnotation = topAnnotation;
            this.MsData = msData;
            this.Computing = computing;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public long? Index { get; set; }

        /// <summary>
        /// Gets or Sets IonMass
        /// </summary>
        [DataMember(Name="ionMass", EmitDefaultValue=false)]
        public double? IonMass { get; set; }

        /// <summary>
        /// Gets or Sets IonType
        /// </summary>
        [DataMember(Name="ionType", EmitDefaultValue=false)]
        public string IonType { get; set; }

        /// <summary>
        /// Gets or Sets RtStartSeconds
        /// </summary>
        [DataMember(Name="rtStartSeconds", EmitDefaultValue=false)]
        public double? RtStartSeconds { get; set; }

        /// <summary>
        /// Gets or Sets RtEndSeconds
        /// </summary>
        [DataMember(Name="rtEndSeconds", EmitDefaultValue=false)]
        public double? RtEndSeconds { get; set; }

        /// <summary>
        /// Gets or Sets TopAnnotation
        /// </summary>
        [DataMember(Name="topAnnotation", EmitDefaultValue=false)]
        public CompoundAnnotation TopAnnotation { get; set; }

        /// <summary>
        /// Gets or Sets MsData
        /// </summary>
        [DataMember(Name="msData", EmitDefaultValue=false)]
        public MsData MsData { get; set; }

        /// <summary>
        /// Gets or Sets Computing
        /// </summary>
        [DataMember(Name="computing", EmitDefaultValue=false)]
        public bool? Computing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompoundId {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IonMass: ").Append(IonMass).Append("\n");
            sb.Append("  IonType: ").Append(IonType).Append("\n");
            sb.Append("  RtStartSeconds: ").Append(RtStartSeconds).Append("\n");
            sb.Append("  RtEndSeconds: ").Append(RtEndSeconds).Append("\n");
            sb.Append("  TopAnnotation: ").Append(TopAnnotation).Append("\n");
            sb.Append("  MsData: ").Append(MsData).Append("\n");
            sb.Append("  Computing: ").Append(Computing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompoundId);
        }

        /// <summary>
        /// Returns true if CompoundId instances are equal
        /// </summary>
        /// <param name="input">Instance of CompoundId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompoundId input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.IonMass == input.IonMass ||
                    (this.IonMass != null &&
                    this.IonMass.Equals(input.IonMass))
                ) && 
                (
                    this.IonType == input.IonType ||
                    (this.IonType != null &&
                    this.IonType.Equals(input.IonType))
                ) && 
                (
                    this.RtStartSeconds == input.RtStartSeconds ||
                    (this.RtStartSeconds != null &&
                    this.RtStartSeconds.Equals(input.RtStartSeconds))
                ) && 
                (
                    this.RtEndSeconds == input.RtEndSeconds ||
                    (this.RtEndSeconds != null &&
                    this.RtEndSeconds.Equals(input.RtEndSeconds))
                ) && 
                (
                    this.TopAnnotation == input.TopAnnotation ||
                    (this.TopAnnotation != null &&
                    this.TopAnnotation.Equals(input.TopAnnotation))
                ) && 
                (
                    this.MsData == input.MsData ||
                    (this.MsData != null &&
                    this.MsData.Equals(input.MsData))
                ) && 
                (
                    this.Computing == input.Computing ||
                    (this.Computing != null &&
                    this.Computing.Equals(input.Computing))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.IonMass != null)
                    hashCode = hashCode * 59 + this.IonMass.GetHashCode();
                if (this.IonType != null)
                    hashCode = hashCode * 59 + this.IonType.GetHashCode();
                if (this.RtStartSeconds != null)
                    hashCode = hashCode * 59 + this.RtStartSeconds.GetHashCode();
                if (this.RtEndSeconds != null)
                    hashCode = hashCode * 59 + this.RtEndSeconds.GetHashCode();
                if (this.TopAnnotation != null)
                    hashCode = hashCode * 59 + this.TopAnnotation.GetHashCode();
                if (this.MsData != null)
                    hashCode = hashCode * 59 + this.MsData.GetHashCode();
                if (this.Computing != null)
                    hashCode = hashCode * 59 + this.Computing.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
