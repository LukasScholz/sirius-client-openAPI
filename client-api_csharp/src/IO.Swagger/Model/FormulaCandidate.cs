/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FormulaCandidate
    /// </summary>
    [DataContract]
        public partial class FormulaCandidate :  IEquatable<FormulaCandidate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormulaCandidate" /> class.
        /// </summary>
        /// <param name="siriusScore">siriusScore.</param>
        /// <param name="isotopeScore">isotopeScore.</param>
        /// <param name="treeScore">treeScore.</param>
        /// <param name="zodiacScore">zodiacScore.</param>
        /// <param name="molecularFormula">molecularFormula.</param>
        /// <param name="adduct">adduct.</param>
        /// <param name="numOfexplainedPeaks">numOfexplainedPeaks.</param>
        /// <param name="numOfexplainablePeaks">numOfexplainablePeaks.</param>
        /// <param name="totalExplainedIntensity">totalExplainedIntensity.</param>
        /// <param name="medianMassDeviation">medianMassDeviation.</param>
        public FormulaCandidate(double? siriusScore = default(double?), double? isotopeScore = default(double?), double? treeScore = default(double?), double? zodiacScore = default(double?), string molecularFormula = default(string), string adduct = default(string), int? numOfexplainedPeaks = default(int?), int? numOfexplainablePeaks = default(int?), double? totalExplainedIntensity = default(double?), Deviation medianMassDeviation = default(Deviation))
        {
            this.SiriusScore = siriusScore;
            this.IsotopeScore = isotopeScore;
            this.TreeScore = treeScore;
            this.ZodiacScore = zodiacScore;
            this.MolecularFormula = molecularFormula;
            this.Adduct = adduct;
            this.NumOfexplainedPeaks = numOfexplainedPeaks;
            this.NumOfexplainablePeaks = numOfexplainablePeaks;
            this.TotalExplainedIntensity = totalExplainedIntensity;
            this.MedianMassDeviation = medianMassDeviation;
        }
        
        /// <summary>
        /// Gets or Sets SiriusScore
        /// </summary>
        [DataMember(Name="siriusScore", EmitDefaultValue=false)]
        public double? SiriusScore { get; set; }

        /// <summary>
        /// Gets or Sets IsotopeScore
        /// </summary>
        [DataMember(Name="isotopeScore", EmitDefaultValue=false)]
        public double? IsotopeScore { get; set; }

        /// <summary>
        /// Gets or Sets TreeScore
        /// </summary>
        [DataMember(Name="treeScore", EmitDefaultValue=false)]
        public double? TreeScore { get; set; }

        /// <summary>
        /// Gets or Sets ZodiacScore
        /// </summary>
        [DataMember(Name="zodiacScore", EmitDefaultValue=false)]
        public double? ZodiacScore { get; set; }

        /// <summary>
        /// Gets or Sets MolecularFormula
        /// </summary>
        [DataMember(Name="molecularFormula", EmitDefaultValue=false)]
        public string MolecularFormula { get; set; }

        /// <summary>
        /// Gets or Sets Adduct
        /// </summary>
        [DataMember(Name="adduct", EmitDefaultValue=false)]
        public string Adduct { get; set; }

        /// <summary>
        /// Gets or Sets NumOfexplainedPeaks
        /// </summary>
        [DataMember(Name="numOfexplainedPeaks", EmitDefaultValue=false)]
        public int? NumOfexplainedPeaks { get; set; }

        /// <summary>
        /// Gets or Sets NumOfexplainablePeaks
        /// </summary>
        [DataMember(Name="numOfexplainablePeaks", EmitDefaultValue=false)]
        public int? NumOfexplainablePeaks { get; set; }

        /// <summary>
        /// Gets or Sets TotalExplainedIntensity
        /// </summary>
        [DataMember(Name="totalExplainedIntensity", EmitDefaultValue=false)]
        public double? TotalExplainedIntensity { get; set; }

        /// <summary>
        /// Gets or Sets MedianMassDeviation
        /// </summary>
        [DataMember(Name="medianMassDeviation", EmitDefaultValue=false)]
        public Deviation MedianMassDeviation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormulaCandidate {\n");
            sb.Append("  SiriusScore: ").Append(SiriusScore).Append("\n");
            sb.Append("  IsotopeScore: ").Append(IsotopeScore).Append("\n");
            sb.Append("  TreeScore: ").Append(TreeScore).Append("\n");
            sb.Append("  ZodiacScore: ").Append(ZodiacScore).Append("\n");
            sb.Append("  MolecularFormula: ").Append(MolecularFormula).Append("\n");
            sb.Append("  Adduct: ").Append(Adduct).Append("\n");
            sb.Append("  NumOfexplainedPeaks: ").Append(NumOfexplainedPeaks).Append("\n");
            sb.Append("  NumOfexplainablePeaks: ").Append(NumOfexplainablePeaks).Append("\n");
            sb.Append("  TotalExplainedIntensity: ").Append(TotalExplainedIntensity).Append("\n");
            sb.Append("  MedianMassDeviation: ").Append(MedianMassDeviation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormulaCandidate);
        }

        /// <summary>
        /// Returns true if FormulaCandidate instances are equal
        /// </summary>
        /// <param name="input">Instance of FormulaCandidate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormulaCandidate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SiriusScore == input.SiriusScore ||
                    (this.SiriusScore != null &&
                    this.SiriusScore.Equals(input.SiriusScore))
                ) && 
                (
                    this.IsotopeScore == input.IsotopeScore ||
                    (this.IsotopeScore != null &&
                    this.IsotopeScore.Equals(input.IsotopeScore))
                ) && 
                (
                    this.TreeScore == input.TreeScore ||
                    (this.TreeScore != null &&
                    this.TreeScore.Equals(input.TreeScore))
                ) && 
                (
                    this.ZodiacScore == input.ZodiacScore ||
                    (this.ZodiacScore != null &&
                    this.ZodiacScore.Equals(input.ZodiacScore))
                ) && 
                (
                    this.MolecularFormula == input.MolecularFormula ||
                    (this.MolecularFormula != null &&
                    this.MolecularFormula.Equals(input.MolecularFormula))
                ) && 
                (
                    this.Adduct == input.Adduct ||
                    (this.Adduct != null &&
                    this.Adduct.Equals(input.Adduct))
                ) && 
                (
                    this.NumOfexplainedPeaks == input.NumOfexplainedPeaks ||
                    (this.NumOfexplainedPeaks != null &&
                    this.NumOfexplainedPeaks.Equals(input.NumOfexplainedPeaks))
                ) && 
                (
                    this.NumOfexplainablePeaks == input.NumOfexplainablePeaks ||
                    (this.NumOfexplainablePeaks != null &&
                    this.NumOfexplainablePeaks.Equals(input.NumOfexplainablePeaks))
                ) && 
                (
                    this.TotalExplainedIntensity == input.TotalExplainedIntensity ||
                    (this.TotalExplainedIntensity != null &&
                    this.TotalExplainedIntensity.Equals(input.TotalExplainedIntensity))
                ) && 
                (
                    this.MedianMassDeviation == input.MedianMassDeviation ||
                    (this.MedianMassDeviation != null &&
                    this.MedianMassDeviation.Equals(input.MedianMassDeviation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SiriusScore != null)
                    hashCode = hashCode * 59 + this.SiriusScore.GetHashCode();
                if (this.IsotopeScore != null)
                    hashCode = hashCode * 59 + this.IsotopeScore.GetHashCode();
                if (this.TreeScore != null)
                    hashCode = hashCode * 59 + this.TreeScore.GetHashCode();
                if (this.ZodiacScore != null)
                    hashCode = hashCode * 59 + this.ZodiacScore.GetHashCode();
                if (this.MolecularFormula != null)
                    hashCode = hashCode * 59 + this.MolecularFormula.GetHashCode();
                if (this.Adduct != null)
                    hashCode = hashCode * 59 + this.Adduct.GetHashCode();
                if (this.NumOfexplainedPeaks != null)
                    hashCode = hashCode * 59 + this.NumOfexplainedPeaks.GetHashCode();
                if (this.NumOfexplainablePeaks != null)
                    hashCode = hashCode * 59 + this.NumOfexplainablePeaks.GetHashCode();
                if (this.TotalExplainedIntensity != null)
                    hashCode = hashCode * 59 + this.TotalExplainedIntensity.GetHashCode();
                if (this.MedianMassDeviation != null)
                    hashCode = hashCode * 59 + this.MedianMassDeviation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
