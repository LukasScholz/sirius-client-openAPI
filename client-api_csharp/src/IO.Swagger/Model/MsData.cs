/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The MsData wraps all spectral input data belonging to a compound.   Each compound has:  - One merged MS/MS spectrum (optional)  - One merged MS spectrum (optional)  - many MS/MS spectra  - many MS spectra   Each non-merged spectrum has an index which can be used to access the spectrum.   In the future we might add some additional information like chromatographic peak or something similar
    /// </summary>
    [DataContract]
        public partial class MsData :  IEquatable<MsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MsData" /> class.
        /// </summary>
        /// <param name="mergedMs1">mergedMs1.</param>
        /// <param name="mergedMs2">mergedMs2.</param>
        /// <param name="ms2Spectra">ms2Spectra.</param>
        /// <param name="ms1Spectra">ms1Spectra.</param>
        public MsData(AnnotatedSpectrum mergedMs1 = default(AnnotatedSpectrum), AnnotatedSpectrum mergedMs2 = default(AnnotatedSpectrum), List<AnnotatedSpectrum> ms2Spectra = default(List<AnnotatedSpectrum>), List<AnnotatedSpectrum> ms1Spectra = default(List<AnnotatedSpectrum>))
        {
            this.MergedMs1 = mergedMs1;
            this.MergedMs2 = mergedMs2;
            this.Ms2Spectra = ms2Spectra;
            this.Ms1Spectra = ms1Spectra;
        }
        
        /// <summary>
        /// Gets or Sets MergedMs1
        /// </summary>
        [DataMember(Name="mergedMs1", EmitDefaultValue=false)]
        public AnnotatedSpectrum MergedMs1 { get; set; }

        /// <summary>
        /// Gets or Sets MergedMs2
        /// </summary>
        [DataMember(Name="mergedMs2", EmitDefaultValue=false)]
        public AnnotatedSpectrum MergedMs2 { get; set; }

        /// <summary>
        /// Gets or Sets Ms2Spectra
        /// </summary>
        [DataMember(Name="ms2Spectra", EmitDefaultValue=false)]
        public List<AnnotatedSpectrum> Ms2Spectra { get; set; }

        /// <summary>
        /// Gets or Sets Ms1Spectra
        /// </summary>
        [DataMember(Name="ms1Spectra", EmitDefaultValue=false)]
        public List<AnnotatedSpectrum> Ms1Spectra { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MsData {\n");
            sb.Append("  MergedMs1: ").Append(MergedMs1).Append("\n");
            sb.Append("  MergedMs2: ").Append(MergedMs2).Append("\n");
            sb.Append("  Ms2Spectra: ").Append(Ms2Spectra).Append("\n");
            sb.Append("  Ms1Spectra: ").Append(Ms1Spectra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MsData);
        }

        /// <summary>
        /// Returns true if MsData instances are equal
        /// </summary>
        /// <param name="input">Instance of MsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MsData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MergedMs1 == input.MergedMs1 ||
                    (this.MergedMs1 != null &&
                    this.MergedMs1.Equals(input.MergedMs1))
                ) && 
                (
                    this.MergedMs2 == input.MergedMs2 ||
                    (this.MergedMs2 != null &&
                    this.MergedMs2.Equals(input.MergedMs2))
                ) && 
                (
                    this.Ms2Spectra == input.Ms2Spectra ||
                    this.Ms2Spectra != null &&
                    input.Ms2Spectra != null &&
                    this.Ms2Spectra.SequenceEqual(input.Ms2Spectra)
                ) && 
                (
                    this.Ms1Spectra == input.Ms1Spectra ||
                    this.Ms1Spectra != null &&
                    input.Ms1Spectra != null &&
                    this.Ms1Spectra.SequenceEqual(input.Ms1Spectra)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MergedMs1 != null)
                    hashCode = hashCode * 59 + this.MergedMs1.GetHashCode();
                if (this.MergedMs2 != null)
                    hashCode = hashCode * 59 + this.MergedMs2.GetHashCode();
                if (this.Ms2Spectra != null)
                    hashCode = hashCode * 59 + this.Ms2Spectra.GetHashCode();
                if (this.Ms1Spectra != null)
                    hashCode = hashCode * 59 + this.Ms1Spectra.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
