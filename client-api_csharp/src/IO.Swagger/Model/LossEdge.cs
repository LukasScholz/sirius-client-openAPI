/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LossEdge
    /// </summary>
    [DataContract]
        public partial class LossEdge :  IEquatable<LossEdge>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LossEdge" /> class.
        /// </summary>
        /// <param name="sourceFragment">sourceFragment.</param>
        /// <param name="targetFragment">targetFragment.</param>
        /// <param name="molecularFormula">molecularFormula.</param>
        /// <param name="score">score.</param>
        public LossEdge(FragmentNode sourceFragment = default(FragmentNode), FragmentNode targetFragment = default(FragmentNode), string molecularFormula = default(string), double? score = default(double?))
        {
            this.SourceFragment = sourceFragment;
            this.TargetFragment = targetFragment;
            this.MolecularFormula = molecularFormula;
            this.Score = score;
        }
        
        /// <summary>
        /// Gets or Sets SourceFragment
        /// </summary>
        [DataMember(Name="sourceFragment", EmitDefaultValue=false)]
        public FragmentNode SourceFragment { get; set; }

        /// <summary>
        /// Gets or Sets TargetFragment
        /// </summary>
        [DataMember(Name="targetFragment", EmitDefaultValue=false)]
        public FragmentNode TargetFragment { get; set; }

        /// <summary>
        /// Gets or Sets MolecularFormula
        /// </summary>
        [DataMember(Name="molecularFormula", EmitDefaultValue=false)]
        public string MolecularFormula { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LossEdge {\n");
            sb.Append("  SourceFragment: ").Append(SourceFragment).Append("\n");
            sb.Append("  TargetFragment: ").Append(TargetFragment).Append("\n");
            sb.Append("  MolecularFormula: ").Append(MolecularFormula).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LossEdge);
        }

        /// <summary>
        /// Returns true if LossEdge instances are equal
        /// </summary>
        /// <param name="input">Instance of LossEdge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LossEdge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceFragment == input.SourceFragment ||
                    (this.SourceFragment != null &&
                    this.SourceFragment.Equals(input.SourceFragment))
                ) && 
                (
                    this.TargetFragment == input.TargetFragment ||
                    (this.TargetFragment != null &&
                    this.TargetFragment.Equals(input.TargetFragment))
                ) && 
                (
                    this.MolecularFormula == input.MolecularFormula ||
                    (this.MolecularFormula != null &&
                    this.MolecularFormula.Equals(input.MolecularFormula))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceFragment != null)
                    hashCode = hashCode * 59 + this.SourceFragment.GetHashCode();
                if (this.TargetFragment != null)
                    hashCode = hashCode * 59 + this.TargetFragment.GetHashCode();
                if (this.MolecularFormula != null)
                    hashCode = hashCode * 59 + this.MolecularFormula.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
