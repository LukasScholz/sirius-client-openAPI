/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FragmentationTree
    /// </summary>
    [DataContract]
        public partial class FragmentationTree :  IEquatable<FragmentationTree>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FragmentationTree" /> class.
        /// </summary>
        /// <param name="fragments">fragments.</param>
        /// <param name="losses">losses.</param>
        /// <param name="treeScore">treeScore.</param>
        /// <param name="root">root.</param>
        public FragmentationTree(List<FragmentNode> fragments = default(List<FragmentNode>), List<LossEdge> losses = default(List<LossEdge>), double? treeScore = default(double?), FragmentNode root = default(FragmentNode))
        {
            this.Fragments = fragments;
            this.Losses = losses;
            this.TreeScore = treeScore;
            this.Root = root;
        }
        
        /// <summary>
        /// Gets or Sets Fragments
        /// </summary>
        [DataMember(Name="fragments", EmitDefaultValue=false)]
        public List<FragmentNode> Fragments { get; set; }

        /// <summary>
        /// Gets or Sets Losses
        /// </summary>
        [DataMember(Name="losses", EmitDefaultValue=false)]
        public List<LossEdge> Losses { get; set; }

        /// <summary>
        /// Gets or Sets TreeScore
        /// </summary>
        [DataMember(Name="treeScore", EmitDefaultValue=false)]
        public double? TreeScore { get; set; }

        /// <summary>
        /// Gets or Sets Root
        /// </summary>
        [DataMember(Name="root", EmitDefaultValue=false)]
        public FragmentNode Root { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FragmentationTree {\n");
            sb.Append("  Fragments: ").Append(Fragments).Append("\n");
            sb.Append("  Losses: ").Append(Losses).Append("\n");
            sb.Append("  TreeScore: ").Append(TreeScore).Append("\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FragmentationTree);
        }

        /// <summary>
        /// Returns true if FragmentationTree instances are equal
        /// </summary>
        /// <param name="input">Instance of FragmentationTree to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FragmentationTree input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fragments == input.Fragments ||
                    this.Fragments != null &&
                    input.Fragments != null &&
                    this.Fragments.SequenceEqual(input.Fragments)
                ) && 
                (
                    this.Losses == input.Losses ||
                    this.Losses != null &&
                    input.Losses != null &&
                    this.Losses.SequenceEqual(input.Losses)
                ) && 
                (
                    this.TreeScore == input.TreeScore ||
                    (this.TreeScore != null &&
                    this.TreeScore.Equals(input.TreeScore))
                ) && 
                (
                    this.Root == input.Root ||
                    (this.Root != null &&
                    this.Root.Equals(input.Root))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fragments != null)
                    hashCode = hashCode * 59 + this.Fragments.GetHashCode();
                if (this.Losses != null)
                    hashCode = hashCode * 59 + this.Losses.GetHashCode();
                if (this.TreeScore != null)
                    hashCode = hashCode * 59 + this.TreeScore.GetHashCode();
                if (this.Root != null)
                    hashCode = hashCode * 59 + this.Root.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
