/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Identifier created by the SIRIUS Nightsky API for a newly created Job.  Object can be enriched with Job status/progress information ({@link JobProgress JobProgress}) and/or Job command information.
    /// </summary>
    [DataContract]
        public partial class JobId :  IEquatable<JobId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobId" /> class.
        /// </summary>
        /// <param name="id">Unique identifier to access the job via the API.</param>
        /// <param name="command">Command string of the executed Task.</param>
        /// <param name="progress">progress.</param>
        /// <param name="affectedCompoundIds">List of compound ids that are affected by this job.  If this job is creating compounds (e.g. data import jobs) this value will be NULL until the jobs has finished.</param>
        public JobId(string id = default(string), string command = default(string), JobProgress progress = default(JobProgress), List<string> affectedCompoundIds = default(List<string>))
        {
            this.Id = id;
            this.Command = command;
            this.Progress = progress;
            this.AffectedCompoundIds = affectedCompoundIds;
        }
        
        /// <summary>
        /// Unique identifier to access the job via the API
        /// </summary>
        /// <value>Unique identifier to access the job via the API</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Command string of the executed Task
        /// </summary>
        /// <value>Command string of the executed Task</value>
        [DataMember(Name="command", EmitDefaultValue=false)]
        public string Command { get; set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public JobProgress Progress { get; set; }

        /// <summary>
        /// List of compound ids that are affected by this job.  If this job is creating compounds (e.g. data import jobs) this value will be NULL until the jobs has finished
        /// </summary>
        /// <value>List of compound ids that are affected by this job.  If this job is creating compounds (e.g. data import jobs) this value will be NULL until the jobs has finished</value>
        [DataMember(Name="affectedCompoundIds", EmitDefaultValue=false)]
        public List<string> AffectedCompoundIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobId {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  AffectedCompoundIds: ").Append(AffectedCompoundIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobId);
        }

        /// <summary>
        /// Returns true if JobId instances are equal
        /// </summary>
        /// <param name="input">Instance of JobId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobId input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                ) && 
                (
                    this.AffectedCompoundIds == input.AffectedCompoundIds ||
                    this.AffectedCompoundIds != null &&
                    input.AffectedCompoundIds != null &&
                    this.AffectedCompoundIds.SequenceEqual(input.AffectedCompoundIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.AffectedCompoundIds != null)
                    hashCode = hashCode * 59 + this.AffectedCompoundIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
