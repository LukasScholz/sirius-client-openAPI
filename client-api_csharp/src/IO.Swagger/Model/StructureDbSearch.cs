/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// User/developer friendly parameter subset for the CSI:FingerID structure db search tool.
    /// </summary>
    [DataContract]
        public partial class StructureDbSearch :  IEquatable<StructureDbSearch>, IValidatableObject
    {
        /// <summary>
        /// Defines StructureSearchDBs
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StructureSearchDBsEnum
        {
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 1,
            /// <summary>
            /// Enum ALLBUTINSILICO for value: ALL_BUT_INSILICO
            /// </summary>
            [EnumMember(Value = "ALL_BUT_INSILICO")]
            ALLBUTINSILICO = 2,
            /// <summary>
            /// Enum PUBCHEM for value: PUBCHEM
            /// </summary>
            [EnumMember(Value = "PUBCHEM")]
            PUBCHEM = 3,
            /// <summary>
            /// Enum MESH for value: MESH
            /// </summary>
            [EnumMember(Value = "MESH")]
            MESH = 4,
            /// <summary>
            /// Enum HMDB for value: HMDB
            /// </summary>
            [EnumMember(Value = "HMDB")]
            HMDB = 5,
            /// <summary>
            /// Enum KNAPSACK for value: KNAPSACK
            /// </summary>
            [EnumMember(Value = "KNAPSACK")]
            KNAPSACK = 6,
            /// <summary>
            /// Enum CHEBI for value: CHEBI
            /// </summary>
            [EnumMember(Value = "CHEBI")]
            CHEBI = 7,
            /// <summary>
            /// Enum PUBMED for value: PUBMED
            /// </summary>
            [EnumMember(Value = "PUBMED")]
            PUBMED = 8,
            /// <summary>
            /// Enum BIO for value: BIO
            /// </summary>
            [EnumMember(Value = "BIO")]
            BIO = 9,
            /// <summary>
            /// Enum KEGG for value: KEGG
            /// </summary>
            [EnumMember(Value = "KEGG")]
            KEGG = 10,
            /// <summary>
            /// Enum HSDB for value: HSDB
            /// </summary>
            [EnumMember(Value = "HSDB")]
            HSDB = 11,
            /// <summary>
            /// Enum MACONDA for value: MACONDA
            /// </summary>
            [EnumMember(Value = "MACONDA")]
            MACONDA = 12,
            /// <summary>
            /// Enum METACYC for value: METACYC
            /// </summary>
            [EnumMember(Value = "METACYC")]
            METACYC = 13,
            /// <summary>
            /// Enum GNPS for value: GNPS
            /// </summary>
            [EnumMember(Value = "GNPS")]
            GNPS = 14,
            /// <summary>
            /// Enum ZINCBIO for value: ZINCBIO
            /// </summary>
            [EnumMember(Value = "ZINCBIO")]
            ZINCBIO = 15,
            /// <summary>
            /// Enum TRAIN for value: TRAIN
            /// </summary>
            [EnumMember(Value = "TRAIN")]
            TRAIN = 16,
            /// <summary>
            /// Enum UNDP for value: UNDP
            /// </summary>
            [EnumMember(Value = "UNDP")]
            UNDP = 17,
            /// <summary>
            /// Enum YMDB for value: YMDB
            /// </summary>
            [EnumMember(Value = "YMDB")]
            YMDB = 18,
            /// <summary>
            /// Enum PLANTCYC for value: PLANTCYC
            /// </summary>
            [EnumMember(Value = "PLANTCYC")]
            PLANTCYC = 19,
            /// <summary>
            /// Enum NORMAN for value: NORMAN
            /// </summary>
            [EnumMember(Value = "NORMAN")]
            NORMAN = 20,
            /// <summary>
            /// Enum ADDITIONAL for value: ADDITIONAL
            /// </summary>
            [EnumMember(Value = "ADDITIONAL")]
            ADDITIONAL = 21,
            /// <summary>
            /// Enum SUPERNATURAL for value: SUPERNATURAL
            /// </summary>
            [EnumMember(Value = "SUPERNATURAL")]
            SUPERNATURAL = 22,
            /// <summary>
            /// Enum COCONUT for value: COCONUT
            /// </summary>
            [EnumMember(Value = "COCONUT")]
            COCONUT = 23,
            /// <summary>
            /// Enum PUBCHEMANNOTATIONBIO for value: PUBCHEMANNOTATIONBIO
            /// </summary>
            [EnumMember(Value = "PUBCHEMANNOTATIONBIO")]
            PUBCHEMANNOTATIONBIO = 24,
            /// <summary>
            /// Enum PUBCHEMANNOTATIONDRUG for value: PUBCHEMANNOTATIONDRUG
            /// </summary>
            [EnumMember(Value = "PUBCHEMANNOTATIONDRUG")]
            PUBCHEMANNOTATIONDRUG = 25,
            /// <summary>
            /// Enum PUBCHEMANNOTATIONSAFETYANDTOXIC for value: PUBCHEMANNOTATIONSAFETYANDTOXIC
            /// </summary>
            [EnumMember(Value = "PUBCHEMANNOTATIONSAFETYANDTOXIC")]
            PUBCHEMANNOTATIONSAFETYANDTOXIC = 26,
            /// <summary>
            /// Enum PUBCHEMANNOTATIONFOOD for value: PUBCHEMANNOTATIONFOOD
            /// </summary>
            [EnumMember(Value = "PUBCHEMANNOTATIONFOOD")]
            PUBCHEMANNOTATIONFOOD = 27,
            /// <summary>
            /// Enum LIPID for value: LIPID
            /// </summary>
            [EnumMember(Value = "LIPID")]
            LIPID = 28,
            /// <summary>
            /// Enum KEGGMINE for value: KEGGMINE
            /// </summary>
            [EnumMember(Value = "KEGGMINE")]
            KEGGMINE = 29,
            /// <summary>
            /// Enum ECOCYCMINE for value: ECOCYCMINE
            /// </summary>
            [EnumMember(Value = "ECOCYCMINE")]
            ECOCYCMINE = 30,
            /// <summary>
            /// Enum YMDBMINE for value: YMDBMINE
            /// </summary>
            [EnumMember(Value = "YMDBMINE")]
            YMDBMINE = 31        }
        /// <summary>
        /// Structure databases to search in
        /// </summary>
        /// <value>Structure databases to search in</value>
        [DataMember(Name="structureSearchDBs", EmitDefaultValue=false)]
        public List<StructureSearchDBsEnum> StructureSearchDBs { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructureDbSearch" /> class.
        /// </summary>
        /// <param name="enabled">tags whether the tool is enabled.</param>
        /// <param name="structureSearchDBs">Structure databases to search in.</param>
        /// <param name="tagLipids">Candidates matching the lipid class estimated by El Gordo will be tagged.  The lipid class will only be available if El Gordo predicts that the MS/MS is a lipid spectrum.  If this parameter is set to &#x27;false&#x27; El Gordo will still be executed and e.g. improve the fragmentation  tree, but the matching structure candidates will not be tagged if they match lipid class..</param>
        public StructureDbSearch(bool? enabled = default(bool?), List<StructureSearchDBsEnum> structureSearchDBs = default(List<StructureSearchDBsEnum>), bool? tagLipids = default(bool?))
        {
            this.Enabled = enabled;
            this.StructureSearchDBs = structureSearchDBs;
            this.TagLipids = tagLipids;
        }
        
        /// <summary>
        /// tags whether the tool is enabled
        /// </summary>
        /// <value>tags whether the tool is enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }


        /// <summary>
        /// Candidates matching the lipid class estimated by El Gordo will be tagged.  The lipid class will only be available if El Gordo predicts that the MS/MS is a lipid spectrum.  If this parameter is set to &#x27;false&#x27; El Gordo will still be executed and e.g. improve the fragmentation  tree, but the matching structure candidates will not be tagged if they match lipid class.
        /// </summary>
        /// <value>Candidates matching the lipid class estimated by El Gordo will be tagged.  The lipid class will only be available if El Gordo predicts that the MS/MS is a lipid spectrum.  If this parameter is set to &#x27;false&#x27; El Gordo will still be executed and e.g. improve the fragmentation  tree, but the matching structure candidates will not be tagged if they match lipid class.</value>
        [DataMember(Name="tagLipids", EmitDefaultValue=false)]
        public bool? TagLipids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructureDbSearch {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  StructureSearchDBs: ").Append(StructureSearchDBs).Append("\n");
            sb.Append("  TagLipids: ").Append(TagLipids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructureDbSearch);
        }

        /// <summary>
        /// Returns true if StructureDbSearch instances are equal
        /// </summary>
        /// <param name="input">Instance of StructureDbSearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructureDbSearch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.StructureSearchDBs == input.StructureSearchDBs ||
                    this.StructureSearchDBs != null &&
                    input.StructureSearchDBs != null &&
                    this.StructureSearchDBs.SequenceEqual(input.StructureSearchDBs)
                ) && 
                (
                    this.TagLipids == input.TagLipids ||
                    (this.TagLipids != null &&
                    this.TagLipids.Equals(input.TagLipids))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.StructureSearchDBs != null)
                    hashCode = hashCode * 59 + this.StructureSearchDBs.GetHashCode();
                if (this.TagLipids != null)
                    hashCode = hashCode * 59 + this.TagLipids.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
