/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// User/developer friendly parameter subset for the ZODIAC tool (Network base molecular formula re-ranking).
    /// </summary>
    [DataContract]
        public partial class Zodiac :  IEquatable<Zodiac>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Zodiac" /> class.
        /// </summary>
        /// <param name="enabled">tags whether the tool is enabled.</param>
        /// <param name="consideredCandidatesAt300Mz">consideredCandidatesAt300Mz.</param>
        /// <param name="consideredCandidatesAt800Mz">consideredCandidatesAt800Mz.</param>
        /// <param name="runInTwoSteps">runInTwoSteps.</param>
        /// <param name="edgeFilterThresholds">edgeFilterThresholds.</param>
        /// <param name="gibbsSamplerParameters">gibbsSamplerParameters.</param>
        public Zodiac(bool? enabled = default(bool?), ZodiacNumberOfConsideredCandidatesAt300Mz consideredCandidatesAt300Mz = default(ZodiacNumberOfConsideredCandidatesAt300Mz), ZodiacNumberOfConsideredCandidatesAt800Mz consideredCandidatesAt800Mz = default(ZodiacNumberOfConsideredCandidatesAt800Mz), ZodiacRunInTwoSteps runInTwoSteps = default(ZodiacRunInTwoSteps), ZodiacEdgeFilterThresholds edgeFilterThresholds = default(ZodiacEdgeFilterThresholds), ZodiacEpochs gibbsSamplerParameters = default(ZodiacEpochs))
        {
            this.Enabled = enabled;
            this.ConsideredCandidatesAt300Mz = consideredCandidatesAt300Mz;
            this.ConsideredCandidatesAt800Mz = consideredCandidatesAt800Mz;
            this.RunInTwoSteps = runInTwoSteps;
            this.EdgeFilterThresholds = edgeFilterThresholds;
            this.GibbsSamplerParameters = gibbsSamplerParameters;
        }
        
        /// <summary>
        /// tags whether the tool is enabled
        /// </summary>
        /// <value>tags whether the tool is enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets ConsideredCandidatesAt300Mz
        /// </summary>
        [DataMember(Name="consideredCandidatesAt300Mz", EmitDefaultValue=false)]
        public ZodiacNumberOfConsideredCandidatesAt300Mz ConsideredCandidatesAt300Mz { get; set; }

        /// <summary>
        /// Gets or Sets ConsideredCandidatesAt800Mz
        /// </summary>
        [DataMember(Name="consideredCandidatesAt800Mz", EmitDefaultValue=false)]
        public ZodiacNumberOfConsideredCandidatesAt800Mz ConsideredCandidatesAt800Mz { get; set; }

        /// <summary>
        /// Gets or Sets RunInTwoSteps
        /// </summary>
        [DataMember(Name="runInTwoSteps", EmitDefaultValue=false)]
        public ZodiacRunInTwoSteps RunInTwoSteps { get; set; }

        /// <summary>
        /// Gets or Sets EdgeFilterThresholds
        /// </summary>
        [DataMember(Name="edgeFilterThresholds", EmitDefaultValue=false)]
        public ZodiacEdgeFilterThresholds EdgeFilterThresholds { get; set; }

        /// <summary>
        /// Gets or Sets GibbsSamplerParameters
        /// </summary>
        [DataMember(Name="gibbsSamplerParameters", EmitDefaultValue=false)]
        public ZodiacEpochs GibbsSamplerParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Zodiac {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ConsideredCandidatesAt300Mz: ").Append(ConsideredCandidatesAt300Mz).Append("\n");
            sb.Append("  ConsideredCandidatesAt800Mz: ").Append(ConsideredCandidatesAt800Mz).Append("\n");
            sb.Append("  RunInTwoSteps: ").Append(RunInTwoSteps).Append("\n");
            sb.Append("  EdgeFilterThresholds: ").Append(EdgeFilterThresholds).Append("\n");
            sb.Append("  GibbsSamplerParameters: ").Append(GibbsSamplerParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Zodiac);
        }

        /// <summary>
        /// Returns true if Zodiac instances are equal
        /// </summary>
        /// <param name="input">Instance of Zodiac to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Zodiac input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.ConsideredCandidatesAt300Mz == input.ConsideredCandidatesAt300Mz ||
                    (this.ConsideredCandidatesAt300Mz != null &&
                    this.ConsideredCandidatesAt300Mz.Equals(input.ConsideredCandidatesAt300Mz))
                ) && 
                (
                    this.ConsideredCandidatesAt800Mz == input.ConsideredCandidatesAt800Mz ||
                    (this.ConsideredCandidatesAt800Mz != null &&
                    this.ConsideredCandidatesAt800Mz.Equals(input.ConsideredCandidatesAt800Mz))
                ) && 
                (
                    this.RunInTwoSteps == input.RunInTwoSteps ||
                    (this.RunInTwoSteps != null &&
                    this.RunInTwoSteps.Equals(input.RunInTwoSteps))
                ) && 
                (
                    this.EdgeFilterThresholds == input.EdgeFilterThresholds ||
                    (this.EdgeFilterThresholds != null &&
                    this.EdgeFilterThresholds.Equals(input.EdgeFilterThresholds))
                ) && 
                (
                    this.GibbsSamplerParameters == input.GibbsSamplerParameters ||
                    (this.GibbsSamplerParameters != null &&
                    this.GibbsSamplerParameters.Equals(input.GibbsSamplerParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.ConsideredCandidatesAt300Mz != null)
                    hashCode = hashCode * 59 + this.ConsideredCandidatesAt300Mz.GetHashCode();
                if (this.ConsideredCandidatesAt800Mz != null)
                    hashCode = hashCode * 59 + this.ConsideredCandidatesAt800Mz.GetHashCode();
                if (this.RunInTwoSteps != null)
                    hashCode = hashCode * 59 + this.RunInTwoSteps.GetHashCode();
                if (this.EdgeFilterThresholds != null)
                    hashCode = hashCode * 59 + this.EdgeFilterThresholds.GetHashCode();
                if (this.GibbsSamplerParameters != null)
                    hashCode = hashCode * 59 + this.GibbsSamplerParameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
