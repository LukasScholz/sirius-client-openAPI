/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Parameters to \&quot;remote control\&quot; the SIRIUS GUI.
    /// </summary>
    [DataContract]
        public partial class GuiParameters :  IEquatable<GuiParameters>, IValidatableObject
    {
        /// <summary>
        /// Selected Result ab.
        /// </summary>
        /// <value>Selected Result ab.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SelectedTabEnum
        {
            /// <summary>
            /// Enum FORMULAS for value: FORMULAS
            /// </summary>
            [EnumMember(Value = "FORMULAS")]
            FORMULAS = 1,
            /// <summary>
            /// Enum SPECTRA for value: SPECTRA
            /// </summary>
            [EnumMember(Value = "SPECTRA")]
            SPECTRA = 2,
            /// <summary>
            /// Enum TREES for value: TREES
            /// </summary>
            [EnumMember(Value = "TREES")]
            TREES = 3,
            /// <summary>
            /// Enum PREDICTEDFINGERPRINT for value: PREDICTED_FINGERPRINT
            /// </summary>
            [EnumMember(Value = "PREDICTED_FINGERPRINT")]
            PREDICTEDFINGERPRINT = 4,
            /// <summary>
            /// Enum STRUCTURES for value: STRUCTURES
            /// </summary>
            [EnumMember(Value = "STRUCTURES")]
            STRUCTURES = 5,
            /// <summary>
            /// Enum STRUCTUREANNOTATION for value: STRUCTURE_ANNOTATION
            /// </summary>
            [EnumMember(Value = "STRUCTURE_ANNOTATION")]
            STRUCTUREANNOTATION = 6,
            /// <summary>
            /// Enum COMPOUNDCLASSES for value: COMPOUND_CLASSES
            /// </summary>
            [EnumMember(Value = "COMPOUND_CLASSES")]
            COMPOUNDCLASSES = 7        }
        /// <summary>
        /// Selected Result ab.
        /// </summary>
        /// <value>Selected Result ab.</value>
        [DataMember(Name="selectedTab", EmitDefaultValue=false)]
        public SelectedTabEnum? SelectedTab { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GuiParameters" /> class.
        /// </summary>
        /// <param name="selectedTab">Selected Result ab..</param>
        /// <param name="cid">ID of Selected compound..</param>
        /// <param name="fid">ID of Selected Formula candidate of the selected compound..</param>
        /// <param name="structureCandidateInChIKey">InChIKey of selected structure candidate of selected formula candidate..</param>
        /// <param name="bringToFront">If true bring SIRIUS GUI window to foreground..</param>
        public GuiParameters(SelectedTabEnum? selectedTab = default(SelectedTabEnum?), string cid = default(string), string fid = default(string), string structureCandidateInChIKey = default(string), bool? bringToFront = default(bool?))
        {
            this.SelectedTab = selectedTab;
            this.Cid = cid;
            this.Fid = fid;
            this.StructureCandidateInChIKey = structureCandidateInChIKey;
            this.BringToFront = bringToFront;
        }
        

        /// <summary>
        /// ID of Selected compound.
        /// </summary>
        /// <value>ID of Selected compound.</value>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public string Cid { get; set; }

        /// <summary>
        /// ID of Selected Formula candidate of the selected compound.
        /// </summary>
        /// <value>ID of Selected Formula candidate of the selected compound.</value>
        [DataMember(Name="fid", EmitDefaultValue=false)]
        public string Fid { get; set; }

        /// <summary>
        /// InChIKey of selected structure candidate of selected formula candidate.
        /// </summary>
        /// <value>InChIKey of selected structure candidate of selected formula candidate.</value>
        [DataMember(Name="structureCandidateInChIKey", EmitDefaultValue=false)]
        public string StructureCandidateInChIKey { get; set; }

        /// <summary>
        /// If true bring SIRIUS GUI window to foreground.
        /// </summary>
        /// <value>If true bring SIRIUS GUI window to foreground.</value>
        [DataMember(Name="bringToFront", EmitDefaultValue=false)]
        public bool? BringToFront { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GuiParameters {\n");
            sb.Append("  SelectedTab: ").Append(SelectedTab).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Fid: ").Append(Fid).Append("\n");
            sb.Append("  StructureCandidateInChIKey: ").Append(StructureCandidateInChIKey).Append("\n");
            sb.Append("  BringToFront: ").Append(BringToFront).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GuiParameters);
        }

        /// <summary>
        /// Returns true if GuiParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of GuiParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GuiParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SelectedTab == input.SelectedTab ||
                    (this.SelectedTab != null &&
                    this.SelectedTab.Equals(input.SelectedTab))
                ) && 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.Fid == input.Fid ||
                    (this.Fid != null &&
                    this.Fid.Equals(input.Fid))
                ) && 
                (
                    this.StructureCandidateInChIKey == input.StructureCandidateInChIKey ||
                    (this.StructureCandidateInChIKey != null &&
                    this.StructureCandidateInChIKey.Equals(input.StructureCandidateInChIKey))
                ) && 
                (
                    this.BringToFront == input.BringToFront ||
                    (this.BringToFront != null &&
                    this.BringToFront.Equals(input.BringToFront))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SelectedTab != null)
                    hashCode = hashCode * 59 + this.SelectedTab.GetHashCode();
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                if (this.Fid != null)
                    hashCode = hashCode * 59 + this.Fid.GetHashCode();
                if (this.StructureCandidateInChIKey != null)
                    hashCode = hashCode * 59 + this.StructureCandidateInChIKey.GetHashCode();
                if (this.BringToFront != null)
                    hashCode = hashCode * 59 + this.BringToFront.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
