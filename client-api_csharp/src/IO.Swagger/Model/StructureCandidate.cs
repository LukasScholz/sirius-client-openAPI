/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StructureCandidate
    /// </summary>
    [DataContract]
        public partial class StructureCandidate :  IEquatable<StructureCandidate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructureCandidate" /> class.
        /// </summary>
        /// <param name="structureName">structureName.</param>
        /// <param name="smiles">smiles.</param>
        /// <param name="csiScore">csiScore.</param>
        /// <param name="tanimotoSimilarity">tanimotoSimilarity.</param>
        /// <param name="confidenceScore">confidenceScore.</param>
        /// <param name="numOfPubMedIds">numOfPubMedIds.</param>
        /// <param name="xlogP">xlogP.</param>
        /// <param name="inchiKey">inchiKey.</param>
        /// <param name="fpBitsSet">Array containing the indices of the molecular fingerprint that are available in the structure (1)  OPTIONAL: needs to be added by parameter.</param>
        /// <param name="dbLinks">List of structure database links belonging to this structure candidate  OPTIONAL: needs to be added by parameter.</param>
        /// <param name="pubmedIds">PubMed IDs belonging to this structure candidate  OPTIONAL: needs to be added by parameter.</param>
        public StructureCandidate(string structureName = default(string), string smiles = default(string), double? csiScore = default(double?), double? tanimotoSimilarity = default(double?), double? confidenceScore = default(double?), int? numOfPubMedIds = default(int?), double? xlogP = default(double?), string inchiKey = default(string), List<int?> fpBitsSet = default(List<int?>), List<DBLink> dbLinks = default(List<DBLink>), List<int?> pubmedIds = default(List<int?>))
        {
            this.StructureName = structureName;
            this.Smiles = smiles;
            this.CsiScore = csiScore;
            this.TanimotoSimilarity = tanimotoSimilarity;
            this.ConfidenceScore = confidenceScore;
            this.NumOfPubMedIds = numOfPubMedIds;
            this.XlogP = xlogP;
            this.InchiKey = inchiKey;
            this.FpBitsSet = fpBitsSet;
            this.DbLinks = dbLinks;
            this.PubmedIds = pubmedIds;
        }
        
        /// <summary>
        /// Gets or Sets StructureName
        /// </summary>
        [DataMember(Name="structureName", EmitDefaultValue=false)]
        public string StructureName { get; set; }

        /// <summary>
        /// Gets or Sets Smiles
        /// </summary>
        [DataMember(Name="smiles", EmitDefaultValue=false)]
        public string Smiles { get; set; }

        /// <summary>
        /// Gets or Sets CsiScore
        /// </summary>
        [DataMember(Name="csiScore", EmitDefaultValue=false)]
        public double? CsiScore { get; set; }

        /// <summary>
        /// Gets or Sets TanimotoSimilarity
        /// </summary>
        [DataMember(Name="tanimotoSimilarity", EmitDefaultValue=false)]
        public double? TanimotoSimilarity { get; set; }

        /// <summary>
        /// Gets or Sets ConfidenceScore
        /// </summary>
        [DataMember(Name="confidenceScore", EmitDefaultValue=false)]
        public double? ConfidenceScore { get; set; }

        /// <summary>
        /// Gets or Sets NumOfPubMedIds
        /// </summary>
        [DataMember(Name="numOfPubMedIds", EmitDefaultValue=false)]
        public int? NumOfPubMedIds { get; set; }

        /// <summary>
        /// Gets or Sets XlogP
        /// </summary>
        [DataMember(Name="xlogP", EmitDefaultValue=false)]
        public double? XlogP { get; set; }

        /// <summary>
        /// Gets or Sets InchiKey
        /// </summary>
        [DataMember(Name="inchiKey", EmitDefaultValue=false)]
        public string InchiKey { get; set; }

        /// <summary>
        /// Array containing the indices of the molecular fingerprint that are available in the structure (1)  OPTIONAL: needs to be added by parameter
        /// </summary>
        /// <value>Array containing the indices of the molecular fingerprint that are available in the structure (1)  OPTIONAL: needs to be added by parameter</value>
        [DataMember(Name="fpBitsSet", EmitDefaultValue=false)]
        public List<int?> FpBitsSet { get; set; }

        /// <summary>
        /// List of structure database links belonging to this structure candidate  OPTIONAL: needs to be added by parameter
        /// </summary>
        /// <value>List of structure database links belonging to this structure candidate  OPTIONAL: needs to be added by parameter</value>
        [DataMember(Name="dbLinks", EmitDefaultValue=false)]
        public List<DBLink> DbLinks { get; set; }

        /// <summary>
        /// PubMed IDs belonging to this structure candidate  OPTIONAL: needs to be added by parameter
        /// </summary>
        /// <value>PubMed IDs belonging to this structure candidate  OPTIONAL: needs to be added by parameter</value>
        [DataMember(Name="pubmedIds", EmitDefaultValue=false)]
        public List<int?> PubmedIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructureCandidate {\n");
            sb.Append("  StructureName: ").Append(StructureName).Append("\n");
            sb.Append("  Smiles: ").Append(Smiles).Append("\n");
            sb.Append("  CsiScore: ").Append(CsiScore).Append("\n");
            sb.Append("  TanimotoSimilarity: ").Append(TanimotoSimilarity).Append("\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  NumOfPubMedIds: ").Append(NumOfPubMedIds).Append("\n");
            sb.Append("  XlogP: ").Append(XlogP).Append("\n");
            sb.Append("  InchiKey: ").Append(InchiKey).Append("\n");
            sb.Append("  FpBitsSet: ").Append(FpBitsSet).Append("\n");
            sb.Append("  DbLinks: ").Append(DbLinks).Append("\n");
            sb.Append("  PubmedIds: ").Append(PubmedIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructureCandidate);
        }

        /// <summary>
        /// Returns true if StructureCandidate instances are equal
        /// </summary>
        /// <param name="input">Instance of StructureCandidate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructureCandidate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StructureName == input.StructureName ||
                    (this.StructureName != null &&
                    this.StructureName.Equals(input.StructureName))
                ) && 
                (
                    this.Smiles == input.Smiles ||
                    (this.Smiles != null &&
                    this.Smiles.Equals(input.Smiles))
                ) && 
                (
                    this.CsiScore == input.CsiScore ||
                    (this.CsiScore != null &&
                    this.CsiScore.Equals(input.CsiScore))
                ) && 
                (
                    this.TanimotoSimilarity == input.TanimotoSimilarity ||
                    (this.TanimotoSimilarity != null &&
                    this.TanimotoSimilarity.Equals(input.TanimotoSimilarity))
                ) && 
                (
                    this.ConfidenceScore == input.ConfidenceScore ||
                    (this.ConfidenceScore != null &&
                    this.ConfidenceScore.Equals(input.ConfidenceScore))
                ) && 
                (
                    this.NumOfPubMedIds == input.NumOfPubMedIds ||
                    (this.NumOfPubMedIds != null &&
                    this.NumOfPubMedIds.Equals(input.NumOfPubMedIds))
                ) && 
                (
                    this.XlogP == input.XlogP ||
                    (this.XlogP != null &&
                    this.XlogP.Equals(input.XlogP))
                ) && 
                (
                    this.InchiKey == input.InchiKey ||
                    (this.InchiKey != null &&
                    this.InchiKey.Equals(input.InchiKey))
                ) && 
                (
                    this.FpBitsSet == input.FpBitsSet ||
                    this.FpBitsSet != null &&
                    input.FpBitsSet != null &&
                    this.FpBitsSet.SequenceEqual(input.FpBitsSet)
                ) && 
                (
                    this.DbLinks == input.DbLinks ||
                    this.DbLinks != null &&
                    input.DbLinks != null &&
                    this.DbLinks.SequenceEqual(input.DbLinks)
                ) && 
                (
                    this.PubmedIds == input.PubmedIds ||
                    this.PubmedIds != null &&
                    input.PubmedIds != null &&
                    this.PubmedIds.SequenceEqual(input.PubmedIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StructureName != null)
                    hashCode = hashCode * 59 + this.StructureName.GetHashCode();
                if (this.Smiles != null)
                    hashCode = hashCode * 59 + this.Smiles.GetHashCode();
                if (this.CsiScore != null)
                    hashCode = hashCode * 59 + this.CsiScore.GetHashCode();
                if (this.TanimotoSimilarity != null)
                    hashCode = hashCode * 59 + this.TanimotoSimilarity.GetHashCode();
                if (this.ConfidenceScore != null)
                    hashCode = hashCode * 59 + this.ConfidenceScore.GetHashCode();
                if (this.NumOfPubMedIds != null)
                    hashCode = hashCode * 59 + this.NumOfPubMedIds.GetHashCode();
                if (this.XlogP != null)
                    hashCode = hashCode * 59 + this.XlogP.GetHashCode();
                if (this.InchiKey != null)
                    hashCode = hashCode * 59 + this.InchiKey.GetHashCode();
                if (this.FpBitsSet != null)
                    hashCode = hashCode * 59 + this.FpBitsSet.GetHashCode();
                if (this.DbLinks != null)
                    hashCode = hashCode * 59 + this.DbLinks.GetHashCode();
                if (this.PubmedIds != null)
                    hashCode = hashCode * 59 + this.PubmedIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
