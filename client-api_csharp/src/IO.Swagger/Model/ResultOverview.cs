/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Results that are available for a {@link FormulaResultContainer FormulaResultContainer} represented as boolean or numeric score (if available).  NULL scores indicate that the corresponding result is not available.
    /// </summary>
    [DataContract]
        public partial class ResultOverview :  IEquatable<ResultOverview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultOverview" /> class.
        /// </summary>
        /// <param name="siriusScore">Sirius Score (isotope + tree score) of the formula candidate.  If NULL result is not available.</param>
        /// <param name="zodiacScore">Zodiac Score of the formula candidate.  If NULL result is not available.</param>
        /// <param name="topCSIScore">CSI:FingerID Score of the top ranking structure candidate of the structure database search  performed for this formula candidate.  If NULL structure database result is not available or the structure candidate list is empty..</param>
        /// <param name="confidenceScore">Confidence Score of the  IF NULL structure database result not available a structure candidate hit of another formula candidate is  the top ranking structure candidate..</param>
        /// <param name="canopusResult">True if Canopus compound class prediction results are available..</param>
        public ResultOverview(double? siriusScore = default(double?), double? zodiacScore = default(double?), double? topCSIScore = default(double?), double? confidenceScore = default(double?), bool? canopusResult = default(bool?))
        {
            this.SiriusScore = siriusScore;
            this.ZodiacScore = zodiacScore;
            this.TopCSIScore = topCSIScore;
            this.ConfidenceScore = confidenceScore;
            this.CanopusResult = canopusResult;
        }
        
        /// <summary>
        /// Sirius Score (isotope + tree score) of the formula candidate.  If NULL result is not available
        /// </summary>
        /// <value>Sirius Score (isotope + tree score) of the formula candidate.  If NULL result is not available</value>
        [DataMember(Name="siriusScore", EmitDefaultValue=false)]
        public double? SiriusScore { get; set; }

        /// <summary>
        /// Zodiac Score of the formula candidate.  If NULL result is not available
        /// </summary>
        /// <value>Zodiac Score of the formula candidate.  If NULL result is not available</value>
        [DataMember(Name="zodiacScore", EmitDefaultValue=false)]
        public double? ZodiacScore { get; set; }

        /// <summary>
        /// CSI:FingerID Score of the top ranking structure candidate of the structure database search  performed for this formula candidate.  If NULL structure database result is not available or the structure candidate list is empty.
        /// </summary>
        /// <value>CSI:FingerID Score of the top ranking structure candidate of the structure database search  performed for this formula candidate.  If NULL structure database result is not available or the structure candidate list is empty.</value>
        [DataMember(Name="topCSIScore", EmitDefaultValue=false)]
        public double? TopCSIScore { get; set; }

        /// <summary>
        /// Confidence Score of the  IF NULL structure database result not available a structure candidate hit of another formula candidate is  the top ranking structure candidate.
        /// </summary>
        /// <value>Confidence Score of the  IF NULL structure database result not available a structure candidate hit of another formula candidate is  the top ranking structure candidate.</value>
        [DataMember(Name="confidenceScore", EmitDefaultValue=false)]
        public double? ConfidenceScore { get; set; }

        /// <summary>
        /// True if Canopus compound class prediction results are available.
        /// </summary>
        /// <value>True if Canopus compound class prediction results are available.</value>
        [DataMember(Name="canopusResult", EmitDefaultValue=false)]
        public bool? CanopusResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResultOverview {\n");
            sb.Append("  SiriusScore: ").Append(SiriusScore).Append("\n");
            sb.Append("  ZodiacScore: ").Append(ZodiacScore).Append("\n");
            sb.Append("  TopCSIScore: ").Append(TopCSIScore).Append("\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  CanopusResult: ").Append(CanopusResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultOverview);
        }

        /// <summary>
        /// Returns true if ResultOverview instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultOverview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultOverview input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SiriusScore == input.SiriusScore ||
                    (this.SiriusScore != null &&
                    this.SiriusScore.Equals(input.SiriusScore))
                ) && 
                (
                    this.ZodiacScore == input.ZodiacScore ||
                    (this.ZodiacScore != null &&
                    this.ZodiacScore.Equals(input.ZodiacScore))
                ) && 
                (
                    this.TopCSIScore == input.TopCSIScore ||
                    (this.TopCSIScore != null &&
                    this.TopCSIScore.Equals(input.TopCSIScore))
                ) && 
                (
                    this.ConfidenceScore == input.ConfidenceScore ||
                    (this.ConfidenceScore != null &&
                    this.ConfidenceScore.Equals(input.ConfidenceScore))
                ) && 
                (
                    this.CanopusResult == input.CanopusResult ||
                    (this.CanopusResult != null &&
                    this.CanopusResult.Equals(input.CanopusResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SiriusScore != null)
                    hashCode = hashCode * 59 + this.SiriusScore.GetHashCode();
                if (this.ZodiacScore != null)
                    hashCode = hashCode * 59 + this.ZodiacScore.GetHashCode();
                if (this.TopCSIScore != null)
                    hashCode = hashCode * 59 + this.TopCSIScore.GetHashCode();
                if (this.ConfidenceScore != null)
                    hashCode = hashCode * 59 + this.ConfidenceScore.GetHashCode();
                if (this.CanopusResult != null)
                    hashCode = hashCode * 59 + this.CanopusResult.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
