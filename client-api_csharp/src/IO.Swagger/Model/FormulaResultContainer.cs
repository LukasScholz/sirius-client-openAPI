/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Container for formula level results that holds a unique identifier (molecular formula + adduct).  It can be extended/annotated with a list of results that are available for this formula candidate and their scores.  It can further be extended/annotated with the action formula candidate results.
    /// </summary>
    [DataContract]
        public partial class FormulaResultContainer :  IEquatable<FormulaResultContainer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormulaResultContainer" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of this formula candidate.</param>
        /// <param name="molecularFormula">molecular formula of this formula candidate.</param>
        /// <param name="adduct">Adduct of this formula candidate.</param>
        /// <param name="resultOverview">resultOverview.</param>
        /// <param name="candidate">candidate.</param>
        public FormulaResultContainer(string id = default(string), string molecularFormula = default(string), string adduct = default(string), ResultOverview resultOverview = default(ResultOverview), FormulaCandidate candidate = default(FormulaCandidate))
        {
            this.Id = id;
            this.MolecularFormula = molecularFormula;
            this.Adduct = adduct;
            this.ResultOverview = resultOverview;
            this.Candidate = candidate;
        }
        
        /// <summary>
        /// Unique identifier of this formula candidate
        /// </summary>
        /// <value>Unique identifier of this formula candidate</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// molecular formula of this formula candidate
        /// </summary>
        /// <value>molecular formula of this formula candidate</value>
        [DataMember(Name="molecularFormula", EmitDefaultValue=false)]
        public string MolecularFormula { get; set; }

        /// <summary>
        /// Adduct of this formula candidate
        /// </summary>
        /// <value>Adduct of this formula candidate</value>
        [DataMember(Name="adduct", EmitDefaultValue=false)]
        public string Adduct { get; set; }

        /// <summary>
        /// Gets or Sets ResultOverview
        /// </summary>
        [DataMember(Name="resultOverview", EmitDefaultValue=false)]
        public ResultOverview ResultOverview { get; set; }

        /// <summary>
        /// Gets or Sets Candidate
        /// </summary>
        [DataMember(Name="candidate", EmitDefaultValue=false)]
        public FormulaCandidate Candidate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormulaResultContainer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MolecularFormula: ").Append(MolecularFormula).Append("\n");
            sb.Append("  Adduct: ").Append(Adduct).Append("\n");
            sb.Append("  ResultOverview: ").Append(ResultOverview).Append("\n");
            sb.Append("  Candidate: ").Append(Candidate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormulaResultContainer);
        }

        /// <summary>
        /// Returns true if FormulaResultContainer instances are equal
        /// </summary>
        /// <param name="input">Instance of FormulaResultContainer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormulaResultContainer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MolecularFormula == input.MolecularFormula ||
                    (this.MolecularFormula != null &&
                    this.MolecularFormula.Equals(input.MolecularFormula))
                ) && 
                (
                    this.Adduct == input.Adduct ||
                    (this.Adduct != null &&
                    this.Adduct.Equals(input.Adduct))
                ) && 
                (
                    this.ResultOverview == input.ResultOverview ||
                    (this.ResultOverview != null &&
                    this.ResultOverview.Equals(input.ResultOverview))
                ) && 
                (
                    this.Candidate == input.Candidate ||
                    (this.Candidate != null &&
                    this.Candidate.Equals(input.Candidate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MolecularFormula != null)
                    hashCode = hashCode * 59 + this.MolecularFormula.GetHashCode();
                if (this.Adduct != null)
                    hashCode = hashCode * 59 + this.Adduct.GetHashCode();
                if (this.ResultOverview != null)
                    hashCode = hashCode * 59 + this.ResultOverview.GetHashCode();
                if (this.Candidate != null)
                    hashCode = hashCode * 59 + this.Candidate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
