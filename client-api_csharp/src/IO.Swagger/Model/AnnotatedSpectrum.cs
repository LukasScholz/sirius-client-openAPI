/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnnotatedSpectrum
    /// </summary>
    [DataContract]
        public partial class AnnotatedSpectrum :  IEquatable<AnnotatedSpectrum>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotatedSpectrum" /> class.
        /// </summary>
        /// <param name="msLevel">MS level of the measured spectrum.  Artificial spectra with no msLevel (e.g. Simulated Isotope patterns) use 0.</param>
        /// <param name="collisionEnergy">collisionEnergy.</param>
        /// <param name="peaks">peaks.</param>
        public AnnotatedSpectrum(int? msLevel = default(int?), CollisionEnergy collisionEnergy = default(CollisionEnergy), List<AnnotatedPeak> peaks = default(List<AnnotatedPeak>))
        {
            this.MsLevel = msLevel;
            this.CollisionEnergy = collisionEnergy;
            this.Peaks = peaks;
        }
        
        /// <summary>
        /// MS level of the measured spectrum.  Artificial spectra with no msLevel (e.g. Simulated Isotope patterns) use 0
        /// </summary>
        /// <value>MS level of the measured spectrum.  Artificial spectra with no msLevel (e.g. Simulated Isotope patterns) use 0</value>
        [DataMember(Name="msLevel", EmitDefaultValue=false)]
        public int? MsLevel { get; set; }

        /// <summary>
        /// Gets or Sets CollisionEnergy
        /// </summary>
        [DataMember(Name="collisionEnergy", EmitDefaultValue=false)]
        public CollisionEnergy CollisionEnergy { get; set; }

        /// <summary>
        /// Gets or Sets Peaks
        /// </summary>
        [DataMember(Name="peaks", EmitDefaultValue=false)]
        public List<AnnotatedPeak> Peaks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnnotatedSpectrum {\n");
            sb.Append("  MsLevel: ").Append(MsLevel).Append("\n");
            sb.Append("  CollisionEnergy: ").Append(CollisionEnergy).Append("\n");
            sb.Append("  Peaks: ").Append(Peaks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnnotatedSpectrum);
        }

        /// <summary>
        /// Returns true if AnnotatedSpectrum instances are equal
        /// </summary>
        /// <param name="input">Instance of AnnotatedSpectrum to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnnotatedSpectrum input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MsLevel == input.MsLevel ||
                    (this.MsLevel != null &&
                    this.MsLevel.Equals(input.MsLevel))
                ) && 
                (
                    this.CollisionEnergy == input.CollisionEnergy ||
                    (this.CollisionEnergy != null &&
                    this.CollisionEnergy.Equals(input.CollisionEnergy))
                ) && 
                (
                    this.Peaks == input.Peaks ||
                    this.Peaks != null &&
                    input.Peaks != null &&
                    this.Peaks.SequenceEqual(input.Peaks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MsLevel != null)
                    hashCode = hashCode * 59 + this.MsLevel.GetHashCode();
                if (this.CollisionEnergy != null)
                    hashCode = hashCode * 59 + this.CollisionEnergy.GetHashCode();
                if (this.Peaks != null)
                    hashCode = hashCode * 59 + this.Peaks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
