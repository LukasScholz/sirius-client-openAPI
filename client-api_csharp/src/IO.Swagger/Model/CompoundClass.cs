/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Predicted compound class with name, probability and id if available.  (ClassyFire and NPC). This can be seen as the set of classes a compound most likely belongs to
    /// </summary>
    [DataContract]
        public partial class CompoundClass :  IEquatable<CompoundClass>, IValidatableObject
    {
        /// <summary>
        /// Specifies the classification ontology the CompoundClass belongs to.
        /// </summary>
        /// <value>Specifies the classification ontology the CompoundClass belongs to.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum ClassyFire for value: ClassyFire
            /// </summary>
            [EnumMember(Value = "ClassyFire")]
            ClassyFire = 1,
            /// <summary>
            /// Enum NPC for value: NPC
            /// </summary>
            [EnumMember(Value = "NPC")]
            NPC = 2        }
        /// <summary>
        /// Specifies the classification ontology the CompoundClass belongs to.
        /// </summary>
        /// <value>Specifies the classification ontology the CompoundClass belongs to.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompoundClass" /> class.
        /// </summary>
        /// <param name="type">Specifies the classification ontology the CompoundClass belongs to..</param>
        /// <param name="name">Name of the compound class..</param>
        /// <param name="description">Description of the compound class..</param>
        /// <param name="id">Unique id of the class. Might be undefined for certain classification ontologies..</param>
        /// <param name="probability">prediction probability.</param>
        public CompoundClass(TypeEnum? type = default(TypeEnum?), string name = default(string), string description = default(string), int? id = default(int?), double? probability = default(double?))
        {
            this.Type = type;
            this.Name = name;
            this.Description = description;
            this.Id = id;
            this.Probability = probability;
        }
        

        /// <summary>
        /// Name of the compound class.
        /// </summary>
        /// <value>Name of the compound class.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the compound class.
        /// </summary>
        /// <value>Description of the compound class.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Unique id of the class. Might be undefined for certain classification ontologies.
        /// </summary>
        /// <value>Unique id of the class. Might be undefined for certain classification ontologies.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// prediction probability
        /// </summary>
        /// <value>prediction probability</value>
        [DataMember(Name="probability", EmitDefaultValue=false)]
        public double? Probability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompoundClass {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompoundClass);
        }

        /// <summary>
        /// Returns true if CompoundClass instances are equal
        /// </summary>
        /// <param name="input">Instance of CompoundClass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompoundClass input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Probability == input.Probability ||
                    (this.Probability != null &&
                    this.Probability.Equals(input.Probability))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Probability != null)
                    hashCode = hashCode * 59 + this.Probability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
