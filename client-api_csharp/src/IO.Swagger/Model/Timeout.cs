/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Timeout
    /// </summary>
    [DataContract]
        public partial class Timeout :  IEquatable<Timeout>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Timeout" /> class.
        /// </summary>
        /// <param name="numberOfSecondsPerDecomposition">numberOfSecondsPerDecomposition.</param>
        /// <param name="numberOfSecondsPerInstance">numberOfSecondsPerInstance.</param>
        /// <param name="identifier">identifier.</param>
        public Timeout(int? numberOfSecondsPerDecomposition = default(int?), int? numberOfSecondsPerInstance = default(int?), string identifier = default(string))
        {
            this.NumberOfSecondsPerDecomposition = numberOfSecondsPerDecomposition;
            this.NumberOfSecondsPerInstance = numberOfSecondsPerInstance;
            this.Identifier = identifier;
        }
        
        /// <summary>
        /// Gets or Sets NumberOfSecondsPerDecomposition
        /// </summary>
        [DataMember(Name="numberOfSecondsPerDecomposition", EmitDefaultValue=false)]
        public int? NumberOfSecondsPerDecomposition { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfSecondsPerInstance
        /// </summary>
        [DataMember(Name="numberOfSecondsPerInstance", EmitDefaultValue=false)]
        public int? NumberOfSecondsPerInstance { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Timeout {\n");
            sb.Append("  NumberOfSecondsPerDecomposition: ").Append(NumberOfSecondsPerDecomposition).Append("\n");
            sb.Append("  NumberOfSecondsPerInstance: ").Append(NumberOfSecondsPerInstance).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Timeout);
        }

        /// <summary>
        /// Returns true if Timeout instances are equal
        /// </summary>
        /// <param name="input">Instance of Timeout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Timeout input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberOfSecondsPerDecomposition == input.NumberOfSecondsPerDecomposition ||
                    (this.NumberOfSecondsPerDecomposition != null &&
                    this.NumberOfSecondsPerDecomposition.Equals(input.NumberOfSecondsPerDecomposition))
                ) && 
                (
                    this.NumberOfSecondsPerInstance == input.NumberOfSecondsPerInstance ||
                    (this.NumberOfSecondsPerInstance != null &&
                    this.NumberOfSecondsPerInstance.Equals(input.NumberOfSecondsPerInstance))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumberOfSecondsPerDecomposition != null)
                    hashCode = hashCode * 59 + this.NumberOfSecondsPerDecomposition.GetHashCode();
                if (this.NumberOfSecondsPerInstance != null)
                    hashCode = hashCode * 59 + this.NumberOfSecondsPerInstance.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
