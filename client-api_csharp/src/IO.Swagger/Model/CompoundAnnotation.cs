/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Summary of the results of a Compound. Can be added to a CompoundId.  It is not null within a CompoundId if it was not requested und non null otherwise  The different summary fields within this summary are null if the corresponding  compound does not contain the represented results. The content of  non NULL  summary field id the result was computed but is empty.
    /// </summary>
    [DataContract]
        public partial class CompoundAnnotation :  IEquatable<CompoundAnnotation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompoundAnnotation" /> class.
        /// </summary>
        /// <param name="formulaAnnotation">formulaAnnotation.</param>
        /// <param name="structureAnnotation">structureAnnotation.</param>
        /// <param name="compoundClassAnnotation">compoundClassAnnotation.</param>
        public CompoundAnnotation(FormulaCandidate formulaAnnotation = default(FormulaCandidate), StructureCandidate structureAnnotation = default(StructureCandidate), CompoundClasses compoundClassAnnotation = default(CompoundClasses))
        {
            this.FormulaAnnotation = formulaAnnotation;
            this.StructureAnnotation = structureAnnotation;
            this.CompoundClassAnnotation = compoundClassAnnotation;
        }
        
        /// <summary>
        /// Gets or Sets FormulaAnnotation
        /// </summary>
        [DataMember(Name="formulaAnnotation", EmitDefaultValue=false)]
        public FormulaCandidate FormulaAnnotation { get; set; }

        /// <summary>
        /// Gets or Sets StructureAnnotation
        /// </summary>
        [DataMember(Name="structureAnnotation", EmitDefaultValue=false)]
        public StructureCandidate StructureAnnotation { get; set; }

        /// <summary>
        /// Gets or Sets CompoundClassAnnotation
        /// </summary>
        [DataMember(Name="compoundClassAnnotation", EmitDefaultValue=false)]
        public CompoundClasses CompoundClassAnnotation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompoundAnnotation {\n");
            sb.Append("  FormulaAnnotation: ").Append(FormulaAnnotation).Append("\n");
            sb.Append("  StructureAnnotation: ").Append(StructureAnnotation).Append("\n");
            sb.Append("  CompoundClassAnnotation: ").Append(CompoundClassAnnotation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompoundAnnotation);
        }

        /// <summary>
        /// Returns true if CompoundAnnotation instances are equal
        /// </summary>
        /// <param name="input">Instance of CompoundAnnotation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompoundAnnotation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FormulaAnnotation == input.FormulaAnnotation ||
                    (this.FormulaAnnotation != null &&
                    this.FormulaAnnotation.Equals(input.FormulaAnnotation))
                ) && 
                (
                    this.StructureAnnotation == input.StructureAnnotation ||
                    (this.StructureAnnotation != null &&
                    this.StructureAnnotation.Equals(input.StructureAnnotation))
                ) && 
                (
                    this.CompoundClassAnnotation == input.CompoundClassAnnotation ||
                    (this.CompoundClassAnnotation != null &&
                    this.CompoundClassAnnotation.Equals(input.CompoundClassAnnotation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FormulaAnnotation != null)
                    hashCode = hashCode * 59 + this.FormulaAnnotation.GetHashCode();
                if (this.StructureAnnotation != null)
                    hashCode = hashCode * 59 + this.StructureAnnotation.GetHashCode();
                if (this.CompoundClassAnnotation != null)
                    hashCode = hashCode * 59 + this.CompoundClassAnnotation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
