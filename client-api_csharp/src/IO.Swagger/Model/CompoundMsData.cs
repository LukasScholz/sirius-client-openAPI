/* 
 * Sirius Nightsky Middleware API
 *
 * Sirius Nightsky Middleware API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompoundMsData
    /// </summary>
    [DataContract]
        public partial class CompoundMsData :  IEquatable<CompoundMsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompoundMsData" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="index">index.</param>
        /// <param name="ionMass">ionMass.</param>
        /// <param name="ionType">ionType.</param>
        /// <param name="mergedMs1">mergedMs1.</param>
        /// <param name="mergedMs2">mergedMs2.</param>
        /// <param name="ms1Spectra">ms1Spectra.</param>
        /// <param name="ms2Spectra">ms2Spectra.</param>
        /// <param name="name">name.</param>
        public CompoundMsData(string id = default(string), long? index = default(long?), double? ionMass = default(double?), string ionType = default(string), AnnotatedSpectrum mergedMs1 = default(AnnotatedSpectrum), AnnotatedSpectrum mergedMs2 = default(AnnotatedSpectrum), List<AnnotatedSpectrum> ms1Spectra = default(List<AnnotatedSpectrum>), List<AnnotatedSpectrum> ms2Spectra = default(List<AnnotatedSpectrum>), string name = default(string))
        {
            this.Id = id;
            this.Index = index;
            this.IonMass = ionMass;
            this.IonType = ionType;
            this.MergedMs1 = mergedMs1;
            this.MergedMs2 = mergedMs2;
            this.Ms1Spectra = ms1Spectra;
            this.Ms2Spectra = ms2Spectra;
            this.Name = name;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public long? Index { get; set; }

        /// <summary>
        /// Gets or Sets IonMass
        /// </summary>
        [DataMember(Name="ionMass", EmitDefaultValue=false)]
        public double? IonMass { get; set; }

        /// <summary>
        /// Gets or Sets IonType
        /// </summary>
        [DataMember(Name="ionType", EmitDefaultValue=false)]
        public string IonType { get; set; }

        /// <summary>
        /// Gets or Sets MergedMs1
        /// </summary>
        [DataMember(Name="mergedMs1", EmitDefaultValue=false)]
        public AnnotatedSpectrum MergedMs1 { get; set; }

        /// <summary>
        /// Gets or Sets MergedMs2
        /// </summary>
        [DataMember(Name="mergedMs2", EmitDefaultValue=false)]
        public AnnotatedSpectrum MergedMs2 { get; set; }

        /// <summary>
        /// Gets or Sets Ms1Spectra
        /// </summary>
        [DataMember(Name="ms1Spectra", EmitDefaultValue=false)]
        public List<AnnotatedSpectrum> Ms1Spectra { get; set; }

        /// <summary>
        /// Gets or Sets Ms2Spectra
        /// </summary>
        [DataMember(Name="ms2Spectra", EmitDefaultValue=false)]
        public List<AnnotatedSpectrum> Ms2Spectra { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompoundMsData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IonMass: ").Append(IonMass).Append("\n");
            sb.Append("  IonType: ").Append(IonType).Append("\n");
            sb.Append("  MergedMs1: ").Append(MergedMs1).Append("\n");
            sb.Append("  MergedMs2: ").Append(MergedMs2).Append("\n");
            sb.Append("  Ms1Spectra: ").Append(Ms1Spectra).Append("\n");
            sb.Append("  Ms2Spectra: ").Append(Ms2Spectra).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompoundMsData);
        }

        /// <summary>
        /// Returns true if CompoundMsData instances are equal
        /// </summary>
        /// <param name="input">Instance of CompoundMsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompoundMsData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.IonMass == input.IonMass ||
                    (this.IonMass != null &&
                    this.IonMass.Equals(input.IonMass))
                ) && 
                (
                    this.IonType == input.IonType ||
                    (this.IonType != null &&
                    this.IonType.Equals(input.IonType))
                ) && 
                (
                    this.MergedMs1 == input.MergedMs1 ||
                    (this.MergedMs1 != null &&
                    this.MergedMs1.Equals(input.MergedMs1))
                ) && 
                (
                    this.MergedMs2 == input.MergedMs2 ||
                    (this.MergedMs2 != null &&
                    this.MergedMs2.Equals(input.MergedMs2))
                ) && 
                (
                    this.Ms1Spectra == input.Ms1Spectra ||
                    this.Ms1Spectra != null &&
                    input.Ms1Spectra != null &&
                    this.Ms1Spectra.SequenceEqual(input.Ms1Spectra)
                ) && 
                (
                    this.Ms2Spectra == input.Ms2Spectra ||
                    this.Ms2Spectra != null &&
                    input.Ms2Spectra != null &&
                    this.Ms2Spectra.SequenceEqual(input.Ms2Spectra)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.IonMass != null)
                    hashCode = hashCode * 59 + this.IonMass.GetHashCode();
                if (this.IonType != null)
                    hashCode = hashCode * 59 + this.IonType.GetHashCode();
                if (this.MergedMs1 != null)
                    hashCode = hashCode * 59 + this.MergedMs1.GetHashCode();
                if (this.MergedMs2 != null)
                    hashCode = hashCode * 59 + this.MergedMs2.GetHashCode();
                if (this.Ms1Spectra != null)
                    hashCode = hashCode * 59 + this.Ms1Spectra.GetHashCode();
                if (this.Ms2Spectra != null)
                    hashCode = hashCode * 59 + this.Ms2Spectra.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
