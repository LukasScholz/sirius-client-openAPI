/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ZodiacEdgeFilterThresholds
    /// </summary>
    [DataContract]
        public partial class ZodiacEdgeFilterThresholds :  IEquatable<ZodiacEdgeFilterThresholds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZodiacEdgeFilterThresholds" /> class.
        /// </summary>
        /// <param name="thresholdFilter">thresholdFilter.</param>
        /// <param name="minLocalCandidates">minLocalCandidates.</param>
        /// <param name="minLocalConnections">minLocalConnections.</param>
        /// <param name="identifier">identifier.</param>
        public ZodiacEdgeFilterThresholds(double? thresholdFilter = default(double?), int? minLocalCandidates = default(int?), int? minLocalConnections = default(int?), string identifier = default(string))
        {
            this.ThresholdFilter = thresholdFilter;
            this.MinLocalCandidates = minLocalCandidates;
            this.MinLocalConnections = minLocalConnections;
            this.Identifier = identifier;
        }
        
        /// <summary>
        /// Gets or Sets ThresholdFilter
        /// </summary>
        [DataMember(Name="thresholdFilter", EmitDefaultValue=false)]
        public double? ThresholdFilter { get; set; }

        /// <summary>
        /// Gets or Sets MinLocalCandidates
        /// </summary>
        [DataMember(Name="minLocalCandidates", EmitDefaultValue=false)]
        public int? MinLocalCandidates { get; set; }

        /// <summary>
        /// Gets or Sets MinLocalConnections
        /// </summary>
        [DataMember(Name="minLocalConnections", EmitDefaultValue=false)]
        public int? MinLocalConnections { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZodiacEdgeFilterThresholds {\n");
            sb.Append("  ThresholdFilter: ").Append(ThresholdFilter).Append("\n");
            sb.Append("  MinLocalCandidates: ").Append(MinLocalCandidates).Append("\n");
            sb.Append("  MinLocalConnections: ").Append(MinLocalConnections).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZodiacEdgeFilterThresholds);
        }

        /// <summary>
        /// Returns true if ZodiacEdgeFilterThresholds instances are equal
        /// </summary>
        /// <param name="input">Instance of ZodiacEdgeFilterThresholds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZodiacEdgeFilterThresholds input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ThresholdFilter == input.ThresholdFilter ||
                    (this.ThresholdFilter != null &&
                    this.ThresholdFilter.Equals(input.ThresholdFilter))
                ) && 
                (
                    this.MinLocalCandidates == input.MinLocalCandidates ||
                    (this.MinLocalCandidates != null &&
                    this.MinLocalCandidates.Equals(input.MinLocalCandidates))
                ) && 
                (
                    this.MinLocalConnections == input.MinLocalConnections ||
                    (this.MinLocalConnections != null &&
                    this.MinLocalConnections.Equals(input.MinLocalConnections))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ThresholdFilter != null)
                    hashCode = hashCode * 59 + this.ThresholdFilter.GetHashCode();
                if (this.MinLocalCandidates != null)
                    hashCode = hashCode * 59 + this.MinLocalCandidates.GetHashCode();
                if (this.MinLocalConnections != null)
                    hashCode = hashCode * 59 + this.MinLocalConnections.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
