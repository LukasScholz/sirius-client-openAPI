/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ProjectSpacesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProjectSpacesApiTests
    {
        private ProjectSpacesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProjectSpacesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProjectSpacesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProjectSpacesApi
            //Assert.IsInstanceOfType(typeof(ProjectSpacesApi), instance, "instance is a ProjectSpacesApi");
        }

        /// <summary>
        /// Test CloseProjectSpace
        /// </summary>
        [Test]
        public void CloseProjectSpaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //instance.CloseProjectSpace(projectId);
            
        }
        /// <summary>
        /// Test CreateProjectSpace
        /// </summary>
        [Test]
        public void CreateProjectSpaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string pathToProject = null;
            //string pathToSourceProject = null;
            //bool? awaitImport = null;
            //var response = instance.CreateProjectSpace(projectId, pathToProject, pathToSourceProject, awaitImport);
            //Assert.IsInstanceOf<ProjectSpaceId> (response, "response is ProjectSpaceId");
        }
        /// <summary>
        /// Test GetProjectSpace
        /// </summary>
        [Test]
        public void GetProjectSpaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //var response = instance.GetProjectSpace(projectId);
            //Assert.IsInstanceOf<ProjectSpaceId> (response, "response is ProjectSpaceId");
        }
        /// <summary>
        /// Test GetProjectSpaces
        /// </summary>
        [Test]
        public void GetProjectSpacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetProjectSpaces();
            //Assert.IsInstanceOf<List<ProjectSpaceId>> (response, "response is List<ProjectSpaceId>");
        }
        /// <summary>
        /// Test OpenProjectSpace
        /// </summary>
        [Test]
        public void OpenProjectSpaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string pathToProject = null;
            //var response = instance.OpenProjectSpace(projectId, pathToProject);
            //Assert.IsInstanceOf<ProjectSpaceId> (response, "response is ProjectSpaceId");
        }
    }

}
