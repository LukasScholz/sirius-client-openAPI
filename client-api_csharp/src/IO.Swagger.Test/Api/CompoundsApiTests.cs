/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CompoundsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CompoundsApiTests
    {
        private CompoundsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CompoundsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CompoundsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CompoundsApi
            //Assert.IsInstanceOfType(typeof(CompoundsApi), instance, "instance is a CompoundsApi");
        }

        /// <summary>
        /// Test DeleteCompound
        /// </summary>
        [Test]
        public void DeleteCompoundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string cid = null;
            //instance.DeleteCompound(projectId, cid);
            
        }
        /// <summary>
        /// Test GetCompound
        /// </summary>
        [Test]
        public void GetCompoundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string cid = null;
            //bool? topAnnotation = null;
            //bool? msData = null;
            //var response = instance.GetCompound(projectId, cid, topAnnotation, msData);
            //Assert.IsInstanceOf<CompoundId> (response, "response is CompoundId");
        }
        /// <summary>
        /// Test GetCompounds
        /// </summary>
        [Test]
        public void GetCompoundsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //bool? topAnnotation = null;
            //bool? msData = null;
            //var response = instance.GetCompounds(projectId, topAnnotation, msData);
            //Assert.IsInstanceOf<List<CompoundId>> (response, "response is List<CompoundId>");
        }
        /// <summary>
        /// Test ImportCompounds
        /// </summary>
        [Test]
        public void ImportCompoundsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //string projectId = null;
            //bool? alignLCMSRuns = null;
            //bool? allowMs1OnlyData = null;
            //bool? ignoreFormulas = null;
            //var response = instance.ImportCompounds(body, projectId, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas);
            //Assert.IsInstanceOf<JobId> (response, "response is JobId");
        }
        /// <summary>
        /// Test ImportCompoundsFromString
        /// </summary>
        [Test]
        public void ImportCompoundsFromStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string body = null;
            //string format = null;
            //string projectId = null;
            //string sourceName = null;
            //var response = instance.ImportCompoundsFromString(body, format, projectId, sourceName);
            //Assert.IsInstanceOf<List<CompoundId>> (response, "response is List<CompoundId>");
        }
    }

}
