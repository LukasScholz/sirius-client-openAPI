/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing FormulaResultsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FormulaResultsApiTests
    {
        private FormulaResultsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FormulaResultsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FormulaResultsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FormulaResultsApi
            //Assert.IsInstanceOfType(typeof(FormulaResultsApi), instance, "instance is a FormulaResultsApi");
        }

        /// <summary>
        /// Test GetBestMatchingCanopusPredictions
        /// </summary>
        [Test]
        public void GetBestMatchingCanopusPredictionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string compoundId = null;
            //string formulaId = null;
            //var response = instance.GetBestMatchingCanopusPredictions(projectId, compoundId, formulaId);
            //Assert.IsInstanceOf<CompoundClasses> (response, "response is CompoundClasses");
        }
        /// <summary>
        /// Test GetCanopusPredictions
        /// </summary>
        [Test]
        public void GetCanopusPredictionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string compoundId = null;
            //string formulaId = null;
            //var response = instance.GetCanopusPredictions(projectId, compoundId, formulaId);
            //Assert.IsInstanceOf<CanopusPredictions> (response, "response is CanopusPredictions");
        }
        /// <summary>
        /// Test GetFingerprintPrediction
        /// </summary>
        [Test]
        public void GetFingerprintPredictionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string compoundId = null;
            //string formulaId = null;
            //var response = instance.GetFingerprintPrediction(projectId, compoundId, formulaId);
            //Assert.IsInstanceOf<List<double?>> (response, "response is List<double?>");
        }
        /// <summary>
        /// Test GetFormulaIds
        /// </summary>
        [Test]
        public void GetFormulaIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string compoundId = null;
            //bool? resultOverview = null;
            //bool? formulaCandidate = null;
            //var response = instance.GetFormulaIds(projectId, compoundId, resultOverview, formulaCandidate);
            //Assert.IsInstanceOf<List<FormulaResultContainer>> (response, "response is List<FormulaResultContainer>");
        }
        /// <summary>
        /// Test GetFormulaResult
        /// </summary>
        [Test]
        public void GetFormulaResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string compoundId = null;
            //string formulaId = null;
            //bool? resultOverview = null;
            //bool? formulaCandidate = null;
            //var response = instance.GetFormulaResult(projectId, compoundId, formulaId, resultOverview, formulaCandidate);
            //Assert.IsInstanceOf<FormulaResultContainer> (response, "response is FormulaResultContainer");
        }
        /// <summary>
        /// Test GetFragTree
        /// </summary>
        [Test]
        public void GetFragTreeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string compoundId = null;
            //string formulaId = null;
            //var response = instance.GetFragTree(projectId, compoundId, formulaId);
            //Assert.IsInstanceOf<FragmentationTree> (response, "response is FragmentationTree");
        }
        /// <summary>
        /// Test GetSimulatedIsotopePattern
        /// </summary>
        [Test]
        public void GetSimulatedIsotopePatternTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string compoundId = null;
            //string formulaId = null;
            //var response = instance.GetSimulatedIsotopePattern(projectId, compoundId, formulaId);
            //Assert.IsInstanceOf<AnnotatedSpectrum> (response, "response is AnnotatedSpectrum");
        }
        /// <summary>
        /// Test GetStructureCandidates
        /// </summary>
        [Test]
        public void GetStructureCandidatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string compoundId = null;
            //string formulaId = null;
            //bool? fingerprint = null;
            //bool? dbLinks = null;
            //bool? pubMedIds = null;
            //int? topK = null;
            //var response = instance.GetStructureCandidates(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK);
            //Assert.IsInstanceOf<List<StructureCandidate>> (response, "response is List<StructureCandidate>");
        }
        /// <summary>
        /// Test GetTopStructureCandidate
        /// </summary>
        [Test]
        public void GetTopStructureCandidateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string compoundId = null;
            //bool? fingerprint = null;
            //bool? dbLinks = null;
            //bool? pubMedIds = null;
            //var response = instance.GetTopStructureCandidate(projectId, compoundId, fingerprint, dbLinks, pubMedIds);
            //Assert.IsInstanceOf<StructureCandidate> (response, "response is StructureCandidate");
        }
    }

}
