/* 
 * SIRIUS Nightsky API
 *
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ComputationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ComputationsApiTests
    {
        private ComputationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ComputationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ComputationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ComputationsApi
            //Assert.IsInstanceOfType(typeof(ComputationsApi), instance, "instance is a ComputationsApi");
        }

        /// <summary>
        /// Test DeleteJob
        /// </summary>
        [Test]
        public void DeleteJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string jobId = null;
            //bool? cancelIfRunning = null;
            //bool? awaitDeletion = null;
            //instance.DeleteJob(projectId, jobId, cancelIfRunning, awaitDeletion);
            
        }
        /// <summary>
        /// Test DeleteJobConfig
        /// </summary>
        [Test]
        public void DeleteJobConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteJobConfig(name);
            
        }
        /// <summary>
        /// Test GetDefaultJobConfig
        /// </summary>
        [Test]
        public void GetDefaultJobConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? includeConfigMap = null;
            //var response = instance.GetDefaultJobConfig(includeConfigMap);
            //Assert.IsInstanceOf<JobSubmission> (response, "response is JobSubmission");
        }
        /// <summary>
        /// Test GetJob
        /// </summary>
        [Test]
        public void GetJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //string jobId = null;
            //bool? includeState = null;
            //bool? includeCommand = null;
            //bool? includeAffectedCompounds = null;
            //var response = instance.GetJob(projectId, jobId, includeState, includeCommand, includeAffectedCompounds);
            //Assert.IsInstanceOf<JobId> (response, "response is JobId");
        }
        /// <summary>
        /// Test GetJobConfig
        /// </summary>
        [Test]
        public void GetJobConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //bool? includeConfigMap = null;
            //var response = instance.GetJobConfig(name, includeConfigMap);
            //Assert.IsInstanceOf<JobSubmission> (response, "response is JobSubmission");
        }
        /// <summary>
        /// Test GetJobConfigs
        /// </summary>
        [Test]
        public void GetJobConfigsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? includeConfigMap = null;
            //var response = instance.GetJobConfigs(includeConfigMap);
            //Assert.IsInstanceOf<List<JobSubmission>> (response, "response is List<JobSubmission>");
        }
        /// <summary>
        /// Test GetJobs
        /// </summary>
        [Test]
        public void GetJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string projectId = null;
            //bool? includeState = null;
            //bool? includeCommand = null;
            //bool? includeAffectedCompounds = null;
            //var response = instance.GetJobs(projectId, includeState, includeCommand, includeAffectedCompounds);
            //Assert.IsInstanceOf<List<JobId>> (response, "response is List<JobId>");
        }
        /// <summary>
        /// Test PostJobConfig
        /// </summary>
        [Test]
        public void PostJobConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobSubmission body = null;
            //string name = null;
            //bool? overrideExisting = null;
            //var response = instance.PostJobConfig(body, name, overrideExisting);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test StartJob
        /// </summary>
        [Test]
        public void StartJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobSubmission body = null;
            //string projectId = null;
            //bool? includeState = null;
            //bool? includeCommand = null;
            //bool? includeAffectedCompounds = null;
            //var response = instance.StartJob(body, projectId, includeState, includeCommand, includeAffectedCompounds);
            //Assert.IsInstanceOf<JobId> (response, "response is JobId");
        }
        /// <summary>
        /// Test StartJobFromConfig
        /// </summary>
        [Test]
        public void StartJobFromConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //string jobConfigName = null;
            //string projectId = null;
            //bool? recompute = null;
            //bool? includeState = null;
            //bool? includeCommand = null;
            //bool? includeAffectedCompounds = null;
            //var response = instance.StartJobFromConfig(body, jobConfigName, projectId, recompute, includeState, includeCommand, includeAffectedCompounds);
            //Assert.IsInstanceOf<JobId> (response, "response is JobId");
        }
    }

}
