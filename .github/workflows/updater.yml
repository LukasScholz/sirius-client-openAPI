# This is a basic workflow that is manually triggered

name: Client_Updater

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
#    inputs:
 #     name:
  #      # Friendly description to be shown in the UI instead of 'name'
   #     description: 'Person to greet'
    #    # Default value if no value is explicitly provided
     ##   default: 'World'
       # # Input has to be provided for the workflow to run
        #required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  UpdateClients:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs using the runners shell
    - name: checkout repo
      uses: actions/checkout@v3.1.0
    - name: Download latest openapi-generator
      run: |
        cd .updater/openapi_generator
        wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.2.1/openapi-generator-cli-6.2.1.jar -O openapi-generator-cli.jar
        java -jar openapi-generator-cli.jar version > version
    - name: Cache Sirius Release
      id: cache-sirius
      uses: actions/cache@v3
      with:
        path: .updater/api/sirius
        key: sirius
    - name: Check cached version
      uses: nick-fields/retry@v2
      with:
        max_attempts: 5
        timeout_minutes: 2
        command: |
            currVersion=$(cat .updater/api/api.version)
            newVersion=$(curl -s  https://api.github.com/repos/boecker-lab/sirius/releases | grep 'browser_download_url.*linux64-service.zip\"' | sort | tac | head -n 1 | cut -d : -f 2,3 | tr -d \" | egrep -o "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
            cd .updater/api
            if [ "$currVersion" != "$newVersion" ]; then
            sleep 1
            curl -s  https://api.github.com/repos/boecker-lab/sirius/releases | grep 'browser_download_url.*linux64-service.zip\"' | sort | tac | head -n 1 | cut -d : -f 2,3 | tr -d \" | wget -i -
            unzip *.zip
            echo $newVersion > api.version
            fi
    - name: Download latest Sirius Release
      if: steps.cache-sirius.outputs.cache-hit != 'true'
      uses: nick-fields/retry@v2
      with:
        max_attempts: 5
        timeout_minutes: 2
        command: |
            cd .updater/api
            curl -s  https://api.github.com/repos/boecker-lab/sirius/releases | grep 'browser_download_url.*linux64-service.zip\"' | sort | tac | head -n 1 | cut -d : -f 2,3 | tr -d \" | wget -i -
            echo "Download Complete"
            unzip *.zip
            echo "Api Ready"
    - name: Run Rest Api
      run: |
        bash .updater/api/sirius/bin/sirius REST -p 8080 &
    - name: Update api-docs.json
      run: |
        while ! nc -z localhost 8080; do sleep 0.1; done
        cd .updater/api
        wget http://localhost:8080/v3/api-docs
        mv api-docs api-docs.json
    - name: Update Clients
      run: |
        echo "generating Java Code"
        java -jar .updater/openapi_generator/openapi-generator-cli.jar generate -i .updater/api/api-docs.json -c .updater/config/Java/config.json -g java -o client-api_java/generated
        
        echo "generating Python Code"
        #java -jar .updater/openapi_generator/openapi-generator-cli.jar generate -i .updater/api/api-docs.json -c .updater/config/Python/config.json -g python -o client-api_python/generated
        
        #echo "generating R Code"
        #rm -r client-api_r/generated/*
        #java -jar .updater/openapi_generator/openapi-generator-cli.jar generate -i .updater/api/api-docs.json -c .updater/config/R/config.json -g r -o client-api_r/generated
        
        echo "generating Ruby Code"
        java -jar .updater/openapi_generator/openapi-generator-cli.jar generate -i .updater/api/api-docs.json -c .updater/config/Ruby/config.json -g ruby -o client-api_ruby/generated
        echo "generating Finished!"
   # - name: Format Python Package
    #  run: |
    #    echo removed
        #rm client-api_python/generated/PySirius/sirius_api.py
        #cp client-api_python/sirius_api.py client-api_python/generated/PySirius
        #rm client-api_python/generated/PySirius/Sirius.py
        #cp client-api_python/Sirius.py client-api_python/generated/PySirius
        
        #echo "from PySirius.sirius_api import PySiriusAPI" >> client-api_python/generated/PySirius/__init__.py
        #echo "from PySirius.Sirius import SiriusSDK" >> client-api_python/generated/PySirius/__init__.py
    #- name: Format R package
    #  run: |
        #cp client-api_r/SiriusSDK.R  client-api_r/generated/R/SiriusSDK.R
        #echo >> client-api_r/generated/NAMESPACE
        #echo "# SDK" >> client-api_r/generated/NAMESPACE
        #echo "export(SiriusSDK)" >> client-api_r/generated/NAMESPACE
        
        #cp client-api_r/api_response_fix.R  client-api_r/generated/R/api_response.R
        
        #chmod +x ./client-api_r/api_client_fix.sh
        #./client-api_r/api_client_fix.sh ./client-api_r/generated/R/api_client.R
    #  shell: bash
    - name: Remove Sirius Rest Api
      run: |
        cd .updater/api
        rm -rf *sirius*
        echo "Done"
    - name: Remove Openapi Generator Files
      run: |
        rm .updater/openapi_generator/openapi-generator-cli.jar
        echo "Done"
    - name: update file and push to remote
      uses: stefanzweifel/git-auto-commit-action@v4.15.2
      with:
        commit_message: Auto-Updated Swagger Clients
        
  RunPythonTest:
    needs: UpdateClients
    uses: ./.github/workflows/PythonTest.yml
        
  RunJavaTest:
    timeout-minutes: 10
    # Add dependency for Test
    needs: UpdateClients
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs using the runners shell
    - name: checkout repo
      uses: actions/checkout@v3.1.0
    - name: Download latest Sirius Release
      run: |
        cd .updater/api
        curl -s  https://api.github.com/repos/boecker-lab/sirius/releases | grep 'browser_download_url.*linux64-service.zip\"' | sort | tac | head -n 1 | cut -d : -f 2,3 | tr -d \" | wget -i -
        echo "Download Complete"
        unzip *.zip
        echo "Api Ready"
    - name: Run Rest Api
      run: |
        bash .updater/api/sirius/bin/sirius REST -p 8080 &
        while ! nc -z localhost 8080; do sleep 0.1; done
    - name: execute Java script
      run: |
        echo "TODO" 

  RunRTest:
    timeout-minutes: 10
    # Add dependency for Test
    needs: UpdateClients
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs using the runners shell
    - name: checkout repo
      uses: actions/checkout@v3.1.0
    - name: Download latest Sirius Release
      run: |
        cd .updater/api
        curl -s  https://api.github.com/repos/boecker-lab/sirius/releases | grep 'browser_download_url.*linux64-service.zip\"' | sort | tac | head -n 1 | cut -d : -f 2,3 | tr -d \" | wget -i -
        echo "Download Complete"
        unzip *.zip
        echo "Api Ready"
    - name: Run Rest Api
      run: |
        bash .updater/api/sirius/bin/sirius REST -p 8080 &
        while ! nc -z localhost 8080; do sleep 0.1; done
    - name: execute R script
      run: |
        echo "TODO" 

  RunRubyTest:
    timeout-minutes: 10
    # Add dependency for Test
    needs: UpdateClients
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs using the runners shell
    - name: checkout repo
      uses: actions/checkout@v3.1.0
    - name: Download latest Sirius Release
      run: |
        cd .updater/api
        curl -s  https://api.github.com/repos/boecker-lab/sirius/releases | grep 'browser_download_url.*linux64-service.zip\"' | sort | tac | head -n 1 | cut -d : -f 2,3 | tr -d \" | wget -i -
        echo "Download Complete"
        unzip *.zip
        echo "Api Ready"
    - name: Run Rest Api
      run: |
        bash .updater/api/sirius/bin/sirius REST -p 8080 &
        while ! nc -z localhost 8080; do sleep 0.1; done
    - name: execute Ruby script
      run: |
        echo "TODO" 

  Cleanup:
    needs: [RunRubyTest, RunRTest, RunJavaTest, RunPythonTest]
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps: 
      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Undo Push
        run: |
          git reset --hard HEAD@{1}
          git push -f
